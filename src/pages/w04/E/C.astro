---
import Layout from "../../../layouts/Layout.astro";
import Header from "../../../components/Header.astro";
const { useLayout } = Astro.props;
---

<Layout
 title="Week 2"
 dir="w04/"
 displayLayout={useLayout}
 chapterSubSections={[]}
>
 <Header id="C">
  <h1>More on <em>switch</em></h1>
 </Header><div>
  <p class="firstLine">Consider this code fragment inside a <tt>switch</tt>:</p>
  <pre
   class="language-cpp"><code>case 'a':
case 'e':
case 'i':
case 'o':
case 'u':
    cout &lt;&lt; "vowel";
    break;</code></pre>
  <p>
   As you can see, <tt>break</tt> statements are <mark>not required</mark> at the
   end of each <tt>case</tt>. If the
   <tt>break</tt> is missing, the program continues executing the
   <strong>next clause</strong> after it finishes the selected one. We say the <tt
    >case</tt
   >
   <mark>falls-through</mark>.
  </p>
  <p>
   This is useful as shown here where the output is printed for all of the
   lower-case vowels.
  </p>
  <pre
   class="language-cpp"><code>case ' ': case '\t': case '\n':
    cout &lt;&lt; "whitespace";
    break;</code></pre>
  <p>
   If there is nothing in the body of the case, it may be more readable to
   format it like the whitespace block shown here.
  </p>

  <p>
   If there is <strong>any code</strong> inside a <tt>case</tt>
   block that falls through, most compilers will issue a warning. If you <strong
    >intend</strong
   > to fall through, and you want to suppress the warning, add a comment like this,
   just before the second case:
  </p>
  <pre class="language-cpp"><code>// fall through</code></pre>
  <h2>A Few More Rules</h2>
  <ul>
   <li>Two <tt>case</tt> labels may not have the same value</li>
   <li>
    A label must precede a statement or another <tt>case</tt>
    label. It may not be alone.
   </li>
   <li>
    Variables <mark>may not</mark> be defined inside one <tt>case</tt> block and
    then used in another.
   </li>
  </ul>
 </div>
</Layout>
