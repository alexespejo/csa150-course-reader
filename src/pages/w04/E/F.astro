---
import Layout from "../../../layouts/Layout.astro";
import Header from "../../../components/Header.astro";
const { useLayout } = Astro.props;
---
<Layout
title="Week 2"
dir="w04/"
displayLayout={useLayout}
chapterSubSections={[]}
><Header id="F">
   <h1>Confirmation Loops</h1>
</Header><div>
  <img src='../images/diver.png' class='right'
    alt='A decorative image of a diver.'>
   <p class='firstLine'> When you make a withdrawal at your 
    ATM, before your card is returned, the machine will ask you 
    “Do you want to make another transaction?” 
    This is a <mark>confirmation loop</mark>, and the 
    <tt class='i'>do-while</tt> loop seems
    ideal for solving this problem.
</p>
<p>However, there are still some things you need to watch out for. 
    Considerthis code:
</p>
<pre class='language-cpp'><code>do
&lbrace;
    completeSomeTransaction();
    cout &lt;&lt; "Do you want another transaction? ";
    string answer;
    cin &gt;&gt; answer;
&rbrace;
while (answer.front() == 'y');</code></pre>
<p> While this <strong>looks reasonable</strong> (other than 
  not providing for the empty string or an upper-case ‘Y’), 
  it actually <mark>won’t compile</mark>. When you get to the
  <strong>loop condition</strong>, the <tt>string</tt> variable 
  <tt>answer</tt> has <strong>gone out of scope</strong>.
  <img src='../images/confirm.jpg' class='inlineCenter'
    alt='Error message shown with the code above.'>
</p>
<p>To fix this, you have to move the initial declaration for
  <tt>answer</tt> before the <tt>do</tt> statement, which is
  not quite as clear. 
  So, even in this natural use-case, the <tt class='i'>while</tt> 
    loop is a little more efficient.
</p>
     
</div></Layout>