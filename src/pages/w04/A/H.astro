---
import Layout from "../../../layouts/Layout.astro";
import Header from "../../../components/Header.astro";
import imageSkeleton from "../images/skeleton.png"
const { useLayout } = Astro.props;
---

<Layout
 title="Week 2"
 dir="w04/"
 displayLayout={useLayout}
 chapterSubSections={[]}
>
 <Header id="H">
  <h1>Stubbing the Implementation</h1>
 </Header><div>
  <img
   src={imageSkeleton}
   class="right"
   alt="A decorative image of a skeleton."
  />
  <p class="firstLine">
   Always start by writing a "skeleton" or <strong>stub</strong> for your function.
   Make sure your code starts out syntactically correct, and then stays that way.
  </p>
  <ol>
   <li>
    <strong>Copy the prototype or declaration</strong> into the implementation file.
    You don't need to bring the documentation with the prototype, but you may.
   </li>
   <li>
    <mark>Remove the semicolon</mark> at the end of the prototype and <strong
     >add some braces</strong
    >
    to supply a <strong>body</strong> for the function.
   </li>
   <li>
    Unless your function is a procedure (<tt>void</tt> function), you must create
    a return variable to hold the result. Look at the function return type to decide
    what type to make this variable. Initialize it to the "empty" value.
   </li>
   <li>Add a <tt>return</tt> statement at the very end of your function.</li>
  </ol>
 </div>
 <div class="highlight alert alert-info">
  <p>
   <strong>Warning.</strong>
   Make sure your stubs always include a <tt>return</tt> statement of the correct
   type, or your function may crash at runtime.
  </p>
 </div>
 <p>Here's a<strong> stubbed-out</strong> version of one function:</p>
 <pre
  class="language-cpp"><code>#include "digits.h"

int firstdigit(int n)
&lbrace;
    int result{};
    return result;
&rbrace;</code></pre>
 <p>
  Once you've stubbed out the two other functions, you'd expect your program to
  compile and link, but it does not. You get the same linker errors that
  appeared earlier.
 </p>
 <p>
  <mark>Why?</mark>
  Since you now have two, separately compiled portions of object code, you have to
  tell the compiler
  <strong>how to link them together</strong>. You do that with a
  <mark>makefile</mark>.
 </p>
</Layout>
