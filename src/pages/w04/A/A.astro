---
import Layout from "../../../layouts/Layout.astro";
import Header from "../../../components/Header.astro";
import image8Ball from "../images/8ball.png";
const { useLayout } = Astro.props;
---

<Layout
 title="Week 2"
 dir="w04/"
 displayLayout={useLayout}
 chapterSubSections={[]}
>
 <Header id="A">
  <h1>Library Mechanics</h1>
 </Header><div>
  <img src={image8Ball} class="right" alt="Decorative image: a magic 8-ball." />
  <p class="firstLine">
   Functions are
   <strong>named "chunks" of code</strong>
   that <mark>calculate a value</mark> or that <mark>carry out an action</mark>.
   I think of them like the "Magic 8-ball"; you ask a question, and get an
   answer, never knowing how it is accomplished.
  </p>
  <p>
   In C++, a function associates a computation—specified by a block of code that
   forms the body of the function—with a particular name. If a function
   calculates a value, what we call a <b>fruitful</b>
   function, then it may be used in an expression; if it carries out an action (called
   a void function in C++ or <strong>procedure</strong> in other languages), it cannot.
  </p>
  <p>
   Using functions reduces bugs and make maintenance more effective by allowing
   you to reuse proven code, instead of duplicating it. Placing related
   functions<strong> into a library</strong>, allows you to reuse them in many
   different contexts.
  </p>
  <h2>Organization</h2>
  <p>
   Programs using functions can be organized in several different ways. The
   question is, "Where do definitions and declarations go?"
  </p>
  <ol>
   <li>
    You may <mark>define</mark> your functions before calling them. If you have only
    one or two functions in a "throw-away" program, this is fine. Because your functions
    need to appear in a particular order, though, your code is often harder to understand
    and maintain. In general, you
    <mark>will not to do this</mark>.
   </li>
   <li>
    You can <mark>prototype</mark> (or declare) your functions at the top of your
    file (usually under the library
    <tt>#include</tt> statements) and then <strong>define</strong>
    the functions later in the file, usually after the <tt>main</tt>
    function. This makes it easier to read and understand your program, because the
    primary logic appears before the function details.
    <p>
     It also makes your code much easier to maintain, because you can then
     define your functions in any order you like. <strong
      >Do this for small programs</strong
     >
     and for functions that are unique to a particular program.
    </p>
   </li>
   <li>
    If you have functions which you want to <strong>reuse</strong> in different programs,
    you should <mark>place those function in a library</mark>, (a collection of
    similar functions) and
    <strong> place the prototype into a header file</strong>. That is what
    you'll generally do in this class for all of your functions from now on.
   </li>
  </ol>
  <p>
   In the next Lesson, you will learn to use
   <mark>separate compilation</mark> for your programs.
  </p>
 </div>
</Layout>
