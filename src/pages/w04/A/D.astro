---
import Layout from "../../../layouts/Layout.astro";
import Header from "../../../components/Header.astro";
const { useLayout } = Astro.props;
---

<Layout
 title="Week 2"
 dir="w04/"
 displayLayout={useLayout}
 chapterSubSections={[]}
>
 <Header id="D">
  <h1>The Interface or Header File</h1>
 </Header><div>
  <p class="firstLine">
   A library may contain several definitions: <strong>functions</strong>, <strong
    >types</strong
   >, and <strong>constants</strong>. In C++, the interface and implementation
   are in two files: a <strong>header (or interface) file</strong> and an
   <strong>implementation</strong> file. The <strong>interface</strong> file usually
   ends with the extension <tt>.h</tt>.
  </p>
  <p>
   <mark
    >Add <tt>#include</tt>
    <tt>"digits.h"</tt> in your <b>client</b>
    file right after the <tt>using</tt>
    <tt>namespace</tt>
    <tt>std</tt> line.</mark
   > Then, create and open <tt>digits.h</tt>
   and let's look at header guards.
  </p>
  <h2>Preprocessor Header Guards</h2>
  <p>
   It is possible for one header file to include another. You must do <mark
    >something</mark
   > to
   <strong
    >make sure that the compiler doesnâ€™t include the same interface twice</strong
   >. You do that by adding three lines to every header file that are known as
   the <strong>interface boilerplate</strong>, or <mark>header guards</mark>.
   They look like this:
  </p>
  <pre
   class="line-numbers language-cpp"><code>#ifndef FILE_IDENTIFIER
#define FILE_IDENTIFIER
    // Entire contents of the header file
#endif</code></pre>
  <p>
   This pattern appears <mark>in every interface</mark>. These are
   <strong>instructions to the preprocessor</strong>, a program that examines
   and modifies your code before it is sent to the compiler. The boilerplate
   consists of the <tt>#ifndef</tt> and <tt>#define</tt>
   at the beginning and the <tt>#endif</tt> at the end.
  </p>
  <ol>
   <li>
    The <tt>#ifndef</tt> preprocessor directive checks whether the <tt
     >FILE_IDENTIFIER</tt
    > symbol has been defined in the
    <strong>current <mark>translation unit</mark></strong>. When the
    preprocessor reads this interface file
    <mark>for the first time</mark>, the answer is no.
   </li>
   <li>
    The next line <mark>defines the symbol</mark>, using <tt>#define</tt>. Thus,
    if asked later to <tt>#include</tt> the same interface, the <tt
     >FILE_IDENTIFIER</tt
    >
    <strong>will already be defined</strong>, and the preprocessor will <mark
     >skip over the contents</mark
    >
    of the interface this time around, not including them a second time.
   </li>
  </ol>
  <p>
   A common convention to create <tt>FILE_IDENTIFIER</tt>
   is to simply <strong>capitalize the name of the file itself</strong>,
   replacing the dot with an underscore. You may use another convention if you
   like, but make sure that the name will be unique when you build your project.
  </p>
  <p>Go ahead and add the header guards to <tt>digits.h</tt> now.</p>
 </div>
</Layout>
