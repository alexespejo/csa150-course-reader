---
import Layout from "../../../layouts/Layout.astro";
import Header from "../../../components/Header.astro";
const { useLayout } = Astro.props;
---

<Layout
 title="Week 2"
 dir="w04/"
 displayLayout={useLayout}
 chapterSubSections={[]}
>
 <Header id="B">
  <h1>Output Parameters</h1>
 </Header><div>
  <p class="firstLine">
   Let's take a quick look at the code for
   <tt>getCoefficients()</tt> to see how <mark>output</mark>
   parameters work.
  </p>
  <pre
   class="language-cpp"><code>void getCoefficients(double&amp; x, double&amp; y, double&amp; z)
&lbrace;
    cout &lt;&lt; "Enter 3 coefficients: ";
    cin &gt;&gt; x &gt;&gt; y &gt;&gt; z;
&rbrace;</code></pre>
  <p>
   If a function <strong>returns more than one</strong> piece of information, then
   you can use <mark>reference parameters</mark> to return that information to the
   caller.
  </p>
  <div class="highlight alert alert-info">
   <p>
    Note that when you call <tt>getCoefficients</tt>, information
    <strong>does not</strong> flow from <tt>main</tt>
    <strong>into</strong> the function; instead, information
    <mark>flows out of the function</mark> back to <tt>main</tt>, through the
    three <strong>output parameters</strong>
    <tt>x</tt>, <tt>y</tt>, and <tt>z</tt>, which <strong
     >are not new variables</strong
    >, but are <strong>new names</strong>
    or <strong>aliases</strong> for the variables <tt>a</tt>, <tt>b</tt>, and <tt
     >c</tt
    > used when calling it.
   </p>
  </div>
  <p>
   <p>
    Instead of separate inputs, this function reads three variables using a <strong
     >single input statement</strong
    >. The values entered by the user must be <strong
     >separated from each other by whitespace</strong
    >, not commas. Spaces, tabs or newlines all work fine.
   </p>
   <p>
    When <strong>documenting your parameters</strong>, you may <mark
     >annotate</mark
    > each of the parameters with the direction of the information flow: <tt
     class="t">@param[in]</tt
    >,
    <tt class="t">@param[in,out]</tt>, <tt class="t">@param[out]</tt>. If you
    don't annotate the parameter, it is
    <strong>assumed</strong>
    to be an input parameter.
   </p>
  </p>
 </div>
</Layout>
