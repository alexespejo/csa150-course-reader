---
import Layout from "../../../layouts/Layout.astro";
import Header from "../../../components/Header.astro";
const { useLayout } = Astro.props;
---

<Layout
 title="Week 2"
 dir="w04/"
 displayLayout={useLayout}
 chapterSubSections={[]}
>
 <Header id="D">
  <h1>Input-Output Parameters</h1>
 </Header><div>
  <p class="firstLine">
   We can use a single parameter for both input and for output. Consider
   <tt>toUpperCase()</tt> in Java. It takes a <tt>String</tt>
   as an argument, and returns a new, uppercase version of the original.
  </p>
  <pre
   class="language-cpp"><code>String str = "cat";
str = str.toUpperCase();  // CAT</code></pre>
  <p>
   This <mark>builder method</mark> does not (indeed, in Java, cannot) change its
   argument. However, that is a little inefficient, especially when assigned to the
   same variable, as we've done here.
  </p>
  <p>
   Since C++ strings <strong><mark>may</mark> be modified</strong>, we can write
   a more efficient version like this:
  </p>
  <pre
   class="language-cpp"><code>void toUpperCase(string&amp; str)
&rbrace;
    for (auto&amp; c : str) &lbrace; c = toupper(c); &rbrace; 
&rbrace;</code></pre>
  <p>
   Here, <tt>str</tt> provides <mark>both</mark> input and output. We call this and
   <mark>input-output</mark> parameter. Because of that, it is passed by reference,
   <mark>not</mark>
   <tt>const</tt>
   reference. Note also that the loop variable <tt>c</tt> is a reference, not a value,
   so we can <strong>modify the character it refers to</strong>. Here's how to
   use it:
  </p>
  <pre
   class="language-cpp"><code>string str = "cat";
toUpperCase(str);  // Not str = toUpperCase(str)</code></pre>
 </div>
</Layout>
