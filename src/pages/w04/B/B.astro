---
import Layout from "../../../layouts/Layout.astro";
import Header from "../../../components/Header.astro";
const { useLayout } = Astro.props;
---

<Layout
 title="Week 2"
 dir="w04/"
 displayLayout={useLayout}
 chapterSubSections={[]}
>
 <Header id="B">
  <h1>Planning &amp; Implementation</h1>
 </Header><div>
  <p class="firstLine">
   The documentation in the header file is for the
   <strong>client</strong>-what us necessary to <strong>use</strong>
   the function. In the implementation file, add <strong
    >implementation comments</strong
   >, in the form of a <mark>function plan</mark>, to help you to write the
   function.
  </p>
  <p>
   These comments <strong>are intended for programmers</strong>, not for the
   clients of the function. Don't use Doxygen, but describe the algorithms and
   important implementation details.
  </p>
  <p>
   For instance, here is my plan for <tt>lastDigit()</tt>, placed inside the
   body of the function:
  </p>
  <pre class="language-cpp"><code>// result &lt;- |n| % 10</code></pre>
  <div class="highlight alert alert-info">
   <p>
    Single-line comments are simplest for this, since editors will comment and
    un-comment a portion of code, using only a single keystroke. In many
    editors, the keystroke is <strong>Shift+/</strong>.
   </p>
  </div>
  <h2>Implementing <em>lastDigit</em></h2>
  <p>
   You should write your comments first, and then implement the function. The
   most straightforward solution just an <tt class="i">if</tt>
   statement to select one path path for positive numbers, and another for negative
   numbers.
  </p>
  <pre
   class="language-cpp"><code>if (n &lt; 0) &lbrace; result = -(n % 10); &rbrace;
else &lbrace; result = n % 10; &rbrace;</code></pre>
  <p>
   You could write a shorter version using the <mark>conditional operator</mark>
   like this, instead of an <tt class="i">if</tt>
   statement.
  </p>
  <pre
   class="language-cpp"><code>result = (n &lt; 0 ? -n : n) % 10;</code></pre>
  <p>
   For another short, one-line solution, which almost exactly matches the
   function plan, you can use the <tt>abs()</tt>
   function like this:
  </p>
  <pre class="language-cpp"><code>result = abs(n % 10);</code></pre>
  <p>
   However, a new C++ programmer might not realize that there are separate
   versions of the function in <tt>&lt;cmath&gt;</tt>
   (for floating-point numbers), and in <tt>&lt;cstdlib&gt;</tt>
   for (integers), and end up with an answer that was wrong, or code that does not
   compile.
  </p>
 </div>
</Layout>
