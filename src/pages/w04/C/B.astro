---
import Layout from "../../../layouts/Layout.astro";
import Header from "../../../components/Header.astro";
const { useLayout } = Astro.props;
---

<Layout
 title="Week 2"
 dir="w04/"
 displayLayout={useLayout}
 chapterSubSections={[]}
>
 <Header id="B">
  <h1>Overload Resolution</h1>
 </Header><div>
  <p class="firstLine">When you overload a function:</p>
  <ul>
   <li>
    The parameter <mark>number</mark> must differ, or
   </li>
   <li>
    The parameter <mark>types</mark> must differ, or
   </li>
   <li>
    The parameter type <mark>order</mark> must differ
   </li>
  </ul>
  <p>
   You <strong>cannot</strong> merely change the return type of a function. That
   is an error.
  </p>
  <p>
   To determine which function is called, your compiler follows a process called <mark
    >overload resolution</mark
   >. Resolving which version of the <tt>abs()</tt> function to call is easy, since
   it only takes one argument. Things are more complex when a function takes several
   arguments.
  </p>
  <p>Here are the rules:</p>
  <ol>
   <li>
    Functions <mark>with the same name</mark> are gathered into a
    <mark>candidate set</mark>.
   </li>
   <li>
    The candidate set is narrowed to produce the
    <mark>viable set</mark>: those functions that have
    <mark>the correct number of parameters</mark> and whose parameters
    <strong>could</strong> accept the supplied arguments using standard conversions.
   </li>
   <li>
    If there are any <mark>exact matches</mark> in the viable set, use that version.
   </li>
   <li>
    If there are no exact matches, find the <mark>best match</mark>
    involving conversions. The rules for this can be quite complex. You can find
    all of the details in the C++ Primer, Section 6.6.
   </li>
  </ol>
  <p>
   There are <strong>two possible errors</strong> that can occur
   <strong>at the end</strong> of the matching process:
  </p>
  <ul>
   <li>
    There are <mark>no members</mark> left in the viable set. This produces an <mark
     >undeclared name</mark
    > compiler error.
   </li>
   <li>
    The process <mark>can't pick a winner</mark> among several viable functions.
    This produces an <mark>ambiguity</mark> compiler error.
   </li>
  </ul>
  <p>
   When this occurs, <strong>the function definition</strong>
   <strong>is not in error</strong>, but <mark>the function call</mark>.
  </p>
 </div>
</Layout>
