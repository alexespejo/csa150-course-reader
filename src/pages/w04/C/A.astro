---
import Layout from "../../../layouts/Layout.astro";
import Header from "../../../components/Header.astro";
const { useLayout } = Astro.props;
---

<Layout
 title="Week 2"
 dir="w04/"
 displayLayout={useLayout}
 chapterSubSections={[]}
>
 <Header id="A">
  <h1>Overloaded Functions</h1>
 </Header><div>
  <p class="firstLine">
   Function <mark>overloading</mark> allows you to use the same name for different
   functions in the same program, provided each takes a different <strong
    >type or number</strong
   > of arguments. The pattern of arguments received by a function—which refers only
   to the number and types of the arguments and not the parameter names—is called
   its <mark>signature</mark>.
  </p>
  <p>
   Here's an example. Both the <tt>&lt;cmath&gt;</tt> header and <tt
    >&lt;cstdlib&gt;</tt
   > declare <tt>abs()</tt>
   functions for returning the absolute value of a number. Here are the three functions
   in <tt>&lt;cstdlib&gt;</tt>:
  </p>
  <pre
   class="language-cpp"><code>int abs(int n);
long abs(long n);
long long abs(long long n);</code></pre>
  <p>Here are the four versions of the function in <tt>&lt;cmath&gt;</tt>:</p>
  <pre
   class="language-cpp"><code>double abs(double x);
float abs(float x);
long double abs(long double x);
double abs(T x); // a template called when no other matches</code></pre>
  <p>
   There are even versions for <strong>complex numbers</strong>
   in the header <tt>&lt;complex&gt;</tt>. The only difference between these
   functions is the <strong>types of the parameters</strong>. The compiler
   chooses <strong>which version to call</strong> by looking at the types of the
   arguments supplied.
  </p>
  <ul>
   <li>
    Called with an <tt>int</tt>, the compiler <mark>calls</mark>
    the version which <mark>takes</mark> an <tt>int</tt>.
   </li>
   <li>
    Called with a <tt>double</tt>, the compiler will choose the version from <tt
     >&lt;cmath&gt;</tt
    >, which takes a
    <tt>double</tt>.
   </li>
  </ul>
  <div class="highlight alert alert-info">
   <p>
    If you call <tt>abs()</tt> with an integer, and
    <strong>only</strong> include <tt>&lt;cmath&gt;</tt>, but forget <tt
     >&lt;cstdlib&gt;</tt
    >, then a special
    <strong>generic version</strong> of <tt>abs()</tt> that takes a type <tt
     >T</tt
    > parameter will be called. The difference between the generic version, and the
    overloaded <tt>abs(int)</tt> version, is that the generic version <mark
     >always</mark
    > returns a <tt>double</tt>, not an <tt>int</tt>.
   </p>
  </div>
  <p>
   Overloading makes it easier for programmers to remember function names when
   the same operation is applied in slightly different contexts. C, which does
   not have overloading, requires different names for each different absolute
   value function: <tt
    >iabs<tt
     >, <tt>fabs</tt>, <tt>dabs</tt>,
     <tt>labs</tt>, <tt>llabs</tt>, and so on.
    </tt>
   </tt>
  </p>
 </div>
</Layout>
