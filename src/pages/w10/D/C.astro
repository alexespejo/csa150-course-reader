---
import Layout from "../../../layouts/Layout.astro";
import Header from "../../../components/Header.astro";
const { useLayout } = Astro.props;
---

<Layout
 title="Week 10"
 dir="w10/"
 displayLayout={useLayout}
 chapterSubSections={[]}
>
 <Header id="C">
  <h1>Array-based C-Strings</h1>
 </Header><div>
  <p class="firstLine">
   How you create a C-string determines
   <mark>where the characters are stored</mark> in memory. To copy characters <mark
    >into user memory</mark
   > where they can be modified, write this:
  </p>
  <pre class="language-cpp"><code>char s1[] = "String #1";</code></pre>
  <p>
   The C-string <tt>s1 contains</tt>
   <mark>exactly</mark>
   <tt>10</tt> characters; the <tt>9</tt> that appear in "<tt>String #1</tt>"
   and the terminating
   <tt>NUL</tt> character. Space for these characters is
   <mark>allocated on the stack or static storage area</mark>. The <strong
    >actual characters are copied</strong
   > into this "user space". This declaration is shorthand for:
  </p>
  <pre
   class="language-cpp"><code> char s1[] = &lbrace;'S','t','r','i','n','g',' ','#','1','\0'&rbrace;;</code></pre>
  <p>
   Because the characters have been copied into memory that you control, you can <strong
    >change them if you like</strong
   >
   using the normal array subscripting operations.
  </p>
  <pre
   class="language-cpp"><code>s1[0] = 'C';  // OK; all characters are read-write</code></pre>
  <pre
   class="language-cpp"><code>const size_t kLen = 1024;    // small strings
char s2[kLen] = "String #2";</code></pre>
  <p>
   The declaration for <tt>s2</tt> is slightly different. While the effective size
   of the string is also <tt>9</tt> characters, its <mark>allocated size</mark> is
   set by <tt>kLen</tt>
   or <tt>1024</tt> in this case. Use <tt>s2</tt> if you want to add information
   to the end of the string, similar to partially-filled arrays.
  </p>
 </div>
</Layout>
