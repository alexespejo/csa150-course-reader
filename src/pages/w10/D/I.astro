---
import Layout from "../../../layouts/Layout.astro";
import Header from "../../../components/Header.astro";
const { useLayout } = Astro.props;
---

<Layout
 title="Week 10"
 dir="w10/"
 displayLayout={useLayout}
 chapterSubSections={[]}
>
 <Header id="I">
  <h1>Comparing C-Strings</h1>
 </Header><div>
  <p class="firstLine">
   <mark>Do not</mark>
   use the relational operators (<tt>&lt;</tt>, <tt>==</tt>, etc.) to compare
   C-strings. Instead, use the library function
   <tt>strcmp()</tt>, which compares <tt>s1</tt> and <tt>s2</tt>
   <mark>lexicographically</mark> and returns an integer indicating their relationship:
  </p>
  <ul>
   <li>
    <strong>Zero</strong>
    if the two strings are equal.
   </li>
   <li>
    <strong>Negative</strong>
    if the first string lexicographically precedes the second string. (Lexicographically
    simply means "in dictionary order").
   </li>
   <li>
    <strong>Positive</strong>
    if the first string lexicographically follows the second string.
   </li>
  </ul>
  <p>
   To use <tt>strcmp()</tt> correctly:
  </p>
  <ul>
   <li>Call the function and save the int it returns.</li>
   <li>Use the returned value with a relational operator.</li>
   <li>
    <strong>Don't</strong>
    treat the return value from <tt>strcmp()</tt> as a Boolean expression.
   </li>
   <li>
    Don't repeatedly call <tt>strcmp()</tt> on the same strings (inefficient).
   </li>
  </ul>
  <p>
   Here's a quick example. The C-strings <tt>s1</tt>
   and <tt>s2</tt> are initialized elsewhere. Since we don't need to modify either
   argument, we can use "pointer-style" C-strings.
  </p>
  <pre
   class="language-cpp"><code>const char *s1 = ..., *s2 = ...;

int result = strcmp(s1, s2);

if (result == 0) ...            // equal
else if (result &lt; 0) ...        // s1 &lt; s2
else ...                        // s1 &gt; s2</code></pre>
 </div>
</Layout>
