---
import Layout from "../../../layouts/Layout.astro";
import Header from "../../../components/Header.astro";
const { useLayout } = Astro.props;
---

<Layout
 title="Week 10"
 dir="w10/"
 displayLayout={useLayout}
 chapterSubSections={[]}
>
 <Header id="E">
  <h1>Linear Search Efficiency</h1>
 </Header><div>
  <p class="firstLine">
   One thing that we can tell from this short experiment is that if a name is <mark
    >not in the directory</mark
   >, we'll have to look through all 1,000 names to find that out. As a result,
   (assuming that the time to compare each name is constant), the
   <mark>running time</mark> of linear search
   <mark>grows proportionally</mark>
   with the size of the directory we're searching. If we had a directory of 10,000
   names it would be roughly <strong>ten times slower</strong>than our version
   with 1,000 names.
  </p>
  <p>
   However, that is the <mark>worst case</mark>. Most of the time you will find
   the name you are looking for and won't need to compare all one thousand
   names.
  </p>
  <p>
   In the <b>best case</b>, the name you'll decide that you only need to look up <strong
    >Kimberly Thompson</strong
   >, the first name on the list, and your program will seem to run like
   lightning. <mark>On average</mark>, though, assuming the names are randomly
   distributed throughout the directory, you'll have to search through <strong
    >500</strong
   > names (or half of the total array) to find the one you want.
  </p>
  <p>
   In Computer Science we have a particular terminology for discussing the
   runtime efficiency of algorithms. We say that
   <strong>linear search</strong> is an <tt>O(n)</tt> algorithm, (which mean <strong
    >on the order of <tt>n</tt></strong
   >), because the time to find your element increases in a linear manner as the
   number of elements in the array (<tt>n</tt>) increases. This is known as <mark
    >Big-O notation</mark
   >.
  </p>
  <p>Even more specifically, we can say that our implementation:</p>
  <ul>
   <li>
    Has a <mark>worst case</mark> of <tt>O(n)</tt>. We will always have to
    search through the entire directory if a name is not found.
   </li>
   <li>
    Has a <mark>best case</mark> of <tt>O(1)</tt> meaning that if we always search
    for the first name on the list, we'll find it in <b>constant time</b>.
   </li>
   <li>
    Has an <mark>average case</mark> of <tt>(n/2)</tt>, meaning that on average,
    we'll find the name by searching half of the the array. Some will be more,
    some less, but it will average out.
   </li>
  </ul>
 </div>
</Layout>
