---
import Layout from "../../../layouts/Layout.astro";
import Header from "../../../components/Header.astro";
const { useLayout } = Astro.props;
---

<Layout
 title="Week 10"
 dir="w10/"
 displayLayout={useLayout}
 chapterSubSections={[]}
>
 <Header id="C">
  <h1>2D Array Initialization</h1>
 </Header><div>
  <p class="firstLine">
   The 2D array <tt>a2d</tt>
   could be declared <mark>and initialized</mark> like this:
  </p>
  <pre
   class="language-cpp"><code>int a2d[2][3] = &lbrace;
   &lbrace;5, 19, 3&rbrace;,
   &lbrace;22, -8, 10&rbrace;
&rbrace;;</code></pre>
  <p>
   Each row appears is in its own set of curly braces. Because, the array is
   actually laid out in a linear fashion, you may <mark
    >omit the inner braces</mark
   > all together, but that is not as clear:
  </p>
  <pre
   class="language-cpp"><code>int a2d[2][3] = &lbrace;5, 19, 3, 22, -8, 10&rbrace;;</code></pre>
  <p>
   The rules for partial initialization are similar to
   <b>1D</b> arrays: any uninitialized elements are <mark
    >value initialized to <tt>0</tt></mark
   >. With embedded braces, partial initialization is on a <mark
    >row-by-row</mark
   > basis; if you omit them, the rows are ignored. These examples use the <strong
    >same initial values</strong
   >, but produce quite different results.
  </p>
  <table class="array" style="float:right;">
   <thead>
    <th style="width:25px;">&nbsp;</th><th>0</th><th>1</th><th>2</th>
   </thead>
   <tbody>
    <tr>
     <th>0</th><td>5</td><td>0</td><td>0</td>
    </tr>
    <tr>
     <th>1</th><td>22</td><td>-8</td><td>0</td>
    </tr>
   </tbody>
   <tfoot> </tfoot>
  </table>
  <pre
   class="language-cpp"
   style="width:70%;"><code>int a2d[2][3] = &lbrace;
   &lbrace;5&rbrace;,
   &lbrace;22, -8&rbrace;
&rbrace;;</code></pre>
  <table class="array" style="float:right;">
   <thead>
    <th style="width:25px;">&nbsp;</th><th>0</th><th>1</th><th>2</th>
   </thead>
   <tbody>
    <tr>
     <th>0</th><td>5</td><td>22</td><td>-8</td>
    </tr>
    <tr>
     <th>1</th><td>0</td><td>0</td><td>0</td>
    </tr>
   </tbody>
   <tfoot> </tfoot>
  </table>

  <pre
   class="language-cpp"
   style="width:70%;"><code>int a2d[2][3] =&lbrace; 
    5, 22, -8
&rbrace;;</code></pre>
  <p>
   When initializing, you <mark>may omit the first explicit dimension</mark>,
   but the second dimension <tt>[3]</tt>
   <mark>is required</mark>. The compiler must <strong>know how big</strong> each
   element of <tt>a2d</tt> is.
  </p>
  <pre
   class="language-cpp"><code>int a2d[][3] = &lbrace;
    &lbrace;5, 19, 3&rbrace;, 
    &lbrace;22, -8, 10&rbrace;
&rbrace;;</code></pre>
 </div>
</Layout>
