---
import Layout from "../../../layouts/Layout.astro";
import Header from "../../../components/Header.astro";
const { useLayout } = Astro.props;
---

<Layout
 title="Week 10"
 dir="w10/"
 displayLayout={useLayout}
 chapterSubSections={[]}
>
 <Header id="B">
  <h1>Row Major Order</h1>
 </Header><div>
  <p class="firstLine">
   While conceptually the array <tt>a2d</tt>
   contains rows and columns, <strong>physically</strong> the elements are stored
   linearly, with the elements of each row following the elements of the preceding
   row in memory.
  </p><p>
   The array <tt>a2d</tt>
   <mark>actually</mark> contains
   <mark>two elements</mark> (not 6!). Each is a one-dimensional <tt>int</tt> array
   of size <tt>3</tt>. This is how the compiler sees the declaration:
  </p>
  <table class="array" align="center">
   <thead>
    <th>&nbsp;</th><th colspan="3" style="border:1px solid silver;">a2d[0]</th>
    <th colspan="3" style="border:1px solid silver;">a2dh[1]</th>
   </thead>
   <tbody>
    <tr>
     <th>a2d =</th><td class="w">5</td><td class="w">19</td><td class="w">3</td>
     <td class="w">22</td><td class="w">-8</td><td class="w">10</td>
    </tr>
   </tbody>
   <tfoot>
    <th>&nbsp;</th><th>[0][0]</th><th>[0][1]</th><th>[0][2]</th><th>[1][0]</th
    ><th>[1][1]</th><th>[1][2]</th>
   </tfoot>
  </table>
  <p>
   That means, instead of using a <b>2D</b> array, we
   <mark>could</mark> store the same elements in a <b>1D</b> array, here named <tt
    >a</tt
   >, like this:
  </p>
  <table class="array" align="center">
   <thead>
    <th>&nbsp;</th><th>[0]</th><th>[1]</th><th>[2]</th><th>[3]</th><th>[4]</th
    ><th>[5]</th>
   </thead>
   <tbody>
    <tr>
     <th>a =</th><td class="w">5</td><td class="w">19</td><td class="w">3</td>
     <td class="w">22</td><td class="w">-8</td><td class="w">10</td>
    </tr>
   </tbody>
   <tfoot> </tfoot>
  </table>
  <p>
   To treat this <b>1D</b> array as a <b>2D</b> array, (as you've done with all of
   your image projects in this class), you need to recall the formula for <mark
    >array access expressions</mark
   >:
  </p>
  <pre class="language-cpp"><code>a[offset] = *(a + offset)</code></pre>
  <p>
   You can convert this to where a <mark>2D array offset expression</mark>
   like this:
  </p>
  <pre
   class="language-cpp"><code>a[row, col] = *(a + (row * row - width + col))</code></pre>
  <p>
   Notice how <mark>similar</mark> this is to <b>1D</b> pointer-address arithmetic;
   the only new addition is the expression
   <tt>row</tt>
   <tt>*</tt>
   <tt>row-width</tt> to the calculation.
  </p>
 </div>
</Layout>
