---
import Layout from "../../../layouts/Layout.astro";
import Header from "../../../components/Header.astro";
import imageArrayExample from "../images/array-example.png";
const { useLayout } = Astro.props;
---

<Layout
 title="Week 10"
 dir="w10/"
 displayLayout={useLayout}
 chapterSubSections={[]}
>
 <Header id="A">
  <h1>An Array Example</h1>
 </Header><div>
  <p class="firstLine">
   Take a look at
   <a target="_blank" href="https://onlinegdb.com/klKuO8P2D">this example</a>.
   How many salaries
   <mark>do I need</mark>? Here I've <mark>planned</mark> on
   <tt>10</tt>, but if I <mark>need</mark> more, there is no
   <tt>push_back()</tt>, as there is with <tt>vector</tt>, which would allow
   expansion. This program is
   <strong>limited</strong> to a maximum of <tt>10</tt> salaries.
   <img
    src={imageArrayExample}
    class="inlineCenter"
    alt="A fragment of the sample problem."
   />
  </p>
  <p>The loop itself can end in one of three ways:</p>
  <ul>
   <li>
    The user can enter <tt>10</tt> salaries and, because the array is full, the loop
    will end.
    <strong>All</strong> of the elements in the array
    <strong>will be used</strong>.
   </li>
   <li>
    The user can enter a <tt>0</tt> as a salary (<mark>the sentinel</mark>), and
    the loop will terminate. Only <strong>some</strong>
    of the elements <strong>will be used</strong> in the array.
   </li>
   <li>
    The user can enter a non-numeric value such as the word
    <tt>"quit"</tt> and the <tt>cin</tt> object will enter the
    <strong>fail state</strong> when trying to read the next salary. The <tt
     class="i">if</tt
    > statement inside the loop checks for this and exits when this occurs.
   </li>
  </ul>
  <p>
   Once you exit the loop, you <mark>don't know which</mark>
   of these occurred. Even worse, you can't tell how many elements are actually valid,
   and which are unused. Let's fix that.
  </p>
 </div>
</Layout>
