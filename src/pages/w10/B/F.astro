---
import Layout from "../../../layouts/Layout.astro";
import Header from "../../../components/Header.astro";
const { useLayout } = Astro.props;
---

<Layout
 title="Week 10"
 dir="w10/"
 displayLayout={useLayout}
 chapterSubSections={[]}
>
 <Header id="F">
  <h1>Removing Elements</h1>
 </Header><div>
  <p class="firstLine">
   Removing elements from a partially-filled array uses a similar algorithm.
   Instead of moving a portion of the array to the right, to "open up a hole",
   you need to move all of the elements which are <strong>to the right</strong>
   of the deleted element leftwards to "close up the gap".
  </p>
  <p>
   Here's a small fragment of code that does that. The variable <tt>pos</tt> is the
   location of the element you want to delete:
  </p>
  <pre
   class="language-cpp"><code>--size;
for (size_t j = pos; j &lt; size; ++j) 
&lbrace; 
    a[j] = a[j + 1]; 
&rbrace;</code></pre>
  <p>
   Before the loop, you should decrement <tt>size</tt> so that when you grab <tt
    >a[j</tt
   >
   <tt>+</tt>
   <tt>1]</tt>, it is a valid element when the array is already full.
  </p>
  <iframe
   width="800"
   height="500"
   frameborder="0"
   src="https://pythontutor.com/iframe-embed.html#code=int%20main%28%29%20%7B%0A%20%20int%20a%5B10%5D%20%3D%20%7B1,%202,%203,%204,%205%7D%3B%0A%20%20int%20size%20%3D%205%3B%0A%20%20%0A%20%20//%20remove%203%20%28at%20position%202%29%0A%20%20int%20pos%20%3D%202%3B%0A%20%20--size%3B%0A%20%20for%20%28int%20j%20%3D%20pos%3B%20j%20%3C%20size%3B%20%2B%2Bj%29%0A%20%20%20%20a%5Bj%5D%20%3D%20a%5Bj%20%2B%201%5D%3B%0A%0A%20%20return%200%3B%0A%7D&codeDivHeight=400&codeDivWidth=350&cumulative=false&curInstr=0&heapPrimitives=nevernest&origin=opt-frontend.js&py=cpp_g%2B%2B9.3.0&rawInputLstJSON=%5B%5D&textReferences=false"
  >
  </iframe>
 </div>
</Layout>
