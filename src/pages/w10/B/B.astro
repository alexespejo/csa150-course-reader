---
import Layout from "../../../layouts/Layout.astro";
import Header from "../../../components/Header.astro";
import imagePartiallyFilled from "../images/partially-filled-1.png";
const { useLayout } = Astro.props;
---

<Layout
 title="Week 10"
 dir="w10/"
 displayLayout={useLayout}
 chapterSubSections={[]}
>
 <Header id="B">
  <h1>Appending Elements</h1>
 </Header><div>
  <p class="firstLine">
   When you don't know how large an array should be when you write the code,
   then you should <mark>plan for the "worst case"</mark>, and declare an array
   that you know is larger than you could
   <strong>ever possibly need</strong>. Then, only use part of it.
  </p>
  <p>
   Go ahead and modify the example on the previous page. We want to <mark
    >allow the user to input any number of values</mark
   >, (or at least a very large number), instead of automatically filling the
   array with <tt>10</tt> values.
  </p>
  <ol>
   <li>
    Define a constant that indicates <mark>the maximum number of elements</mark>
    used, (like <tt>100</tt>), and use that constant in the declaration of the
    array.
   </li>
   <li>
    Create a <strong>separate variable</strong> to track the <mark
     >effective size</mark
    > of the array. The names
    <tt>size</tt> and <tt>capacity</tt> are typically used for these variables.
    <img
     src={imagePartiallyFilled}
     class="inlineCenter"
     alt="An illustration of a partially-filled array."
    />
   </li>
   <li>
    Write an input loop using while that checks the
    <strong>necessary bounds</strong> condition,
    <tt>while(size</tt>
    <tt>&lt;</tt>
    <tt>capacity)..</tt>. This ensures that the loop <strong>never</strong> overfills
    the array.
   </li>
   <li>
    Use the <mark>loop-and-a-half idiom</mark> to leave the loop whenever the <strong
     >sentinel</strong
    > value (<tt>0</tt>) is entered, or, when <tt>cin</tt>
    <strong>enters the failed state</strong> from invalid input.
   </li>
   <li>
    Store the value into the array, and update the <tt>size</tt>
    variable so that the next number entered will be placed
    <mark>in the next element</mark> of the array.
   </li>
  </ol>
 </div>
</Layout>
