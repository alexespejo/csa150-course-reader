---
import Layout from "../../../layouts/Layout.astro";
import Header from "../../../components/Header.astro";
const { useLayout } = Astro.props;
---

<Layout
 title="Week 10"
 dir="w10/"
 displayLayout={useLayout}
 chapterSubSections={[]}
>
 <Header id="C">
  <h1>The strcmp Function</h1>
 </Header><div>
  <p class="firstLine">
   Like <tt>strcpy()</tt>, most implementations of
   <tt>strcmp()</tt> are cryptic. Here's the version from GNU C:
  </p>
  <pre
   class="language-cpp"><code>int strcmp(const char *s1, const char *s2)
&lbrace;
    const unsigned char *a1, *a2;
    for (a1 = reinterpret_cast&lt;const unsigned char *&gt;(s1),
         a2 = reinterpret_cast&lt;const unsigned char *&gt;(s2);
         *a1 == *a2; a1++, a2++)
        if (*a1 == '\0') return 0;
    return *a1 - *a2;
&rbrace;</code></pre>
  <p>
   The GNU version of <tt>strcmp()</tt> returns
   <mark>the difference</mark> between the first two mismatched characters. <tt
    >a1</tt
   > and <tt>a2</tt> are temporary pointers to <tt>unsigned</tt>
   <tt>char</tt>, so the characters can be interpreted as raw values between
   <tt>0-255</tt>. The pointers are initializaed by using a
   <tt>reinterpret_cast</tt>.
  </p>
  <p>
   Here is an alternate (Apple/Next/PPC) version of the same function, which
   returns <tt>0</tt>, <tt>+1</tt> and <tt>-1</tt> instead of the difference between
   the characters. This version, written in 1992, uses traditional C-style casts
   to handle the
   <tt>signed</tt>/<tt>unsigned</tt> instead of a C++ <tt>reinterpret_cast</tt>.
  </p>
  <pre
   class="language-cpp"><code>int strcmp(const char *s1, const char *s2)
&lbrace;
    for ( ; *s1 == *s2; s1++, s2++)
        if (*s1 = '\0') return 0;   // reached both NULs. Equal
    return ((*(unsigned char *)s1
            &lt; *(unsigned char *)s2) ? -1 : +1);
&rbrace;</code></pre>
 </div>
</Layout>
