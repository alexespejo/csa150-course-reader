---
import Layout from "../../../layouts/Layout.astro";
import Header from "../../../components/Header.astro";
const { useLayout } = Astro.props;
---

<Layout
 title="Week 10"
 dir="w10/"
 displayLayout={useLayout}
 chapterSubSections={[]}
>
 <Header id="E">
  <h1>Find First</h1>
 </Header><div>
  <p class="firstLine">
   To find the first occurrence of a particular character in a string, you'd
   employ the <mark>linear search</mark>
   algorithm:
  </p>
  <pre
   class="pcode">Loop through a string until the NUL character
	If current character is the target
		Return its index
Return the error code</pre>
  <p>
   Assuming that we use <tt>-1</tt> for the error code then an <mark
    >array-notation</mark
   > implementation of the function could look like this:
  </p>
  <pre
   class="language-cpp"><code>int find(const char a[], char target)
&lbrace;
    for (int i = 0; a[i] != '\0'; ++i)
        if (a[i] == target)
            return i;
    return -1;
&rbrace;</code></pre>

  <p>
   A (more cryptic) <mark>pointer-notation</mark> implementation might look like
   this:
  </p>
  <pre
   class="language-cpp"><code>int find(const char* s, char target)
&lbrace;
    auto *p = s;
    while (*p &amp;&amp; *p != target) p++;
    if (*p) return p - s;
    return -1;
&rbrace;</code></pre>
  <p>
   The <strong>temporary pointer</strong>
   <tt>p</tt> is moved through the C-string <tt>s</tt>. The expression <tt
    >*p</tt
   > is false when the <tt>NUL</tt>
   is encountered. Since the loop
   <strong>must end</strong>
   when you encounter the <tt>NUL</tt>, or, when you find the
   <tt>target</tt>, you know that the loop <strong
    >terminates in every case</strong
   >.
  </p>
  <p>
   After the loop is over, there are
   <strong>two</strong> possibilities. If <tt>p</tt>
   is pointing at <strong>any</strong> character, it
   <mark>must</mark> be the <tt>target</tt> character. That means you can use <strong
    >pointer difference</strong
   >
   to return the index. Otherwise, <tt>p</tt>
   <strong>must</strong> be pointing at the
   <tt>NUL</tt> character and you can return <tt>-1</tt>.
  </p>
 </div>
</Layout>
