---
import Layout from "../../../layouts/Layout.astro";
import Header from "../../../components/Header.astro";
const { useLayout } = Astro.props;
---

<Layout
 title="Week 5"
 dir="w05/"
 displayLayout={useLayout}
 chapterSubSections={[]}
>
 <Header id="D">
  <h1>Output Redirection</h1>
 </Header><div>
  <p class="firstLine">
   All standard output streams are connected to the console; any output appears
   on your screen. You can <mark>redirect standard output</mark> by using the <mark
    ><tt>&gt;</tt></mark
   > symbol when you run:
  </p>
  <div class="consoleDisplay width-90">
   $ <tt class="t"> cat &lt; input.txt &gt; output.txt</tt>
  </div>
  <p>
   This time, no output will appear on your screen; instead, the file
   <tt>output.txt</tt> will be created and all the output, which would have been
   sent to the screen, will instead be written to the file.
   <mark>This can be a little dangerous</mark>, because if there is
   <strong>already</strong> an <tt>output.txt</tt>, it will be
   <strong>overwritten</strong> with the new data.
  </p>
  <p>
   Ater you've typed the previous line, you can examine the new contents of <tt
    >output.txt</tt
   > by using <tt>cat</tt> again, like this:
  </p>
  <div class="consoleDisplay width-90">
   $ <tt class="t">cat &lt; input.txt</tt><br />
   <tt class="b"
    >This is text stored in "input.txt".<br />
    A second line in input.txt<br /></tt
   >
   $
  </div>
  <p>
   Instead of erasing the existing data in the output file, you can <mark
    >append</mark
   > to it by using the <mark><tt>&gt;&gt;</tt></mark>
   symbols like this:
  </p>
  <div class="consoleDisplay width-90">
   $ <tt class="t"> cat &lt; input.txt <mark>&gt;&gt;</mark> output.txt</tt>
  </div>
  <p>Try it and see what <tt>output.txt</tt> contains now.</p>
 </div>
</Layout>
