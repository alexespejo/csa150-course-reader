---
import Layout from "../../../layouts/Layout.astro";
import Header from "../../../components/Header.astro";
import imagePalindrome from "../images/palindrome.jpg";
const { useLayout } = Astro.props;
---

<Layout
 title="Week 5"
 dir="w05/"
 displayLayout={useLayout}
 chapterSubSections={[]}
>
 <Header id="C">
  <h1>Checking Palindromes</h1>
 </Header><div>
  <p class="firstLine">
   A <mark>palindrome</mark> is a string that reads identically backward and forward,
   such as "level" or "noon". Although it is easy to check whether a string is a
   palindrome by <strong>iterating</strong> through its characters, palindromes can
   also be defined recursively.
   <img
    src={imagePalindrome}
    class="inlineCenter"
    alt="Cartoon about palindromes."
   />
  </p>
  <p>
   Any palindrome longer than a single character must contain a shorter
   palindrome in its interior. For example, the string "level" consists of the
   palindrome "eve" with an "l" at each end. Thus, to check whether a string is
   a palindrome—assuming the string is sufficiently long that it does not
   constitute a simple case—all you need to do is
  </p>
  <ol>
   <li>Check to see that the first and last characters are the same.</li>
   <li>
    Check to see whether the substring generated by removing the first and last
    characters is itself a palindrome.
   </li>
  </ol>
  <p>
   If both apply, then the string is a palindrome. So, <strong
    >what are the simple or base-cases?</strong
   > A single-character string is a palindrome because reversing a one-character
   string has no effect. The one-character string therefore represents a simple case,
   <mark>but it is not the only one</mark>. The empty string—which contains no
   characters at all—is also a palindrome.
  </p>
  <p>
   Here is a recursive function which returns true when given a palindrome.
  </p>
  <pre
   class="language-cpp"><code>bool isPalindrome(const string&amp; str)
&lbrace;
    if (str.size() &lt; 2) &lbrace; return true; &rbrace;     // base case
    return str.front() == str.back() &amp;&amp; 
        isPalindrome(str.substr(1, str.size() - 2));
&rbrace;</code></pre>
  <p>
   If the length of the string is less than 2, it is a palindrome. If not, the
   function first checks to see that the first and last characters are the same,
   and, if they are, it calls itself again with a shorter substring, removing
   the first and last characters from <tt>str</tt>.
  </p>
 </div>
</Layout>
