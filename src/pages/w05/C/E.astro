---
import Layout from "../../../layouts/Layout.astro";
import Header from "../../../components/Header.astro";
const { useLayout } = Astro.props;
---

<Layout
 title="Week 5"
 dir="w05/"
 displayLayout={useLayout}
 chapterSubSections={[]}
>
 <Header id="E">
  <h1>Solving the Problem II</h1>
 </Header><div>
  <p class="firstLine">
   Let's continue with the remaining steps in the checklist.
  </p>
  <h3 class="i">
   <input type="checkbox" />
   Have You Covered All Possibilities?
  </h3>
  <p>
   We have (<b>at least</b>) two characters, (because otherwise, we would have
   gone into the base case). In any event, we only need to think about the first
   two characters.
  </p>
  <ul>
   <li>
    They <mark>may</mark> both match <tt>c</tt>. If that is the case, then we
    need to <strong>ignore</strong> the first character, and pass only a shortened
    string to the function.
   </li>
   <li>
    They <mark>may not</mark> both match <tt>c</tt>. If so, them we must <strong
     >include</strong
    > the first character in the returned string before passing a shortened string
    to our function.
   </li>
  </ul>
  <p>This should <strong> cover all possibilities.</strong></p>
  <h3 class="i">
   <input type="checkbox" />
   Are the Subproblems Identical in Form?
  </h3>
  <p>
   Depending on whether both characters match <tt>c</tt> or not, we do a different
   action in each case; in one we include the first character, and in other we do
   not, but the
   <strong>form</strong> of the problem <strong
    >is the same in both cases.</strong
   >
  </p>
  <h3 class="i">
   <input type="checkbox" />
   Are You a Believer?
  </h3>
  <p>
   Walk through a solution using the simplest recursive cases. If it works for
   those, then <strong>it must work for all of them</strong>.
  </p>
  <ol>
   <li>Call <tt>collapseSequences("vv", 'v')</tt></li>
   <ul>
    <li>
     Both characters match <tt>c</tt>, so the first <tt>v</tt>
     is <strong>ignored</strong> and the function is <strong
      >called again</strong
     > with the string <tt>"v"</tt>.
    </li>
    <li>On the second recursive call, the base case returns <tt>"v"</tt></li>
    <li>
     Thus, the sequence <tt>"vv"</tt> is compressed to <tt>"v"</tt>,
     <mark>so it works</mark>.
    </li>
   </ul>
   <li>Now call <tt>collapseSequences("va", 'v')</tt></li>
   <ul>
    <li>
     The two characters <strong>do not match</strong>, so the first <tt>'v'</tt>
     is returned along with the value returned on the recursive call.
    </li>
    <li>The second recursive call returns <tt>"a"</tt> from the base case.</li>
    <li>
     Thus, the sequence <tt>"va"</tt>
     <strong>is not compressed</strong> (even though one of the characters matched
     the character <tt>c</tt>).
     <mark>So, it works.</mark>
    </li>
   </ul>
  </ol>
  <p>
   Implement the algorithm described here and you'll see that all of the tests
   should pass. Now you can try a few problems on your own.
  </p>
 </div>
</Layout>
