---
import Layout from "../../../layouts/Layout.astro";
import Header from "../../../components/Header.astro";
import imageChecklist from "../images/checklist.png";
const { useLayout } = Astro.props;
---

<Layout
 title="Week 5"
 dir="w05/"
 displayLayout={useLayout}
 chapterSubSections={[]}
>
 <Header id="A">
  <h1>A Recursion Checklist I</h1>
 </Header><div>
  <img
   src={imageChecklist}
   class="right round shadow width-25"
   alt="A decorative image of a checklist."
  />
  <p class="firstLine">
   Now that you’ve seen several examples of recursion, let’s apply recursion to
   a few problems, similar to those on a programming exam. To help you, here is
   a <mark>checklist</mark> that will help you identify the most common sources of
   errors<strong>.</strong>
  </p>
  <h3 class="i">
   <input type="checkbox" />
   Check the Simple (Base) Cases
  </h3>
  <p>
   Does your recursive implementation begin by checking for simple base-cases?
   First check to see if the problem is so simple that no recursion is
   necessary. Recursive functions always start with the keyword
   <tt class="i">if</tt>; if yours doesn’t, look carefully.
  </p>
  <h3 class="i">
   <input type="checkbox" />
   Have You Solved the Base Cases Correctly?
  </h3>
  <p>
   A surprising number of bugs in arise from
   <strong>incorrect solutions to the simple base-cases</strong>. If the simple
   cases are wrong, the rest of the function will inherit the same mistake. If
   you had defined <tt>factorial(0)</tt> as returning
   <tt>0</tt> instead of <tt>1</tt>, <strong>any</strong>
   argument would end up returning <tt>0</tt>.
  </p>
  <h3 class="i">
   <input type="checkbox" />
   Does Decomposition Make it Simpler?
  </h3>
  <p>
   Does your recursive decomposition <strong>make the problem simpler</strong>?
   Problems must get simpler as you go along; the problem
   <strong>must get smaller</strong> as it proceeds. If the problem does not get
   simpler, you have the recursive analogue of the infinite loop, which is called
   <mark>nonterminating or infinite recursion</mark>.
  </p>
 </div>
</Layout>
