---
import Layout from "../../../layouts/Layout.astro";
import Header from "../../../components/Header.astro";
import imageChecklist from "../images/checklist.jpg";
const { useLayout } = Astro.props;
---

<Layout
 title="Week 5"
 dir="w05/"
 displayLayout={useLayout}
 chapterSubSections={[]}
>
 <Header id="B">
  <h1>A Recursion Checklist II</h1>
 </Header>
 <div>
  <img
   src={imageChecklist}
   class="right width-128"
   alt="A decorative image of a checklist."
  />
  <p class="firstLine">Here's the rest of the recursion checklist.</p>
  <h3 class="i">
   <input type="checkbox" />
   Have You Covered All Possibilities?
  </h3>
  <p>
   Does the simplification process always reach the base case, or
   <strong>have you left out some of the possibilities</strong>? A common error
   is forgetting one of the base-cases. You need to check the empty string in
   the <tt>isPalindrome()</tt> function, as well as the single-character string.
   Since the function reduces the size of the string by two each time, only having
   the one-character base case, would mean some strings would fail.
  </p>
  <h3 class="i">
   <input type="checkbox" />
   Are Sub-problems Identical in Form?
  </h3>
  <p>
   Are the recursive sub-problems <strong
    >truly identical in form to the original?</strong
   > It is essential that the sub-problems be of the same form. If the recursive
   calls change the nature of the problem then the entire process can break down.
  </p>
  <h3 class="i">
   <input type="checkbox" />
   Are You a Believer?
  </h3>
  <p>
   When you apply the recursive leap of faith, do the solutions to the recursive
   sub-problems <strong
    >provide a complete solution to the original problem</strong
   >? Work through all the steps in the current function call, but assume that
   every recursive call returns the correct answer. If this process yields the
   right solution, your program should work.
  </p>
 </div>
</Layout>
