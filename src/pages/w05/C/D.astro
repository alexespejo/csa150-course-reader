---
import Layout from "../../../layouts/Layout.astro";
import Header from "../../../components/Header.astro";
const { useLayout } = Astro.props;
---

<Layout
 title="Week 5"
 dir="w05/"
 displayLayout={useLayout}
 chapterSubSections={[]}
>
 <Header id="D">
  <h1>Solving the Problem I</h1>
 </Header><div>
  <p class="firstLine">
   Let's walk through the steps listed in the checklist. Normally, of course,
   you'll compress these steps together in an intuitive way. However, if you
   have difficulty with solving a recursive problem, going back and checking
   them individually is a good debugging tool.
  </p>
  <h3 class="i">
   <input type="checkbox" />
   Check the Simple (Base) Cases
  </h3>

  <p>
   <strong>What is the simplest base case?</strong> In other words, what values for
   <tt>s</tt> require <strong>no compression</strong>? Well, obviously, if we
   don’t have any characters, there can be no compression. Similarly, if we have
   only a single character, there can be no compression. The
   <strong>simplest thing that can work, without recursion</strong> is:
  </p>
  <pre
   class="language-cpp"><code>string collapseSequences(const string&amp; s, char c)
&lbrace;
    if (size() &lt; 2) return s;  // base case
&rbrace;</code></pre>
  <h3 class="i">
   <input type="checkbox" />
   Have You Solved the Base Cases Correctly?
  </h3>
  <p>
   <strong>Have we handled all of the base cases?</strong> The empty string returns
   <tt>""</tt>, and a single character returns that character. It doesn’t matter
   if the character matches the parameter <tt>c</tt>, since a single-character
   cannot be a sequence. Those should be all of the base cases. If we have two
   charcters, we may have a sequence <tt>"cc"</tt> that requires compression.
  </p>
  <h3 class="i">
   <input type="checkbox" />
   Does Decomposition Make it Simpler?
  </h3>
  <p>
   <strong>Does decomposition make it simpler?</strong> Or, in other words, how can
   we solve a simpler version of the problem? Or, how can we approach the base case?
   How? By <mark>passing a smaller</mark> string each time we call the function recursively.
  </p>
 </div>
</Layout>
