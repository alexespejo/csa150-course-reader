---
import Layout from "../../../layouts/Layout.astro";
import Header from "../../../components/Header.astro";
const { useLayout } = Astro.props;
---

<Layout
 title="Week 5"
 dir="w05/"
 displayLayout={useLayout}
 chapterSubSections={[]}
>
 <Header id="E">
  <h1>More on Streams</h1>
 </Header><div>
  <p class="firstLine">
   When <strong>writing a function</strong> which processes an input or output, the
   stream parameters must always be
   <mark>passed by reference</mark>.
  </p>
  <p>Here, for example, is a function that copies input to output.</p>
  <pre
   class="language-cpp"><code>void streamCopy(istream&amp; in, ostream&amp; out)
&lbrace;
    char ch;
    while (in.get(ch)) &lbrace; out.put(ch) &rbrace;; 
&rbrace;</code></pre>

  <p>
   We could rewrite <i><b>filter</b></i> by
   <mark>calling this function</mark>, like this:
  </p>
  <pre
   class="language-cpp"><code>int main()
&lbrace;
    streamCopy(cin, cout);
&rbrace;</code></pre>
  <h2>Other I/O Functions</h2>
  <p>
   When reading individual characters, you'll sometimes find that you have <strong
    >read more than you need</strong
   >. There are several ways to solve this problem in C++.
  </p>
  <ol>
   <li>
    <tt class="y">in.unget()</tt> returns the last read character <b
     >to the input stream</b
    >.
   </li>
   <li>
    <tt class="y">in.putback(ch)</tt> allows you to put back a
    <mark>different character</mark>.
   </li>
   <li>
    <tt class="y">in.peek()</tt> looks at the next character in the stream, but doesn't
    remove it from the stream.
   </li>
  </ol>
  <p>
   The C++ library guarantees that it you can push back push one character. You
   are not able to read several characters ahead and then push them all back.
   Fortunately, being able to push back one character is sufficient in the vast
   majority of cases.
  </p>
 </div>
</Layout>
