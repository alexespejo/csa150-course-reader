---
import Layout from "../../../layouts/Layout.astro";
import Header from "../../../components/Header.astro";
import imageRunningMan from "../images/running-man.png";
const { useLayout } = Astro.props;
---

<Layout
 title="Week 5"
 dir="w05/"
 displayLayout={useLayout}
 chapterSubSections={[]}
>
 <Header id="C">
  <h1>Your First Filter</h1>
 </Header><div>
  <a href="https://replit.com/@stephengilbert/Filters?v=1" target="_blank">
   <img
    src={imageRunningMan}
    class="right dark:bg-white"
    alt="Decorative running-man icon."
   /></a
  >

  <p class="firstLine">
   Now, let's look at <strong>writing our own filters</strong>. We'll continue
   working with the <b>Replit</b> project we used when learning about redirection.
   You can open it from your Repit account, or click the "running man", and re-fork
   it.
  </p>
  <p>
   The program <tt class="t">filter.cpp</tt> is the simplest possible version of
   the built-in filter <tt>cat</tt>. Remember that the <tt>cat</tt>
   command reads a character from <mark>standard input</mark>
   and sends it on to <mark>standard output</mark>, stopping only when there is
   no more input to be processed.
  </p>
  <p>There are three ways to process input:</p>
  <ul>
   <li>
    Raw, or <mark>unformatted input</mark> (a byte or character at a time)
   </li>
   <li>
    <mark>Line-oriented</mark>
    input (one line at a time)
   </li>
   <li>
    <mark>Formatted</mark>
    or token-based input (a "word" at a time)
   </li>
  </ul>
  <p>
   The program <tt class="i">filter.cpp</tt> uses
   <mark>raw, unformatted input</mark>. Build and run the program in <b
    >Replit</b
   > like this. First, open the <b>Shell</b> tab and then type:
  </p>
  <ol>
   <li>
    <tt class="y">make filter</tt>. If you have only a single file, you can
    build it by giving make the name of the output file. The
    <b>make</b> program finds <tt class="i">filter.cpp</tt> file and then compiles
    and links it.
   </li>
   <li>
    <tt class="y">./filter &lt; input.txt</tt> to run the program. This should produce
    <mark>exactly the same output</mark> as using <tt>cat</tt>.
   </li>
  </ol>
  <p>
   Note, in Unix, to run a program located in
   <strong>the current working directory</strong>, first type the directory
   <tt class="y">./</tt>
   and then the name of the program. You can repeat any of the previous exercises
   replacing <tt>cat</tt> with <tt>./filter</tt>, and the results should be the
   same.
  </p>
 </div>
</Layout>
