---
import Layout from "../../../layouts/Layout.astro";
import Header from "../../../components/Header.astro";
import imageFibDayPoster from "../images/fib-day-poster.jpg";
import imageFibRec from "../images/fibonacci-recurence-relation.png";
import imageFibFormula from "../images/fibonacci-formula.png";
const { useLayout } = Astro.props;
---

<Layout
 title="Week 5"
 dir="w05/"
 displayLayout={useLayout}
 chapterSubSections={[]}
>
 <Header id="E">
  <h1>The Fibonacci Sequence</h1>
 </Header><div>
  <img
   src={imageFibDayPoster}
   class="right width-25 round shadow"
   alt="Poster for Fibonacci Day, November 23."
  />
  <p class="firstLine">
   In 1202, the Italian mathematician
   <a target="_blank" href="https://en.wikipedia.org/wiki/Fibonacci"
    >Leonardo Fibonacci</a
   > experimented with how a population of rabbits would grow from generation to
   generation,
   <mark>give a set of rules</mark>. His rules lead to a
   <strong>sequence of terms</strong>, which today are called the
   <mark>Fibonacci sequence</mark>: each term is the sum of the two numbers
   preceding it.
  </p>
  <p>
   Expressed as a recurrence relation:
   <img
    src={imageFibRec}
    class="width-25"
    style="vertical-align: middle;"
    alt="The Fibonacci recurrence relationship."
   />
  </p>
  <p>
   This alone is not sufficient, however; you can define new terms, but <strong
    >the process has to start somewhere!</strong
   >
   You need <strong>at least two terms already available</strong>, which means
   that the first two terms in the sequence—<strong>
    <em>t<sub>0</sub></em></strong
   > and
   <strong><em>t<sub>1</sub></em></strong>—must be defined explicitly.
  </p>
  <img
   src={imageFibFormula}
   class="right width-50"
   style="margin-top:-1em;"
   alt="The Fibonacci formula."
  />
  <p>Given this qualification, the Fibonacci sequence can be expressed as:</p>
  <br />
  <p>
   To write a recursive implementation of a <em>fibonacci(n)</em> function, you need
   only plug in the simple cases, plus the recurrence relation, and you're done.
  </p>
  <pre
   class="language-cpp"><code>int fib(int n)
&lbrace;
    if (n &lt; 2) &lbrace; reture n; &rbrace;     // base case
    return fib(n - 1) + fib(n - 2);
&rbrace;</code></pre>
  <p>
   How do you convince yourself that the <tt>fib()</tt>
   function works? If you begin by tracing through the logic, I guarantee that you'll
   be confused. Instead,
   <mark>regard this entire mechanism as irrelevant detail</mark>.
  </p>
  <p>
   Since the argument values are smaller,
   <strong> each of these calls represents a simpler case</strong>, and so,
   applying the recursive leap of faith, <strong>
    you can assume that the program correctly computes each of these values</strong
   >.
   <mark>Case closed.</mark> You don’t need the details.
  </p>
 </div>
</Layout>
