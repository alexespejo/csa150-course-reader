---
import Layout from "../../../layouts/Layout.astro";
import Header from "../../../components/Header.astro";
const { useLayout } = Astro.props;
---

<Layout
 title="Week 8"
 dir="w08/"
 displayLayout={useLayout}
 chapterSubSections={[]}
>
 <Header id="A">
  <h1>Growing &amp; Shrinking</h1>
 </Header>
 <div>
  <p class="firstLine">
   Unlike the built-in array type, the size of a
   <tt>vector</tt> is <mark>not fixed</mark>; it can grow or shrink at runtime.
   The <tt>push_back()</tt> member function appends a new element
   <mark>to the end</mark> of the <tt>vector</tt>. If the <tt>vector</tt> is full,
   <strong>it is expanded</strong>. Here's an example:
  </p>
  <pre
   class="language-cpp"><code>vector&lt;int&gt; v;      // size is 0
v.push_back(1);     // size is now 1
v.push_back(2);     // size is now 2
v.push_back(5);     // size is now 3</code></pre>
  <div>
   <p>
    If <tt>v</tt> is an empty <tt>vector&lt;int&gt;</tt>, executing the code
    above adds these three elements to the end of
    <tt>v</tt>. Afterwards, <tt>v</tt>
    looks like the illustration here.
   </p>
  </div>
  <div>
   <table align="center" class="array">
    <tr>
     <th>0</th><th>1</th><th>2</th>
    </tr>
    <tr>
     <td>1</td><td>2</td><td>5</td>
    </tr>
   </table>
  </div>
  <div>
   <p>
    You can add additional elements at any time. Later, for example, you could
    call <code class="language-cpp">v.push_back(4);</code>
    which would add the value <tt>4</tt> to the end of the
    <tt>vector</tt>, like this.
   </p>
  </div>
  <div>
   <table align="center" class="array">
    <tr>
     <th>0</th><th>1</th><th>2</th><th>3</th>
    </tr>
    <tr>
     <td>1</td><td>2</td><td>5</td><td>4</td>
    </tr>
   </table>
  </div>
  <div>
   <p>
    The <tt>pop_back()</tt> member function removes the element at
    <mark>the end</mark>
    of the <tt>vector</tt> and
    <mark>decreases</mark>
    its size. If the <tt>vector</tt> is empty, calling <tt>pop_back()</tt>
    is undefined behavior.After calling <code class="language-cpp"
     >v.pop_back()</code
    > on the <tt>vector</tt>, its contents and size are back where it started.
   </p>
  </div>
  <div>
   <table align="center" class="array">
    <tr>
     <th>0</th><th>1</th><th>2</th>
    </tr>
    <tr>
     <td>1</td><td>2</td><td>5</td>
    </tr>
   </table>
  </div>
 </div>
</Layout>
