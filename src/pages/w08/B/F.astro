---
import Layout from "../../../layouts/Layout.astro";
import Header from "../../../components/Header.astro";
const { useLayout } = Astro.props;
---

<Layout
 title="Week 8"
 dir="w08/"
 displayLayout={useLayout}
 chapterSubSections={[]}
>
 <Header id="F">
  <h1>Extreme Values</h1>
 </Header><div>
  <p class="firstLine">
   An <mark>extreme value</mark> is the
   <strong>largest</strong> or <strong>smallest</strong> in a sequence of values.
   Here's the algorithm for largest. The algorithm for smallest is similar:
  </p>
  <pre
   class="pcode">largest &lt;- first item
examine each item in the collection
    if the current item is larger than largest then
        largest &lt;- current item</pre>
  <p>
   Here's an application of this algorithm which finds the highest temperature
   in the readings you saw before:
  </p>
  <pre
   class="language-cpp"><code>auto largest = temperatures.front();
for (auto current : temperatures)
&lbrace;
    if (current &gt; largest) 
    &lbrace; 
        largest = current; 
    &rbrace;
&rbrace;</code></pre>
  <p>
   This will <mark>fail</mark> if there are no items in
   <tt>temperatures</tt>; you should <strong>guard the loop</strong> with an
   <tt class="i">if</tt>. Also, using the range-<tt class="i">for</tt>
   loop is slightly less efficient than it could be, since it examines the first
   element twice. Using a traditional counter-controlled <tt class="i">for</tt> loop
   is only slightly more efficient.
  </p>
  <p>
   If you are finding the <mark>largest for a condition</mark>, then the element
   found at the <tt>front()</tt> will not necessarily be the largest. Instead, set
   <tt>largest</tt> to <mark>a very small value</mark>
   and check both your condition and for <tt>largest</tt>
   in the <tt class="i">if</tt> statement.
  </p>
 </div>
</Layout>
