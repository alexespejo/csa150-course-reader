---
import Layout from "../../../layouts/Layout.astro";
import Header from "../../../components/Header.astro";
import imageLotto from "../images/lotto.png";
const { useLayout } = Astro.props;
---

<Layout
 title="Week 8"
 dir="w08/"
 displayLayout={useLayout}
 chapterSubSections={[]}
>
 <Header id="G">
  <h1>Modifying Algorithms</h1>
 </Header><div>
  <p class="firstLine">
   When the <tt>vector</tt> elements may be modified, or where the positions of the
   elements is important, the counter-controlled <tt class="i">for</tt> loop is the
   loop of choice, because the <tt>size()</tt> member function creates a natural
   bounds, and because the loop index can do double-duty as the subscript to access
   the <tt>vector</tt> elements.
  </p>
  <p>
   The elements in a <tt>vector</tt>often need to be rearranged for a variety of
   reasons. You may want to <strong>sort</strong>
   the names in a list, <strong>update</strong> the prices in a price list, randomly
   <strong>shuffle</strong> the cards in a deck, or
   <strong>reverse</strong> the characters in a string.
  </p>
  <img src={imageLotto} class="right" alt="Decorative lotto-ball image." />
  <p>
   Consider this problem: you have a big glass globe filled with 50 "lotto"
   balls. Each ball is numbered. You want to
   <strong>pick three of the balls</strong> for a lottery game called "Pick 3 Lotto".
  </p>
  <ul>
   <li>
    The numbers have to be <strong>randomly</strong> selected between 1 and 50 (inclusive)
   </li>
   <li>No number can appear twice</li>
  </ul>
  <p>
   You may be tempted to start with this code, using the
   <tt>rand()</tt> function from <tt>&lt;cstdlib&gt;</tt>:
  </p>
  <pre
   class="language-cpp"><code>int n1&lbrace;1 + rand() % 50&rbrace;;
int n2&lbrace;1 + rand() % 50&rbrace;;
int n3&lbrace;1 + rand() % 50&rbrace;;</code></pre>
  <p>
   Unfortunately, this <mark>generates duplicates</mark>, (that is, 2 of the 3
   numbers will be the same), <strong>about 8% of the time</strong>, which is an
   impossibility in the game you're trying to simulate. (That's why you can't
   use this method for selecting cards from a deck of cards.)
  </p>
  <p>
   Instead, the best way to solve this problem is to put all of the lottery
   balls (numbers) into a <tt>vector</tt>, <mark>shuffle</mark>
   the <tt>vector</tt>, and then pick the first three lottery balls, which are
   now randomly ordered.
  </p>
 </div>
</Layout>
