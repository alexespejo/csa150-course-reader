---
import Layout from "../../../layouts/Layout.astro";
import Header from "../../../components/Header.astro";
const { useLayout } = Astro.props;
---

<Layout
 title="Week 8"
 dir="w08/"
 displayLayout={useLayout}
 chapterSubSections={[]}
>
 <Header id="F">
  <h1>Range Checking</h1>
 </Header><div>
  <p class="firstLine">
   Programmers coming from other languages often gravitate to the subscript
   operator since it is similar in syntax to the array operations which the
   vector emulates. However, if you use the subscript operator, your program
   will
   <mark>do no range checking</mark>!
  </p>
  <p>
   Before you go any further, <mark>read over that last line again</mark>. Most
   of you probably <strong>cannot imagine</strong> a language that does not do some
   sort of range checking. Let me illustrate what happens in C++:
  </p>
  <pre
   class="language-cpp"><code>vector&lt;int&gt; v(4);   // 4 elements
cout &lt;&lt; v[4];       // access out of bounds
v[4] = 27;          // writing out of bounds
cout &lt;&lt; v[4];</code></pre>
  <p>
   You <mark>will not get a compiler error or a runtime error</mark>, as you
   would in Java or Python, even though you are accessing (and even writing to)
   an element that is outside of the vector bounds.
  </p>
  <p>
   <strong>This is an error, though</strong>. Often, <code>cout</code>
   will print the value stored in the location where the fifth element of <code
    >v</code
   >
   <mark>would be</mark>
   <strong>stored</strong>, if it existed. If that is the case, on your
   platform, then the assignment will happily store the value <code>27</code> in
   the same location, <mark>regardless of what is currently stored there</mark>.
   If you think, "Well, that's not so bad!", then what about this?
  </p>
  <pre class="line-numbers language-cpp"><code>v[1075935] = 27;</code></pre>
  <p>
   Again, you'll get <mark>no nice stack trace</mark>
   like you would get with Java or Python, telling you that your index is out of
   bounds. If you <strong>are very lucky</strong>, your operating system will
   shut down your application rudely with a <mark>segmentation fault</mark>. If
   you aren't, you will <strong
    >silently corrupt a portion of your own application</strong
   >, producing a bug that shows up days, weeks or months later. <mark
    >Not good</mark
   >.
  </p>
  <h2>Using the <em>at</em> Member Function</h2>
  <p>
   Fortunately, you can fix this deficiency by using <code>at()</code>. When you
   use <code>at()</code>, the compiler generates code to check out-of-bound
   subscripts; you don't have to rely on accidentally stepping on the toes of
   your operating system to find your errors.
  </p>
  <p>
   Other than the slight performance hit, I can't think of any reason not to <mark
    >always</mark
   > use
   <code>at()</code> instead of the subscript operator. Combined with C++ <strong
    >exception handling</strong
   >, your code will be safer and have fewer bugs.
  </p>
  <div class="highlight alert alert-info">
   <p>
    You can also modify the vector class so that subscripts do throw exceptions.
    That's what Bjarne Stroustrup does in Section 4.4.1.2 of the <a
     target="_blank"
     href="https://isocpp.org/files/papers/4-Tour-Algo-draft.pdf"
    >
     Tour of C++
    </a>
    (page 104).
   </p>
  </div>
 </div>
</Layout>
