---
import Layout from "../../../layouts/Layout.astro";
import Header from "../../../components/Header.astro";
import imageStego from "../images/stego-color.png";
import imageStegoBw from "../images/stego-bw.png";
const { useLayout } = Astro.props;
---

<Layout
 title="Week 8"
 dir="w08/"
 displayLayout={useLayout}
 chapterSubSections={[]}
>
 <Header id="H">
  <h1>Changing the Format</h1>
 </Header><div>
  <img src={imageStego} class="right" alt="A 4-channel stegosaurus image." />
  <p class="firstLine">
   Although the previous example added an alpha (transparency) channel to the
   Pete the Pirate picture, it didn't really change how it looked. Our second
   example loads this 4-channel <b>PNG</b> image as a 1-channel (that is, grayscale)
   image. We'll then save it as a
   <b>BMP</b> which is the native format for Windows applications.
  </p>
  <p>Here's the code that that does this.</p>
  <pre
   class="language-cpp"><code>//Load a png file using 1 byte per pixel (Gray scale)
channels = 1;
unsigned char * const stego = 
    stbi_load("stegosaurus.png", &amp;width, &amp;height, &amp;bpp, channels);
stbi_write_bmp("stego-bw.bmp", width, height, channels, stego);
stbi_image_free(stego);</code></pre>
  <img src={imageStegoBw} class="right" alt="A 1-channel stegosaurus image." />
  <p>
   Notice that the conversion from 4-channel image on disk to 1-channel image in
   memory, happened when we <b>loaded</b> the image, not when we <b>wrote</b> the
   image.
  </p>
  <h2>PNG to JPEG</h2>
  <p>
   The first example changed a <b>JPEG</b> into a <b>PNG</b>, but the final
   example goes the other way, removing the alpha (transparency) channel and
   saving it as a <b>JPEG</b>. The <tt class="i">stb_write_jpg()</tt> function also
   takes one extra argument, which is the quality of the resulting image. This can
   go from <tt>0-100</tt>, where <tt>100</tt> has the highest quality.
  </p>
  <p>
   Go ahead now and type <tt>make</tt>
   <tt>run</tt> in the <b>Repl</b>
   <b>Shell</b>, and you'll be able to examine the modified images. In your
   homework, we'll use this newfound ability to read and write images to write <b
    >image filters</b
   >, like those found in PhotoShop.
  </p>
 </div>
</Layout>
