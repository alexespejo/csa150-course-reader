---
import Layout from "../../../layouts/Layout.astro";
import Header from "../../../components/Header.astro";
const { useLayout } = Astro.props;
---

<Layout
 title="Week 8"
 dir="w08/"
 displayLayout={useLayout}
 chapterSubSections={[]}
>
 <Header id="F">
  <h1>More Loading an Image</h1>
 </Header><div>
  <p class="firstLine">
   The first part of the sample program (in <tt>main.cpp</tt>),
   <strong>loads</strong> a JPEG version of OCC's mascot, Pete the Pirate, into memory.
  </p>
  <pre
   class="language-cpp line-numbers"><code>int width, height, bpp, channels = 4;
unsigned char * const pete =
    stbi_load("pete.jpg",             // input file
              &amp;width, &amp;height, &amp;bpp,  // pointers (out)
              channels);              // channels (in)</code></pre>
  <ul>
   <li>
    The <tt class="i">stbi_load()</tt> function returns a
    <strong>pointer</strong> to the first byte of the image data in memory. The type
    of the pointer is an
    <tt>unsigned</tt>
    <tt>char</tt>, which, in C++ speak means a "raw" byte. If loading fails,
    then the function returns the <tt>nullptr</tt>.
    <p>
     Note that the pointer <tt>pete</tt> is a <tt>const</tt>
     pointer. This is necessary because you will later need to "free" the memory
     that the function has placed on the heap. If you move the pointer, then your
     program may crash.
    </p>
   </li>
   <li>
    The first argument to the function is the
    <strong>path to the file.</strong> This can be absolute or relative (as used
    here), but it must be a <strong>C-style string</strong>. We'll look more at
    C-style strings in a future lesson. For right now,
    <strong>use a literal</strong> or use the <tt>c_str()</tt>
    member function on a regular C++ string.
   </li>
   <li>
    The next three arguments are the <mark>address of the</mark>
    <strong>width</strong>, <strong>height</strong>, and
    <strong>bytes-per-pixel</strong> used in the original image. These are <strong
     >output parameters</strong
    >; that means that you first create the variables (on line 1), and then pass <mark
     >their addresses</mark
    > as arguments. The function will <strong>fill them in</strong>. The
    information flows <strong>out of the function</strong>, not into it.
   </li>
   <li>
    The last argument is an <strong>input</strong> parameter telling the <tt
     class="i">stbi_load()</tt
    > function how to store the image. Here we're telling it to store <b>4</b>
    bytes for each pixel (<b>RGBA</b>), even though the original image only has <b
     >3</b
    > (<b>RBG</b>).
   </li>
  </ul>
 </div>
</Layout>
