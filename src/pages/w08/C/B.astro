---
import Layout from "../../../layouts/Layout.astro";
import Header from "../../../components/Header.astro";
const { useLayout } = Astro.props;
---

<Layout
 title="Week 8"
 dir="w08/"
 displayLayout={useLayout}
 chapterSubSections={[]}
>
 <Header id="B">
  <h1>Naming Concepts</h1>
 </Header><div>
  <p class="firstLine">
   Three terms are used to describe the characteristics of a variable or
   function name:
  </p>
  <ol>
   <li><mark>Scope</mark>: where the name is <b>visible</b>.</li>
   <ol style="list-style-type:lower-alpha">
    <li>
     Variables with <mark>block scope</mark> are visible from the point of their
     declaration to the end of the block where they are declared. Local variables
     and parameters have block scope.
    </li>
    <li>
     Functions and global variables have <mark>file scope</mark>; they are
     visible from the point of declaration to the end of the file in which they
     are declared.
    </li>
   </ol>
   <li>
    <mark>Storage</mark> and <mark>duration</mark>: where a variable is located,
    and how long it stays there.
   </li>
   <ol style="list-style-type:lower-alpha">
    <li>
     Variables in <mark>static storage</mark> are placed there when the program starts
     running and stay at the same address until the program is finished. Global variables
     and local <tt>static</tt> variables have static storage class.
    </li>
    <li>
     Variables with <mark>automatic storage</mark>, are placed on the stack when
     they are defined, and then destroyed when the block they are defined in
     ends; automatic variables always have block scope. Local variables and
     parameters have automatic storage.
    </li>
    <li>
     <mark>Dynamic storage</mark> is determined by the programmer; dynamic variables
     are placed on the heap and removed from the heap in response to specific programmer
     commands, such as <tt>new</tt> and <tt>delete</tt>.
    </li>
   </ol>
   <li>
    <mark>Linkage</mark>: how variables and functions can be shared between
    different files.
   </li>
   <ol style="list-style-type:lower-alpha">
    <li>
     <mark>External linkage</mark>
     means that a global variable or function can be used from other files. This
     is the normal case with global variables.
    </li>
    <li>
     <mark>Internal linkage</mark>
     means that a "global" variable or function is only visible to other functions
     in the same file. This is indicated by placing the keyword <tt>static</tt>
     before the definition of the variable or function.
    </li>
    <li>
     <mark>No linkage</mark>
     means that a variable cannot be used inside any other function. All local variables
     and parameters have no linkage.
    </li>
   </ol>
  </ol>
 </div>
</Layout>
