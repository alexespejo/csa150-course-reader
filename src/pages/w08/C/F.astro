---
import Layout from "../../../layouts/Layout.astro";
import Header from "../../../components/Header.astro";
const { useLayout } = Astro.props;
---

<Layout
 title="Week 8"
 dir="w08/"
 displayLayout={useLayout}
 chapterSubSections={[]}
>
 <Header id="F">
  <h1>The sizeof Operator</h1>
 </Header><div>
  <p class="firstLine">
   The <mark><tt>sizeof</tt> operator</mark>
   returns the amount of memory allocated for a variable. The operator takes a single
   operand, which must be
   <strong>either</strong>
   <strong>an expression</strong>, such as the name of a variable or a <strong
    >type name</strong
   >. Type names must be enclosed in parentheses.
  </p>
  <p>
   If used with a variable or an expression, the <tt>sizeof</tt>
   operator returns the <mark>number of bytes</mark>
   required to store the value of that expression. If used with a <mark
    >type</mark
   >, <tt>sizeof</tt> returns the number of bytes required to store a value <mark
    >of that type</mark
   >.
  </p>
  <pre
   class="language-cpp"><code>int a = 42;
cout &lt;&lt; sizeof a &lt;&lt; endl;       // 4 (on our platform)
cout &lt;&lt; sizeof(double) &lt;&lt; endl; // 8
cout &lt;&lt; sizeof 7LL + 4 &lt;&lt; endl; // 12-WHY?</code></pre>
  <p>
   The first line prints the bytes required to store the
   <tt>int</tt> variable <tt>a</tt>; the second line prints the number of bytes
   required to store <strong>any value</strong>
   of type <tt>double</tt>. The third is more confusing. On our platform, a <tt
    >long</tt
   >
   <tt>long</tt> should take
   <tt>8</tt> bytes, but this prints <tt>12</tt>. <mark>Why?</mark>
  </p>
  <p>
   Simple: <tt>sizeof</tt> is a <strong>unary</strong> operator. That means that
   the expression shown here reads as <tt>sizeof(7LL)</tt>
   <tt>+</tt>
   <tt>4</tt> which is <tt>8</tt>
   <tt>+</tt>
   <tt>4</tt>
   or <tt>12</tt>. The fix is equally simple:
   <mark>always parenthesize arguments</mark> to the <tt>sizeof</tt>
   operator, <mark>even when they are not needed</mark>.
  </p>
 </div>
</Layout>
