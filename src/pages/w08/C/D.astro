---
import Layout from "../../../layouts/Layout.astro";
import Header from "../../../components/Header.astro";
const { useLayout } = Astro.props;
---

<Layout
 title="Week 8"
 dir="w08/"
 displayLayout={useLayout}
 chapterSubSections={[]}
>
 <Header id="D">
  <h1>Local Variables</h1>
 </Header><div>
  <p class="firstLine">
   Parameter variables, and variables created <strong>inside a function</strong
   >, are <strong>local variables</strong>,
   <mark>allocated on the stack</mark> in a block of memory called a <strong
    >stack frame</strong
   >. Internally, these variables are <mark
    >pushed onto the top of the stack</mark
   > at the time of each function call.
  </p>
  <iframe
   width="800"
   height="450"
   frameborder="0"
   src="https://pythontutor.com/iframe-embed.html#code=int%20times_two%28int%20n%29%20%7B%0A%20%20return%20n%20*%202%3B%0A%7D%0A%0Aint%20main%28%29%20%7B%0A%20%20int%20y%20%3D%20times_two%284%29%3B%0A%20%20return%200%3B%0A%7D&codeDivHeight=400&codeDivWidth=350&cumulative=false&curInstr=0&heapPrimitives=nevernest&origin=opt-frontend.js&py=cpp_g%2B%2B9.3.0&rawInputLstJSON=%5B%5D&textReferences=false"
  >
  </iframe>
  <p>
   The same local variable may be stored at a different address each time the
   function is called. In fact, when we covered
   <strong>recursion</strong> earlier in the semester, we saw that there may be <strong
    >multiple copies</strong
   > of the
   <strong>same local variable</strong>, each stored at a different location on
   the stack. This is what makes recursion possible.
  </p>
  <h2>Local static Variables</h2>
  <p>
   A local variable that uses the <tt>static</tt> modifier is not stored on the stack,
   but <strong>in the static storage area</strong>, like a global variable. As
   far as its storage class goes, it is a global variable, but as far as its
   scope and linkage goes, it is a local variable.
  </p>
 </div>
</Layout>
