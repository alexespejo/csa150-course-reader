---
import Layout from "../../../layouts/Layout.astro";
import Header from "../../../components/Header.astro";
const { useLayout } = Astro.props;
---

<Layout
 title="Week 8"
 dir="w08/"
 displayLayout={useLayout}
 chapterSubSections={[]}
>
 <Header id="B">
  <h1>Defining Pointers</h1>
 </Header><div>
  <p class="firstLine">
   To define a pointer, add an asterisk (<tt>*</tt>) between the variable type
   and the variable name in the variable definition. Here, <tt>p</tt> is a pointer
   variable that "points to" an <tt>int</tt>; its type is <strong
    >pointer-to-int</strong
   >.
  </p>
  <pre class="language-cpp"><code>int *p;</code></pre>
  <p>
   In this context, <tt>*</tt> is the <mark>pointer declarator operator</mark>.
   It turns the name on its right into a pointer to the type on its left. The
   line below defines <tt>cptr</tt>, a <strong>pointer-to-char</strong>.
  </p>
  <pre class="language-cpp"><code>char *cptr;</code></pre>
  <p>
   Even though <tt>p</tt> and <tt>cptr</tt> are both
   <strong>pointers</strong>, <strong>each is a distinct type</strong>; pointers
   are very strongly typed and there are
   <mark>no implicit conversions between pointer types</mark>.
  </p>
  <p>
   A pointer <strong>belongs syntactically with the variable name</strong>
   and not with the base type.
  </p>
  <pre
   class="language-cpp"><code>int* p1, p2;      // p1 is a pointer, p2 an int
int *p3, *p4;     // Both are pointers</code></pre>
  <p>
   If you use the same declaration to define two pointers of the same type, you
   need to mark each of the variables with an asterisk.
  </p>
 </div>
</Layout>
