---
import Layout from "../../../layouts/Layout.astro";
import Header from "../../../components/Header.astro";
const { useLayout } = Astro.props;
---

<Layout
 title="Week 8"
 dir="w08/"
 displayLayout={useLayout}
 chapterSubSections={[]}
>
 <Header id="H">
  <h1>Pointers &amp; const</h1>
 </Header><div>
  <p class="firstLine">
   Pointers have two values: an <strong>indirect</strong> and an
   <strong>explicit</strong> (or direct) value.
   <mark>Either (or both) may be <tt>const</tt></mark>. Consider this code.
  </p>
  <pre
   class="language-cpp"><code>string a&lbrace;"A"&rbrace;, b&lbrace;"B"&rbrace;, c&lbrace;"C"&rbrace;;
const string *ps1 = &amp;a;
string * const ps2 = &amp;b;
const string * const ps3 = &amp;c;</code></pre>
  <p>
   Note the word <code>const</code> in the declaration of <tt>p1</tt>, <tt
    >p2</tt
   > and <tt>p3</tt>.
  </p>
  <ul>
   <li>
    Prevent <strong>writing to the pointer's indirect value</strong>, by putting
    the const <mark>before the type</mark>
    (<tt>ps1</tt>). Thus
    <code class="language-cpp">*ps1 = "x";</code> is illegal.
   </li>
   <li>
    When <tt>const</tt> comes <mark>after the star</mark>, (<tt>ps2</tt>), it
    means that the pointer itself cannot be changed; you <strong
     >cannot make it point to a different location</strong
    >. It would be illegal to write <code class="language-cpp"
     >ps2 = &amp;a;</code
    >
   </li>
   <li>
    Prevent changing either the pointer, <strong>or</strong>
    what it points to, by using <strong>both</strong> versions of <tt>const</tt>
    (<tt>ps3</tt>).
   </li>
  </ul>
  <p>
   When you write a function which <strong>should not</strong> change the item that
   it points to, make sure you define it as a "pointer to
   <tt>const</tt>. For instance, consider this template function which prints
   both the address and value of any variable:
  </p>
  <pre
   class="language-cpp"><code>template &lt;typename T&gt;
void printData(const T* p)
&lbrace;
    cout &lt;&lt; "Pointer: " &lt;&lt; p &lt;&lt; "-&gt;";
    if (p != nullptr) cout &lt;&lt; *p &lt;&lt; endl;
    else cout &lt;&lt; "nullptr" &lt;&lt; endl;
&rbrace;</code></pre>

  <p>
   Because the parameter is a "pointer to <tt>const</tt>, you can pass the
   function <strong>both</strong>
   <tt>const</tt> and non-<tt>const</tt> variables. It works with everything because
   it <mark>guarantees</mark> that it won't inadvertently change the object that
   p points to.
  </p>
 </div>
</Layout>
