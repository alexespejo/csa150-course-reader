---
import Layout from "../../../layouts/Layout.astro";
import Header from "../../../components/Header.astro";
const { useLayout } = Astro.props;
---

<Layout
 title="Week 8"
 dir="w08/"
 displayLayout={useLayout}
 chapterSubSections={[]}
>
 <Header id="G">
  <h1>Call By Pointer</h1>
 </Header><div>
  <p class="firstLine">
   When working with functions, you can
   <mark>simulate call by reference</mark> by using explicit pointer parameters.
   Many programmers prefer to do this because it is obvious that you are passing
   by pointer instead of by value at the function call site.
  </p>
  <p>
   Let's look at a <tt>swap()</tt> function that <strong
    >exchanges the values</strong
   > contained in two integers. The algorithm is simple, assuming the two parameters
   are <tt>a</tt> and <tt>b</tt>. Using reference parameters, we write it like
   this:
  </p>
  <pre
   class="language-cpp"><code>void swap(int&amp; a, int&amp; b)&lbrace; 
    int temp&lbrace;a&rbrace;;
    a = b;
    b = temp;
&rbrace;</code></pre>
  <p>
   When you <strong>call the function</strong>, there is <mark
    >no indication</mark
   > that <tt>x</tt> and <tt>y</tt> will be changed.
  </p>
  <pre
   class="language-cpp"><code>swap(x, y);     // does this change x and y? Can't tell here!</code></pre>

  <p>
   To use <mark>explicit pointer parameters</mark>, change the implementation of <tt
    >swap()</tt
   > like this:
  </p>
  <pre
   class="language-cpp"><code>void swap(int *a, int *b)&lbrace; 
    int temp&lbrace;*a&rbrace;;
    *a = *b;
    *b = temp;
&rbrace;</code></pre>
  <p>
   Then, <mark>call the function</mark> like this. The effect is the same as pass-by-reference,
   but you can tell at the call-site that <tt>x</tt> and <tt>y</tt>
   may be changed in the function.
  </p>
  <pre
   class="language-cpp"><code>int x&lbrace;3&rbrace;, y&lbrace;4&rbrace;;
swap(&amp;x, &amp;y);     // explicit address passing
cout &lt;&lt; "x-&gt;" &lt;&lt; x &lt;&lt; ", y-&gt;" &lt;&lt; y &lt;&lt; endl;
// x-&gt;4, y-&gt;3</code></pre>
 </div>
</Layout>
