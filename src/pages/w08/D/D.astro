---
import Layout from "../../../layouts/Layout.astro";
import Header from "../../../components/Header.astro";
import imageRunningMan from "../images/running-man.png";
const { useLayout } = Astro.props;
---

<Layout
 title="Week 8"
 dir="w08/"
 displayLayout={useLayout}
 chapterSubSections={[]}
>
 <Header id="D">
  <h1>Dereferencing Pointers</h1>
 </Header><div>
  <p class="firstLine">
   Let's look at the list of pointers on the previous page again.
  </p>
  <pre
   class="language-cpp"><code>int x&lbrace;42&rbrace;, y&lbrace;0&rbrace;, a[10]; // x-{'>'}int, y-{'>'}int, a-{'>'}array

int *p1&lbrace;&amp;y&rbrace;;         // points to y
int *p2&lbrace;&amp;x&rbrace;;         // points to x
int *p3&lbrace;new int&lbrace;3&rbrace;&rbrace;; // points to int on heap
int *p4&lbrace;a&rbrace;;          // points to first element of a
int *p5&lbrace;a+10&rbrace;;       // points "one past" the array a
int *p6&lbrace;nullptr&rbrace;;    // points to "nothing"
int *p7;             // uninitialzed (invalid)</code></pre>

  <p>
   The <tt>*</tt>
   <mark>dereferencing operator</mark>
   returns the value that a pointer points to, <strong>provided that</strong> the
   pointer points to a
   <mark>valid object</mark>, such as <tt>p1</tt> and <tt>p2</tt>. Using the
   dereferencing operator on <tt>p5</tt>, <tt>p6</tt> or <tt>p7</tt> produces
   <mark>undefined behavior</mark>. The value that a pointer "points to" is
   called its <mark>indirect value</mark>.
  </p>
  <p>
   Since <tt>p1</tt> is a pointer to <tt>int</tt>, the compiler "knows" that <tt
    >*p1</tt
   >
   <mark>must be an integer object</mark>. Thus <tt>*p1</tt> turns out to be <mark
    >another name (or alias) for the variable</mark
   >
   <tt>y</tt>. Like the simple name <tt>y</tt>, <tt>*p1</tt> is an <strong
    ><em>lvalue</em>
   </strong>, and you can assign new values to it.
  </p>
  <pre
   class="language-cpp"><code>int x&lbrace;42&rbrace;, y&lbrace;0&rbrace;;
int *p1&lbrace;&amp;y&rbrace;;        // points to y 
int *p2&lbrace;&amp;x&rbrace;;        // points to x 
*p1 = 17;           // assign to indirect value</code></pre>
  <p>
   <a
    target="_blank"
    href="https://pythontutor.com/visualize.html#code=int%20main%28%29%20%7B%0A%20%20int%20x%7B42%7D,%20y%7B0%7D%3B%0A%20%20int%20*p1%7B%26y%7D%3B%20%20%20%20%20%20%20%20//%20points%20to%20y%20%0A%20%20int%20*p2%7B%26x%7D%3B%20%20%20%20%20%20%20%20//%20points%20to%20x%20%0A%20%20*p1%20%3D%2017%3B%20%20%20%20%20%20%20%20%20%20%20//%20assign%20to%20indirect%20value%0A%7D&cumulative=false&curInstr=0&heapPrimitives=nevernest&mode=display&origin=opt-frontend.js&py=cpp_g%2B%2B9.3.0&rawInputLstJSON=%5B%5D&textReferences=false"
   >
    <img
     src={imageRunningMan}
     class="left width-32 dark:bg-white"
     alt="Running man icon used for links."
    /></a
   >
   This last statement changes the value in the variable <tt>y</tt>
   because that is the target of the pointer <tt>p1</tt>.
   <tt>p1</tt>
   <strong>is unaffected</strong> by this assignment; it continues to point to the
   variable <tt>y</tt>. Click the little running-man on the left to see this
   animated in a new window.
  </p>
 </div>
</Layout>
