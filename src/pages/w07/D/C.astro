---
import Layout from "../../../layouts/Layout.astro";
import Header from "../../../components/Header.astro";
const { useLayout } = Astro.props;
---

<Layout
 title="Week 7"
 dir="w07/"
 displayLayout={useLayout}
 chapterSubSections={[]}
>
 <Header id="C">
  <h1>A Compare Function</h1>
 </Header><div>
  <p class="firstLine">
   Of course, when comparing dates, we don't just want to know if they are
   equal. More often we want to know of one date is earlier or later than
   another.
  </p><p>
   Instead of writing additional functions, such as <tt>lessThan()</tt> and
   <tt>greaterThan()</tt>, we can write a single function named
   <tt>compare()</tt>, which returns <tt>0</tt> if the two dates are equal, and a
   negative or positive number if the first date is earlier than, or later than the
   second.
  </p>
  <p>
   This is a very common, <mark>three-way pattern.</mark> Here's a possible solution
  </p>
  <pre
   class="language-cpp"><code>bool compare(const Date& lhs, const Date& rhs)
&lbrace;
   if (lhs.year == rhs.year &amp;&amp; 
         lhs.month == rhs.month &amp;&amp; lhs.day == rhs.day) &lbrace;
      return 0;   // all the same
   &rbrace; 
   else if (lhs.year &lt; rhs.year) &lbrace;
      return -1;  // year is earlier
   &rbrace; 
   else if (lhs.year == rhs.year &amp;&amp; lhs.month &lt; rhs.month) &lbrace;
      return -1;  // year same but month earlier
  &rbrace; 
   else if (lhs.year == rhs.year &amp;&amp; lhs.month == rhs.month &amp;&amp;
            lhs.day &lt; rhs.day) &lbrace;
      return -1;  // year, month same, but day earlier
   &rbrace; else &lbrace;
         return 1; // must be after
  &rbrace; 
&rbrace;</code></pre>
 </div>
</Layout>
