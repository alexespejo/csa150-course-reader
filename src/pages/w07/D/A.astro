---
import Layout from "../../../layouts/Layout.astro";
import Header from "../../../components/Header.astro";
const { useLayout } = Astro.props;
---

<Layout
 title="Week 7"
 dir="w07/"
 displayLayout={useLayout}
 chapterSubSections={[]}
>
 <Header id="A">
  <h1>Structure Arguments</h1>
 </Header><div>
  <p class="firstLine">
   Structures may be <mark>passed</mark> as arguments to functions; they may also
   be <mark>returned from</mark>
   functions. Specify the structure type as the parameter or return type.
  </p>
  <p>
   We can use this to get around the inconvenience of the missing structure
   aggregate operations. Although we <strong>cannot</strong> compare two structures
   with
   <tt>==</tt> or <tt>!=</tt>, we can write a function to supply the necessary
   operation, like this:
  </p>
  <pre
   class="language-cpp"><code>bool equals(Date lhs, Date rhs)
&lbrace;
    return lhs.month == rhs.month &amp;&amp;
        lhs.day == rhs.day &amp;&amp; lhs.year == rhs.year;
&rbrace;</code></pre>
  <p>
   The function <tt>equals()</tt> takes two <tt>Date</tt> arguments and returns <tt
    >true</tt
   > if they are equal and <tt>false</tt>, otherwise. Use the function like
   this:
  </p>
  <pre
   class="language-cpp"><code>if (equals(d1, d2)) cout &lt;&lt; "equal" &lt;&lt; endl;</code></pre>
  <div class="highlight alert alert-info">
   <p>
    The parameter names
    <strong>lhs</strong>
    and <strong>rhs</strong> are shorthand for left-hand-side and right-hand-side,
    and are commonly use with functions that mimic the built-in operators.
   </p>
  </div>
 </div>
</Layout>
