---
import Layout from "../../../layouts/Layout.astro";
import Header from "../../../components/Header.astro";
const { useLayout } = Astro.props;
---

<Layout
 title="Week 7"
 dir="w07/"
 displayLayout={useLayout}
 chapterSubSections={[]}
>
 <Header id="E">
  <h1>Structured Bindings</h1>
 </Header><div>
  <p class="firstLine">Let's look at that last function call once again:</p>
  <pre
   class="language-cpp"><code>Roots r = quadratic(1, -3, -4);
cout &lt;&lt; "roots-&gt;" &lt;&lt; r.root1 &lt;&lt; ", " &lt;&lt; r.root2 &lt;&lt; endl;</code></pre>
  <p>
   Notice that it is up to the programmer to <strong>"unpack"</strong> the returned
   structure. C++17 added a new feature to the language that makes it easier to retrieve
   several returned values from a function. These are called <mark
    >structured bindings</mark
   >.
  </p>
  <p>
   With structured bindings, you can <strong>automatically unpack</strong> the structure
   into a special form of <tt>auto</tt> declared variables like this:
  </p>
  <pre
   class="language-cpp"><code>auto [r1, r2] = quadratic(1, -3, -4);
cout &lt;&lt; "roots-&gt;" &lt;&lt; r1 &lt;&lt; ", " &lt;&lt; r2 &lt;&lt; endl;</code></pre>
  <p>
   Note that you do not need to specify the names of the data members in the
   returned structure variable, nor the types of the local variables <tt>r1</tt>
   and <tt>r2</tt>. The structure is unpacked and <tt>root1</tt> is assigned to <tt
    >r1</tt
   >
   and <tt>root2</tt> is assigned to <tt>r2</tt>. They are both
   <mark>automatically</mark> declared as type <tt>double</tt>.
  </p>
 </div>
</Layout>
