---
import Layout from "../../../layouts/Layout.astro";
import Header from "../../../components/Header.astro";
const { useLayout } = Astro.props;
---

<Layout
 title="Week 7"
 dir="w07/"
 displayLayout={useLayout}
 chapterSubSections={[]}
>
 <Header id="A">
  <h1>The to_string() Functions</h1>
 </Header><div>
  <p class="firstLine">
   In the last few lessons, you've looked at the new C++ 11 functions for
   converting <tt>string</tt> values to
   <b>numbers</b>, such as <tt>stoi()</tt>, <tt>stod()</tt> and so on. Along with
   these functions, C++ 11 also introduced a group of which go the other direction,
   converting
   <mark>numbers to <tt>string</tt></mark>. Instead naming the functions <tt
    >itos()</tt
   > or <tt>dtos()</tt>, (similar to
   <tt>stoi()</tt>), these <strong>overloaded functions</strong> are
   <strong>all</strong> named <tt>to_string()</tt>.
  </p>
  <p>
   Just like the string-to-number conversion functions, the
   <tt>to_string()</tt> functions do not appear in C++98. So, as you did with <tt
    >stoi()</tt
   > and friends, you must to write your our own, using the <tt
    >ostringstream</tt
   > class like this:
  </p>
  <pre
   class="language-cpp"><code>string to_string(int n)
&lbrace;
    ostringstream out;
    out &lt;&lt; n;
    return out.str();
&rbrace;</code></pre>
  <p>
   You can easily <mark>overload</mark> your version of
   <tt>to_string()</tt> to work with other types.
  </p>
  <pre
   class="language-cpp"><code>string to_string(double n) &lbrace; . . .&rbrace; 
string to_string(long n) &lbrace; . . .&rbrace; 
string to_string(unsigned n) &lbrace; . . . &rbrace;</code></pre>
  <p>
   The body of each function will have <mark>the identical code</mark>
   to the <tt>int</tt> version. Wrap all of these up inside an
   <tt>#if</tt>
   <tt>__cplusplus</tt>
   <tt>&lt;=</tt>
   <tt>199711L</tt>
   <mark>preprocessor directive</mark>, and you should be able to use the <tt
    >to_string()</tt
   > function in both C++ 17 and in C++ 98.
  </p>
 </div>
</Layout>
