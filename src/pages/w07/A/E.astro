---
import Layout from "../../../layouts/Layout.astro";
import Header from "../../../components/Header.astro";
const { useLayout } = Astro.props;
---

<Layout
 title="Week 7"
 dir="w07/"
 displayLayout={useLayout}
 chapterSubSections={[]}
>
 <Header id="E">
  <h1>Other <em>catch</em> Blocks</h1>
 </Header><div>
  <p class="firstLine">
   If your function may throw
   <mark>more than one</mark> exception, add
   <mark>cascading <tt>catch</tt> blocks</mark> following the <tt>try</tt> block,
   each designed to handle a different type of exception, like this:
  </p>
  <pre
   class="language-cpp"><code>try &lbrace;
    int n = stoi(str);    // may throw an invalid_argument exception
    int x = str.at(5);    // may throw an out_of_range exception
    // ... other statements that may throw exceptions
&rbrace;
catch (const invalid_argument&amp; e) &lbrace;
    // handle errors from stoi
&rbrace;
case (const out_of_range&amp; e) &lbrace;
    // handle errors from at()
&rbrace;
case (...) &lbrace;
    // handle any exceptions not previously caught
&rbrace;</code></pre>
  <p>
   The last block, with the <tt>...</tt> in the argument list is the
   <mark>catch all</mark> handler. It catches<strong>any exceptions</strong>
   thrown in the <tt>try</tt> block, <mark>not previously caught.</mark>
   The <strong>catch all</strong> hander <mark>only</mark> catches thrown exceptions,
   not other errors like segmentation faults or
   <mark>operating system traps or signals</mark> such as those caused by dividing
   by zero. Code jumps to <strong>only one</strong> of the
   <tt>catch</tt> blocks shown here. If no exceptions are thrown, then no <tt
    >catch</tt
   > blocks are entered.
  </p>
  <h2>Finish the Sample</h2>
  <p>
   After adding <tt>try-catch</tt> to <tt>main()</tt>, print an error message
   inside the <tt>catch</tt>
   block. Use <tt>cerr</tt>, print the word <em>"Error: "</em>
   and then call <tt>e.what()</tt> like this:
  </p>
  <pre
   class="language-cpp"><code>catch (const invalid_argument&amp; e) &lbrace;
    cerr &lt;&lt; "Error: " &lt;&lt; e.what() &lt;&lt; endl;
&rbrace;
cout &lt;&lt; "--program done--" &lt;&lt; endl;</code></pre>
  <p>
   Now your program should work the same whether compiled with C++17 or C++98
   (even if the error messages differ between versions.)
  </p>
 </div>
</Layout>
