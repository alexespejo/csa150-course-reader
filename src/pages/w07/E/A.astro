---
import Layout from "../../../layouts/Layout.astro";
import Header from "../../../components/Header.astro";
import imageDateWeekday from "../images/date-weekday.png";
const { useLayout } = Astro.props;
---

<Layout
 title="Week 7"
 dir="w07/"
 displayLayout={useLayout}
 chapterSubSections={[]}
>
 <Header id="A">
  <h1>Enumerated Types</h1>
 </Header>
 <div>
  <img
   src={imageDateWeekday}
   class="right"
   alt="The Date plus the Weekday enumerated type."
  />
  <p class="firstLine">
   Single value types are called
   <mark>scalar types</mark>. All of the built-in, primitive data types—<tt
    >int</tt
   >, <tt>char</tt>, <tt>bool</tt>
   and <tt>double</tt>—are <strong>scalar</strong> data types. The <tt>Date</tt>
   type, which you met in the last lesson, was a user-defined <b>structured</b> type.
  </p>
  <p>
   The
   <tt>Weekday</tt> type shown here above the <tt>Date</tt>
   is a <mark>user-defined</mark>
   <strong>scalar</strong> type which contains only a single simple value.
  </p>
  <p>
   You may define your own <strong>new scalar types</strong> by listing the
   <mark>elements in their domain</mark>. Such types are called
   <mark>enumerated types</mark>. Enumerated types are based upon another type,
   in this case the integers. Such types are called
   <mark>derived</mark> or <mark>compound types</mark>.
  </p>
  <p>The syntax for defining an enumerated type is:</p>
  <pre
   class="language-cpp"><code>enum class type-name &lbrace; name-list &rbrace;;   // C++ 11 scoped enums
enum type-name &lbrace; name-list &rbrace;;         // traditional "plain" enums</code></pre>
  <p>
   Here <strong><em>type-name</em></strong> is the <strong>name</strong> of the type
   and <strong><em>name-list</em></strong> is a list of literals representing the
   values in the domain, separated by commas. The
   <strong><em>name-list</em></strong> does not need any semicolons, unlike regular
   variable definitions. However, you <mark
    >must end the definition with a semicolon</mark
   >.
  </p>
  <p>
   The
   <mark>scoped enumeration</mark>
   was added in C++11, while the older type is called an
   <mark>un-scoped or plain enumeration</mark>. In this class we'll use the
   newer, scoped enumerations, since they will help you avoid all kinds of scope
   bugs.
  </p>
 </div>
</Layout>
