---
import Layout from "../../../layouts/Layout.astro";
import Header from "../../../components/Header.astro";
const { useLayout } = Astro.props;
---

<Layout
 title="Week 7"
 dir="w07/"
 displayLayout={useLayout}
 chapterSubSections={[]}
>
 <Header id="E">
  <h1>Enumerated Input</h1>
 </Header><div>
  <p class="firstLine">
   Enumerated input is more difficult than output, because:
  </p>
  <ul>
   <li>
    You have to decide how you want to <mark>encode</mark> the external version.
   </li>
   <li>You cannot use the input operator (without overloading).</li>
   <li>
    Because the external representation is text, you can't use a <tt>switch</tt
    >, but have to use sequential
    <tt>if</tt>..<tt>else</tt>
    <tt>if</tt>..<tt>else</tt>
    statements instead.
   </li>
  </ul>
  <pre
   class="language-cpp"><code>Month m1;
cin &gt;&gt; m1; // does not compile</code></pre>

  <p>
   Here's a version of a <tt>read_month</tt> function which reads from input, using
   the first three letters of the input to convert it to a <tt>Month</tt>:
  </p>
  <pre
   class="language-cpp"><code>istream&amp; read_month(Month&amp; m, istream&amp; in = cin)
&lbrace;
    string encoded;
    in &gt;&gt; encoded;
    string subs = encoded.substr(0, 3);   // first three characters
    for (char&amp; c : subs) c = to_lower(c); // lowercase
    
    if (subs == "jan")      m = Month::jan;
    else if (subs == "feb") m = Month::feb;
    else if (subs == "mar") m = Month::mar;
    . . .
    else in.setstate(ios::failbit);   // set failbit
    return in;
&rbrace;</code></pre>
  <p>You'd use the function like this:</p>
  <pre
   class="language-cpp"><code>cout &lt;&lt; "Enter a month: ";
Month m;
if (read_month(m)) &lbrace;
    cout &lt;&lt; "The month is " &lt;&lt; to_string(m) &lt;&lt; endl;
&rbrace;
else &lbrace;
    cout &lt;&lt; "You entered an invalid value." &lt;&lt; endl;
&rbrace;</code></pre>
 </div>
</Layout>
