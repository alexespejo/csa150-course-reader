---
import Layout from "../../../layouts/Layout.astro";
import Header from "../../../components/Header.astro";
const { useLayout } = Astro.props;
---

<Layout
 title="Week 7"
 dir="w07/"
 displayLayout={useLayout}
 chapterSubSections={[]}
>
 <Header id="E">
  <h1>Member Access</h1>
 </Header><div>
  <p class="firstLine">
   You select the individual members of a structure variable by using the
   <mark>member access operator</mark>, or, more informally, the <strong
    >dot operator</strong
   >, like this:
  </p>
  <pre
   class="language-cpp"><code>cout &lt;&lt; birthday.month &lt;&lt; endl;</code></pre>
  <p>
   Here, <tt>birthday</tt> is the structure variable and
   <tt>month</tt> is the data member it contains. Such
   <mark>selection expressions are assignable</mark>, so you can modify the
   components of <tt>birthday</tt> like this:
  </p>
  <pre
   class="language-cpp"><code>Date birthday;
birthday.month = "February";
birthday.day = 2;
birthday.year = 1950;</code></pre>
  <p>
   Since this is assignment, and <mark>not</mark>
   <mark>initialization</mark>, this must appear inside a function.
  </p>
  <p>With a <mark>nested structure</mark>:</p>
  <ul>
   <li>You can access the nested member in its entirety (aggregate)</li>
   <li>
    You can access the data members of the nested structure, using another level
    of "dots". Here is an example.
   </li>
   <pre
    class="language-cpp"><code>Date groundhog = &lbrace;"February", 2, 1950&rbrace;;
Person steve;
steve.name = "Stephen";
steve.birthday = groundhog;         // aggregate assignment, or ...
steve.birthday.year = 2023;         // nested dots</code></pre>
  </ul>
 </div>
</Layout>
