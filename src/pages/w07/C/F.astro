---
import Layout from "../../../layouts/Layout.astro";
import Header from "../../../components/Header.astro";
const { useLayout } = Astro.props;
---

<Layout
 title="Week 7"
 dir="w07/"
 displayLayout={useLayout}
 chapterSubSections={[]}
>
 <Header id="F">
  <h1>Aggregate &amp; Unsupported Operations</h1>
 </Header><div>
  <p class="firstLine">
   Structure types in the C programming language
   <strong>cannot</strong> automatically perform all of the common operations that
   the built-in types can, so we say that such derived types are <mark
    >second-class types</mark
   >. Operations that <strong>work with the structure as a whole</strong>
   are called <mark>aggregate</mark> operations.
  </p>
  <p>
   Four <mark>built-in aggregate operations</mark> work in both C and in C++: assignment,
   initialization, passing parameters and returning structures. Given a <tt
    >Date</tt
   > variable:
  </p>
  <ul>
   <li>
    You can <strong>assign</strong> it to another variable, just as if it were an
    <tt>int</tt> or <tt>double</tt>.
   </li>
   <li>You can use it to <strong>initialize</strong> another variable.</li>
   <li>You can <strong>pass it to a function</strong> as an argument.</li>
   <li>You can <strong>return it</strong> from a function.</li>
  </ul>
  <p>
   All of these are closely related to assignment. Here are some things <mark
    >you can and cannot do</mark
   > with structure variables:
  </p>
  <pre
   class="language-cpp"><code>Date d1&lbrace;"February", 2, 1950&rbrace;, d2;
d2 = d1;                // assignment OK
Date d3&lbrace;d2&rbrace;;            // initialize OK
if (d1 == d2)           // NO aggregate comparison
    cout &lt;&lt; d1 &lt;&lt; endl; // NO aggregate I/O
d1++;                   // NO built-in arithmetic</code></pre>
  <p>As you can see:</p>
  <ul>
   <li>
    You <mark>cannot compare two structures</mark> using either equality or the relational
    operators. You must compare the individual data members instead.
   </li>
   <li>
    You <mark>cannot automatically display</mark> a structure variable using <tt
     >cout</tt
    >; you must access and print the individual data members.
   </li>
   <li>There is no <mark>built-in arithmetic</mark>.</li>
  </ul>
  <p>
   It is, however, easy to turn each of these operations into an aggregate
   operation by simply <mark>writing some functions</mark>. We'll look at those
   shortly.
  </p>
 </div>
</Layout>
