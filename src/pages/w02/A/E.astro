---
import Layout from "../../../layouts/Layout.astro";
import Header from "../../../components/Header.astro";
const { useLayout } = Astro.props;
---

<Layout
 title="Week 2"
 dir="w02/"
 displayLayout={useLayout}
 chapterSubSections={[]}
>
 <Header id="E">Type Casts</Header>
 <div>
  <h1>Type Casts</h1>
  <p class="firstLine">
   You can specify an <mark>explicit conversion</mark>
   by using a <strong>type cast</strong>, like this:
  </p>
  <pre
   class="line-numbers language-cpp"><code>int numerator = 5, denominator = 7;
double bad = numerator / denominator;   // OOPS!!! now 0
double good = static_cast&lt;double&gt;(numerator) / denominator;</code></pre>
  <ol>
   <li><tt>numerator</tt> and <tt>denominator</tt> are both integers</li>
   <li>
    <tt>bad</tt> is a <tt>double</tt>, but the calculation uses
    <tt>int</tt>, so bad ends up with <tt>0.0</tt>.
   </li>
   <li>
    <tt>static_cast</tt> creates a temporary, anonymous <tt>double</tt>
    to "stand in" for <tt>numerator</tt> during the calculation, so floating-point
    (true) division is performed instead of integer division.
   </li>
  </ol>
  <p>
   There are four <mark>named casts</mark>. We'll meet others later. Bjarne
   Stroustrup, (the inventor of C++) has listed several reasons why you should
   use these new-style casts on his
   <a
    target="_blank"
    href="http://www.stroustrup.com/bs_faq2.html#static-cast"
    title="Why you should use new-style casts.">C++ FAQ</a
   >.
   <p></p>
  </p>
 </div>
</Layout>
