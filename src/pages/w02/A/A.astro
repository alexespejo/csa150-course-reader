---
import Layout from "../../../layouts/Layout.astro";
import Header from "../../../components/Header.astro";
import imageIntDivision from "../images/intdivision.gif";
const { useLayout } = Astro.props;
---

<Layout
 title="Week 2"
 dir="w02/"
 displayLayout={useLayout}
 chapterSubSections={[]}
>
 <Header id="A">Integer Division &amp; Remainders</Header>
 <div>
  <p class="firstLine">
   Most of you are familiar with expressions involving addition, subtraction,
   multiplication and division from Java or Python. However, when it comes to
   C++ youâ€™ll find a few surprises. We want to start this lesson by discussing
   the differences between <mark>integer division</mark> and normal or <mark
    >true division</mark
   >.
  </p>
  <img
   src={imageIntDivision}
   class="right width-40"
   alt="A grammar school student doing long division on a whiteboard."
  />
  <p>
   Integer division works like grade-school <b>long division</b>. You draw a
   little "house" on the board and put the "maximum occupancy" (called the <mark
    >dividend</mark
   >) inside the house. That is the number you want to divide.
  </p>
  <p>
   Next, you draw the number you want to divide by (the
   <mark>divisor</mark>), standing at the front door of the house like a group
   of visitors. In the picture, you can see we have a dividend of <tt>253</tt> and
   a divisor of <tt>5</tt>.
  </p>
  <p>
   Then you ask, "how many groups" (of 5 in this case), could fit inside the
   house and place that number on the roof. This is the <mark>quotient</mark>.
  </p>
  <p>
   You multiply the quotient by the divisor, place the result beneath the
   dividend, and subtract. The <strong>remainder</strong> is anything left over (down
   in the "basement"), <strong>8</strong> in the example the student is solving on
   the board (on the left), and <strong>3</strong> in the example on the callout.
  </p>
  <p>
   In C++ <mark>integer division</mark>, the quotient is calculated, and then <mark
    >truncated</mark
   > (not rounded). The remainder is
   <strong>discarded</strong>. With <mark>true division</mark>,
   <tt>15/4</tt> would be <tt>3.75</tt> but with integer division, it's just <tt
    >3</tt
   >, not <tt>4</tt> as it would be if the
   <tt>3.75</tt> were rounded.
  </p>
  <h2>The Remainder Operator</h2>
  <p>
   The <tt>%</tt> or <strong>remainder operator</strong>
   (sometimes called the <strong>modulus</strong> operator) does exactly the same
   thing, except, instead of returning the quotient portion from the roof, it
   <strong>returns the remainder</strong> from the basement.
  </p>
  <p>Here are some examples:</p>
  <pre
   class="language-cpp"><code>cout &lt;&lt; 1 / 3 &lt;&lt; endl;        // 0 int division
cout &lt;&lt; 1.0 / 3 &lt;&lt; endl;      // .3333 true division
cout &lt;&lt; 12 % 5 &lt;&lt; endl;       // 2 left over after 12 / 5</code></pre>
 </div>
</Layout>
