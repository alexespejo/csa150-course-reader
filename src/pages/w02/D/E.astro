---
import Layout from "../../../layouts/Layout.astro";
import Header from "../../../components/Header.astro";
const { useLayout } = Astro.props;
---

<Layout
 title="Week 2"
 dir="w02/"
 displayLayout={useLayout}
 chapterSubSections={[]}
>
 <Header id="E">Member Functions</Header>
 <div>
  <h1>Member Functions</h1>
  <p class="firstLine">
   Because <tt>string</tt> is a library or class type, it also has <strong
    >methods</strong
   >, just like the Java
   <tt>String</tt> class has methods such as <tt>length()</tt>,
   <tt>toUpper()</tt> and <tt>charAt()</tt>. In C++ instead of calling these <mark
    >methods</mark
   >, we use the term
   <mark>member function</mark> instead. Let's look at the difference between a regular
   (or "free") function in C++, and a member function.
  </p>
  <p>
   In the <tt>string</tt> class, you've already seen the
   <tt>getline()</tt> function. The prototype for <tt>getline()</tt> looks like this:
  </p>
  <pre
   class="language-cpp"><code>istream&amp; getline(istream&amp;&gt; in, string&amp; str);</code></pre>
  <p>
   The function has <strong>two parameters</strong>: the input stream to read
   from, and the <tt>string</tt> object to modify; it returns a reference to its
   input stream (which may be ignored).
  </p>
  <pre class="language-cpp"><code>string line;
getline(cin, line);</code></pre>
  <p>
   Although <tt>getline()</tt> is declared inside the <tt>&lt;string&gt;</tt>
   header, it <mark>is not</mark> part of the <tt>string class</tt>; it is just
   a regular function. <mark>Member functions</mark>, in contrast,
   <mark>are part of a class</mark>, and, as in Java, they are called by using a
   special syntax:
  </p>
  <pre class="language-cpp"><code>receiver.request(arguments);</code></pre>
  <p>
   In this case, <i>receiver</i> is an <strong>object</strong>, and
   <i>request</i> is a member function defined in that class. When compiled, the
   address of the <i>receiver</i> object is passed to the member function as an
   <strong>invisible</strong> or <mark>implicit</mark> first parameter. Inside the
   member function, that implicit parameter is accessed using the keyword <tt
    >this</tt
   >, in a manner similar to Java.
  </p>
 </div>
</Layout>
