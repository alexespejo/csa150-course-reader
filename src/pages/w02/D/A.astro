---
import Layout from "../../../layouts/Layout.astro";
import Header from "../../../components/Header.astro";
import imageStrings from "../images/strings.png";
const { useLayout } = Astro.props;
---

<Layout
 title="Week 2"
 dir="w02/"
 displayLayout={useLayout}
 chapterSubSections={[]}
>
 <Header id="A">Creating <i>string</i> Objects</Header>
 <div>
  <img
   src={imageStrings}
   class="right width-128"
   alt="A decorative image of a fist pulling strings.>
  <p class="
   firstLine'
  />As in Java, <tt>string</tt>
  <mark>is a library class type;</mark> it is not part of the C++ language. As in
  most programming languages, the C++ <tt>string</tt> type is a sequence of characters,
  which can be treated as a single unit. The class is declared in the <tt
   >&lt;string&gt;</tt
  >
  header, which you <mark>must</mark> include, (unlike Java).
 </div>
 <p>
  There are several different ways you to
  <mark>create</mark>
  <tt>string</tt>objects:
 </p>
 <pre
  class="language-cpp line-numbers"><code>string s1;                   // empty string
string s2 lbrace;"Hello"&rbrace;;// explicitly initialized
string s3 = "World";         // Legacy C/Java style
string s4 lbrace;s3&rbrace;;               // a copy of s3
string s5 lbrace;'c', 'a', 't'&rbrace;;    // a sequence of chars
string s6 lbrace;R"("bob")"&rbrace;;       // a raw string
string s7(20, '-');          // 20 dashes</code></pre>
 <p>Let's look the most useful ones.</p>
 <ol>
  <li>
   In Java, <tt>s1</tt> is a <i>null</i> string. (That is, it a <tt>String</tt>
   variable which contains the special value <tt>null</tt>, which cannot be
   used. Unlike Java, in C++, it is the <mark>empty string</mark>.
  </li>
  <li>
   <tt>s2</tt>
   <mark>explicitly</mark> converts a <strong>string literal</strong> (character
   array) to a C++ <tt>string</tt> object. String literals, such as <tt
    >"hello"</tt
   > are <mark>not</mark>
   <tt>string</tt> objects, as they are in Java. Instead, they are
   <mark>pointers</mark> to a single character at the beginning of the literal.
  </li>
  <li>
   <tt>s3</tt>, the syntax you are probably most comfortable with,
   <mark>implicitly</mark> converts a C-string literal to a C++ <tt>string</tt> object.
  </li>
  <li>
   Produces a <tt>string</tt> that is <mark>a copy</mark> of the
   <tt>string</tt>
   <tt>s3</tt>.
  </li>
  <li>
   A <tt>string</tt> initialized with <mark>a sequence</mark> of
   <tt>char</tt> literals.
  </li>
  <li>
   Produces a <tt>string</tt> object from a <mark>raw string literal</mark>. Raw
   string literals begin with <tt>R"(</tt>
   and end with <tt>)"</tt>. Inside you may store
   <strong>any</strong> character without using escape sequences.
  </li>
  <li>
   Produces a <tt>string</tt> made of <tt>20</tt>
   <tt>'-'</tt>
   characters. Note that <tt>char</tt> literals use single quotes, just as they do
   in Java. Python does not use the <tt>char</tt> type. Note that <mark
    >you must use parentheses</mark
   > for this constructor, not braces.
  </li>
 </ol>
 <p>
  The <tt>{"{}"}</tt> and the <tt>()</tt> may often be used interchangably. However,
  for <tt>s5</tt>, you <mark>must</mark>
  use the braces <tt>{"{}"}</tt>, and for <tt>s7</tt>
  you <mark>must</mark> use parentheses <tt>()</tt>. In C++98, you must use
  parentheses, not braces, and <tt>s5</tt>
  and <tt>s6</tt> will not work at all. These constructors, and raw strings were
  not added until C++11.
 </p>
 <p>
  C++14 added C++ string literals, which is a regular C-string literal, with an <tt
   >s</tt
  > suffix, like <tt>"hello"s</tt>. This is no longer a pointer, but a
  full-fledged C++ <tt>string</tt>
  object, as in Java.
 </p>
 <p></p>
</Layout>
