---
import Layout from "../../../layouts/Layout.astro";
import Header from "../../../components/Header.astro";
import imageJavaAssignment from "../images/java-assignment.png";
const { useLayout } = Astro.props;
---

<Layout
 title="Week 2"
 dir="w02/"
 displayLayout={useLayout}
 chapterSubSections={[]}
>
 <Header id="D">Mutability &amp; Value Assignment</Header>
 <div>
  <p class="firstLine">
   In C++ <tt>string</tt> objects <mark>are mutable</mark>;
   <strong>you may</strong> change the individual characters inside a
   <tt>string</tt> variable. Compare this with Java or Python, where string objects
   are immutable.
  </p>
  <pre
   class="language-cpp"><code>string str = "hello";
str[0] = 'j';
cout &lt;&lt; str &lt;&lt; endl;    // prints jello</code></pre>
  <img
   src={imageJavaAssignment}
   class="right"
   alt="Illustration of Java assignment."
  />
  <p>
   In Java and in Python, assignment of object types means that the variables
   are copied, but that the objects are not. Here' a piece of Java code which
   creates a <tt>String</tt>
   <tt>s1</tt> and then creates a second, <tt>s2</tt> initialized with <tt
    >s1</tt
   >. The illustration shows what this looks like in memory.
  </p>
  <pre
   class="language-cpp"><code>String s1 = "hello";
String s2 = s1;</code></pre>
  <img
   src="../images/cpp-assignment.png"
   class="right"
   alt="Illustration of C++ assignment."
  />
  <p>
   C++ works differently. In Java and Python, variables refer to objects; in C++
   variables contain objects. In C++, assigning one
   <tt>string</tt> to another, <strong>copies the underlying characters</strong>
   into an entirely new <tt>string</tt>, in the same way that assigning one <tt
    >int</tt
   > variable to another creates a new, independent variable and value.
  </p> Languages (like C++) that work like this have
  <mark>value semantics</mark>. In C++, the statement
 </div>
 <pre class="language-cpp"><code>str1 = str2</code></pre>
 <p>
  overwrites any previous contents of <tt>str1</tt> with a <strong>copy</strong>
  of the characters contained in <tt>str2</tt>. The variables
  <tt>str1</tt> and <tt>str2</tt> therefore remain <strong>independent</strong>,
  which means that changing the characters in <tt>str1</tt> does not affect <tt
   >str2</tt
  >.
 </p>
</Layout>
