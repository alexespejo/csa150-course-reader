---
import Layout from "../../../layouts/Layout.astro";
import Header from "../../../components/Header.astro";
import imageBool from "../images/bool.jpg";
const { useLayout } = Astro.props;
---

<Layout
 title="Week 2"
 dir="w02/"
 displayLayout={useLayout}
 chapterSubSections={[]}
>
 <Header id="C">The bool Data Type</Header>
 <div>
  <img src={imageBool} class="inlineCenter" alt="George Bool" />
  <p class="firstLine">
   The <i>if</i> statement tests a
   <mark>condition</mark>, an expression whose value is either <tt>true</tt> or <tt
    >false</tt
   >. This is called a <strong>Boolean</strong>
   expression, after the mathematician
   <a target="_blank" href="https://en.wikipedia.org/wiki/George_Boole"
    >George Boole</a
   >, who developed the mathematical theories which underly much of Computer
   Science. In C++, the built-in Boolean data type is called <tt
    ><mark>bool</mark></tt
   >.
  </p>
  <p>You can create <tt>bool</tt> variables, just like other variables:</p>
  <pre class="language-cpp"><code>bool a = true;
bool b = false;</code></pre>
  <h2>A Few Pitfalls</h2>
  <p>
   In Java, the <tt>bool</tt> type is called <tt>boolean</tt>, while in Python,
   the values are capitalized, as <tt>True</tt> and
   <tt>False</tt>. However, those are minor differences. The real pitfalls with
   the C++ <tt>bool</tt> type is that, for historical reasons, the <tt>bool</tt>
   type <mark>implicitly converts</mark>
   to many other types. This is not true in Java or Python, so it may be a source
   of confusion for you.
  </p>
  <p>
   When the C++ compiler needs a Boolean value (such as in a an
   <tt>if</tt> statement, or a <tt>while</tt> condition), and it finds a value of
   another numeric, pointer or class type then:
  </p>
  <ol>
   <li>
    If the value can be converted to <tt>0</tt> then it is treated as <tt
     >false</tt
    >.
   </li>
   <li>Otherwise, the value is treated as <tt>true</tt>.</li>
  </ol>
  <pre
   class="language-cpp"><code>bool a = 5;           // 5 converted to true
int b = a;            // a converted to 1
bool c = 0;           // 0 converted to false
bool d = "hello";     // "hello" (a pointer) converted to true;
cout &lt;&lt; d &lt;&lt; endl;    // prints 1 (NOT true)</code></pre>
  <p>
   You'll notice that printing the <tt>bool</tt> variable
   <tt>d</tt> in this example does not print
   <tt>true</tt> or <tt>false</tt> as it would in Java and Python, but <tt>1</tt
   > and <tt>0</tt>. You can change that by using the
   <tt>boolalpha</tt> manipulator, like this:
  </p>
  <pre
   class="language-cpp"><code>cout &lt;&lt; boolalpha &lt;&lt; d &lt;&lt; endl;</code></pre>

  <p>
   We'll revisit the effects of this behavior as we go on. You can
   <a target="_blank" href="https://onlinegdb.com/F1ho1yeKk">run this example</a
   > in an online IDE by clicking the link in this sentence.
  </p>
 </div>
</Layout>
