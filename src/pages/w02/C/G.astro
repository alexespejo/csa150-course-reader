---
import Layout from "../../../layouts/Layout.astro";
import Header from "../../../components/Header.astro";
import imageTaxes from "../images/sequential-if.png";
import imageMartioshka from "../images/maritroshka.png";
const { useLayout } = Astro.props;
---

<Layout
 title="Week 2"
 dir="w02/"
 displayLayout={useLayout}
 chapterSubSections={[]}
>
 <Header id="G">Nested <i>if</i> Statements</Header>
 <div>
  <img
   src={imageMartioshka}
   class="w-40"
   alt="A decorative image of nesting dolls."
  />
  <p class="firstLine">
   Another way to code multiple-alternative decisions is with <mark
    >nesting</mark
   >. Nesting means that one <tt>if</tt> statement is <strong>embedded</strong> or
   <strong>nested</strong> inside the body of another
   <tt>if</tt> statement, much like the traditional Russian nesting dolls.
  </p>
  <p>
   Use nesting when you have<mark> different levels of decisions</mark>. For
   instance, if you're one of those fortunate folks making more than a hundred
   thousand dollars a year, you calculate your taxes using the following
   formula, instead of using the tax tables:
   <img
    src={imageTaxes}
    class="inlineCenter width-80"
    alt="Tax tables showing different rates."
   />
  </p>
  <p>
   First locate the schedule for your filing status (Single), then find your
   income bracket. Use a set of
   <strong>sequential</strong>
   <tt>if</tt> statements to determine <strong>which set</strong> of calculations
   to use. Then, <mark>nested inside</mark> the body of each portion test the income
   levels, like this:
  </p>
  <pre
   class="language-cpp"><code>if (status == kSingle) // calculate single
&lbrace;
  if (income &lt;= kSingleBracket_1)
    tax = income * kSingleRate_1 - kSingleEx_1;
  else if (income &lt;= kSingleBracket_2)
    tax = income * kSingleRate_2 - kSingleEx_2;
  else
    tax = income * kSingleRate_3 - kSingleEx-3;
&rbrace;
else if (status == kMarriedJoint)  // married filing jointly
...</code></pre>
 </div>
</Layout>
