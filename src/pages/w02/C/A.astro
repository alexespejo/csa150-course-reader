---
import Layout from "../../../layouts/Layout.astro";
import Header from "../../../components/Header.astro";
import imageRoswell from "../images/roswell.png";
const { useLayout } = Astro.props;
---

<Layout
 title="Week 2"
 dir="w02/"
 displayLayout={useLayout}
 chapterSubSections={[]}
>
 <Header id="A">Making Decisions</Header>
 <div>
  <img
   src={imageRoswell}
   style="margin-top:-1em;"
   class="right width-30"
   alt="Decorative image of Roswell N.M. highway sign."
  />
  <p class="firstLine">
   There are two kinds of control statements:
   <mark>selection</mark> (decision) and <mark>iteration</mark> (loops). Selection
   is also called <mark>branching</mark>, because any time you run the program
   you may take a different path through the code. C++ has the same five
   branching or selection statements that you met in Java.
  </p>
  <p>
   Let's start with the <tt>if</tt> statement which is the simplest conditional statement
   in C++.
  </p>
  <pre
   class="language-cpp"><code>if (<i>condition</i>) &lbrace; statements &rbrace;
if (<i>condition</i>) {<i>statements</i>} else {<i>statements</i>}</code></pre>
  <p>
   Use the first form when you want to carry out an action when <i>condition</i>
   is <b>true</b>, but do nothing when it is <b>false</b>. This is known as a "<mark
    >guarded action</mark
   >" pattern.
  </p>
  <p>
   Use the second form choose between <mark>two mutually-exclusive</mark>
   actions. This is the <strong>either-or</strong> version of the
   <tt>if</tt> statement; the "<mark>alternative action</mark>" idiom or
   pattern.
  </p>
  <p>
   Here's an alternative-action example which tells if an integer <tt>n</tt> is even
   or odd.
  </p>
  <pre
   class="language-cpp"><code>cout &lt;&lt; "The number " &lt;&lt; n &lt;&lt; " is ";
if (nt % 2 == 0)
&lbrace;
    cout &lt;&lt; "even." &lt;&lt; endl;
&rbrace;
else
&lbrace;
    cout &lt;&lt; "odd." &lt;&lt; endl;
&rbrace;</code></pre>
 </div>
</Layout>
