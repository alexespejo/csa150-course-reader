---
import Layout from "../../../layouts/Layout.astro";
import Header from "../../../components/Header.astro";
const { useLayout } = Astro.props;
---

<Layout
 title="Week 2"
 dir="w02/"
 displayLayout={useLayout}
 chapterSubSections={[]}
>
 <Header id="A">String Members</Header>
 <div>
  <h1>String Members</h1>
  <p class="firstLine">
   Below are the member functions <strong>you should memorize</strong>:
  </p>
  <table class="options">
   <tbody>
    <tr>
     <th colspan="2">String members</th>
    </tr>
    <tr>
     <td><tt>size</tt></td>
     <td class="desc"
      >the number of characters in the <tt>string</tt>
      (may also use <tt>length</tt>)</td
     >
    </tr>
    <tr>
     <td><tt>empty</tt></td>
     <td class="desc">true if the <tt>string</tt> contains no characters</td>
    </tr>
    <tr>
     <td><tt>at</tt></td>
     <td class="desc"
      >an individual character at a particular position (may also use <tt>[]</tt
      >)</td
     >
    </tr>
    <tr>
     <td><tt>front</tt>, <tt>back</tt></td>
     <td class="desc">the character at the front, and at the back (C++11)</td>
    </tr>
    <tr>
     <td><tt>substr</tt></td>
     <td class="desc"
      >a new <tt>string</tt> created from a portion of an existing <tt
       >string</tt
      ></td
     >
    </tr>
    <tr>
     <td><tt>find</tt>, <tt>rfind</tt></td>
     <td class="desc"
      >index of the substring searched for (from front or back)
     </td>
    </tr>
   </tbody>
  </table>
  <p>
   You can
   <a
    target="_blank"
    href="https://en.cppreference.com/w/cpp/string/basic_string"
   >
    look up the rest</a
   >.
  </p>
  <h2>The <em>size</em> Member Function</h2>
  <p>
   <tt>s.size()</tt> returns the <strong>number of characters</strong>
   in the <tt>string</tt>
   <tt>s</tt>. For historical reasons, you can also use <tt>length()</tt>, but
   all of the other collections in the library use <tt>size()</tt>, so you
   should probably get used to using that. (Plus, it's less typing &#128516;).
  </p>
  <p>
   The <tt>size()</tt> member function returns an <mark>unsigned integer</mark>,
   not an <tt>int</tt> as it does in Java, which may be defined differently on different
   platforms.
  </p>
  <ul>
   <li>
    On an embedded platform, with little memory,
    <tt>size()</tt> could return a 16-bit <tt>unsigned</tt>
    <tt>short</tt>.
   </li>
   <li>
    More commonly, strings can be as big as 4 billion characters, so an <tt
     >unsigned</tt
    >
    <tt>int</tt> is often large enough.
   </li>
   <li>
    However, you canâ€™t assume that is true. I recently recompiled some older
    code and discovered several places where I had assumed that <tt>size()</tt> returned
    an <tt>unsigned</tt>
    <tt>int</tt>, but the platform I was on used a 64-bit <tt>unsigned</tt>
    <tt>long</tt> instead.
   </li>
  </ul>
  <p>
   This seems complex, since you don't want to re-edit your code each time you
   move to a new compiler. Here are three different ways to store the value
   returned from calling <tt>size()</tt>
   that work regardless of the platform:
  </p>
  <pre
   class="language-cpp"><code>string str &lbrace; ... &rbrace;  // string of any size
string::size_type len1 = str.size();
auto len2 = str.size();
size_t len3 = str.size();</code></pre>
  <ol>
   <li>
    To be slavishly, pedantically correct, use <tt>string::size_type</tt>.
   </li>
   <li>
    Use <tt>auto</tt> which <mark>infers</mark> the type from the initializer. (You
    must use <tt>=</tt>, not braces.)
   </li>
   <li>
    Use the type <tt>size_t</tt>. This is the <tt>unsigned</tt> machine type, so
    your code will be adjusted automatically for each platform.
   </li>
  </ol>
  <p>
   I believe that the easiest method is the last, and that's what I'll do in
   this class.
  </p>
 </div>
</Layout>
