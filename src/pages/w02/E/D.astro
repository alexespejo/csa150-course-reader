---
import Layout from "../../../layouts/Layout.astro";
import Header from "../../../components/Header.astro";
const { useLayout } = Astro.props;
---

<Layout
 title="Week 2"
 dir="w02/"
 displayLayout={useLayout}
 chapterSubSections={[]}
>
 <Header id="D">Substrings</Header>
 <div>
  <h1>Substrings</h1>
  <p class="firstLine">
   To create a new string, initialized with only a portion of an existing string
   (called<strong><em> </em></strong><strong>a substring</strong>), use the
   member function named <tt>substr()</tt> which takes two parameters:
  </p>
  <ul>
   <li>
    the index of the <mark>first character</mark> you want to select
   </li>
   <li>
    the desired <mark>number of characters</mark>.
   </li>
  </ul>
  <p>
   Calling <tt>str.substr(start,</tt>
   <tt>n)</tt> creates <mark
    >a new
    <tt>string</tt></mark
   > by extracting <tt>n</tt> characters from <tt>str</tt> starting at the index
   position specified by <tt>start</tt>. For example, if <tt>str</tt>
   contains the <tt>string</tt>
   <tt>"hello,<tt> </tt>world"</tt>, then the following code prints <tt
    >"ell"</tt
   >.
  </p>
  <pre
   class="language-cpp"><code>string str{"hello, world"};
cout &lt;&lt; str.substr(1, 3) &lt;&lt; endl;</code></pre>
  <p>
   The <code>string</code> begins at <tt>0</tt>, so the character at index <tt
    >1</tt
   > is the character <tt>'e'</tt>.
  </p>
  <div class="highlight alert">
   <svg
    xmlns="http://www.w3.org/2000/svg"
    class="stroke-current shrink-0 h-6 w-6"
    fill="none"
    viewBox="0 0 24 24"
    ><path
     stroke-linecap="round"
     stroke-linejoin="round"
     stroke-width="2"
     d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z"
    ></path></svg
   >
   <p class="inline-block">
    Be careful with the <tt>substr()</tt> function, when switching between Java and
    C++. In Java, the second parameter to its
    <tt>substring()</tt> method is the ending index; in C++, though, it is the number
    of characters in the returned substring. Forgetting this can lead to hard-to-find
    bugs (and crashes).
   </p>
  </div>
  <p>
   The second argument in <tt>substr()</tt>
   <mark>optional</mark>; if missing, <tt>substr()</tt> returns the substring that
   starts at the index and continues to the end. For instance,
  </p>
  &nbsp;&nbsp;&nbsp;<code class="language-cpp"
   >cout &lt;&lt; str.substr(7) &lt;&lt; endl;</code
  >
  <p>returns the <tt>string</tt> <tt>"world"</tt>. While this line</p>
  &nbsp;&nbsp;&nbsp;<code class="language-cpp"
   >cout &lt;&lt; str.substr(str.size() / 2) &lt;&lt; endl;</code
  >
  <p>
   uses <tt>substr()</tt> to print the second half of <tt>str</tt>, which
   includes the middle character if the size of <tt>str</tt> is odd:
  </p>
  <div class="highlight alert info">
   <svg
    xmlns="http://www.w3.org/2000/svg"
    fill="none"
    viewBox="0 0 24 24"
    class="stroke-current shrink-0 w-6 h-6"
    ><path
     stroke-linecap="round"
     stroke-linejoin="round"
     stroke-width="2"
     d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path></svg
   >

   <p class="inline-block">
    When using the <tt>substr(start,</tt>
    <tt>end)</tt> version of
    <tt>substr()</tt>, if <tt>n</tt> is supplied but fewer than <tt>n</tt> characters
    follow the starting position,
    <tt>substr()</tt> returns characters only up to the end of the original <tt
     >string</tt
    >, instead of causing a runtime error. If, however, <tt>start</tt> is beyond
    the length of the
    <tt>string</tt>, <strong>you will</strong> get an error. If <tt>start</tt> is
    equal to the length of the <tt>string</tt>, then <tt>substr()</tt> returns the
    empty string.
   </p>
  </div>
 </div>
</Layout>
