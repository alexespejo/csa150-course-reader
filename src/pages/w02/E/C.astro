---
import Layout from "../../../layouts/Layout.astro";
import Header from "../../../components/Header.astro";
import imageStringLayout from "../images/string-layout.png";
const { useLayout } = Astro.props;
---

<Layout
 title="Week 2"
 dir="w02/"
 displayLayout={useLayout}
 chapterSubSections={[]}
>
 <Header id="C">Selecting Characters</Header><div>
  <p class="firstLine">
   Positions in a string are <strong>subscripted</strong>
   (or indexed) starting at <tt>0</tt>. The characters in the
   <tt>string</tt> "<i>hello, world</i>" are index like this:
   <img
    src={imageStringLayout}
    class="inlineCenter"
    alt="The memory layout of the string hello, world."
   />
  </p>
  <p>
   The numbers are alled the <mark>index</mark> or <mark>subscript</mark>; they
   must be positive (unlike Python where subscripts can be negative). Indexes
   start at <tt>0</tt> because it represents how many steps you need to travel from
   the beginning of the <tt>string</tt>
   to get to the element you are interested in. To retrieve the
   <tt>'e'</tt>, you have to travel one character from the beginning, so its
   subscript is <tt>1</tt>.
  </p>
  <p>
   The <tt>&lt;string&gt;</tt> library has four ways to select characters from a
   non-empty string:
  </p>
  <ul>
   <li>
    Use the <mark>subscript operator</mark> like this: <tt>cout</tt>
    <tt>&lt;&lt;</tt>
    <tt>str[0];</tt>
   </li>
   <li>
    Use the <mark>member function</mark>
    <tt>at()</tt> like this: <tt>cout</tt>
    <tt>&lt;&lt;</tt>
    <tt>str.at(0);</tt>
   </li>
   <li>
    Use the members <mark><tt>front()</tt></mark> and
    <tt><mark>back()</mark></tt> in C++ 11+: <tt>cout</tt>
    <tt>&lt;&lt;</tt>
    <tt>str.front();</tt>
   </li>
  </ul>
  <p>
   If the <tt>string</tt> variable <tt>str</tt> contains
   <tt>"hello,</tt>
   <tt>world"</tt>, all of these expressions refer to the character <tt>'h'</tt>
   at the beginning of the <tt>string</tt>.
  </p>
  <p>
   The <tt>at()</tt> member function makes sure the index is
   <strong> in range</strong>; the subscript operator does not. Using the
   subscript operator when a subscript is out of range <mark>is undefined</mark
   >. You should generally use
   <tt>at()</tt> unless you are certain that your indexes are in range.
  </p>
  <p>
   Selecting an individual character in a <tt>string</tt> returns a
   <mark>reference to the character</mark> in the <tt>string</tt>
   <mark>instead of a copy of that character</mark>, as Java's
   <tt>charAt(index)</tt> method does. You <mark>may</mark>
   <strong>assign a new value</strong> to that reference, like this:
  </p>
  <pre
   class="language-cpp"><code>str[0] = 'H';       // or
str.at(0) = 'H';    // works as well</code></pre>
  <p>
   Both lines change the value from <tt>"hello,</tt>
   <tt>world"</tt>
   to <tt>"Hello,</tt>
   <tt>world"</tt>.
  </p>
 </div>
</Layout>
