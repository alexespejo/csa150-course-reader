---
import Layout from "../../../layouts/Layout.astro";
import Header from "../../../components/Header.astro";
const { useLayout } = Astro.props;
---

<Layout
 title="Week 12"
 dir="w12/"
 displayLayout={useLayout}
 chapterSubSections={[]}
>
 <Header id="D">
  <h1>Assign, Copy &amp; Destroy</h1>
 </Header><div>
  <p class="firstLine">
   You may <b>assign one object to another</b>, just as you can assign one <tt
    >int</tt
   > variable to another, even though the data members are <tt>private</tt>. As
   with the built-in types, the result is a <b>copy</b>
   of the data in the original members.
  </p>
  <p>
   With class types, this is carried out by the overloaded
   <mark>assignment operator</mark>.
  </p>
  <pre
   class="language-cpp"><code>Time&amp; operator=(const Time&amp; rhs);</code></pre>
  <p>
   The assignment operator <b>is not used</b>
   when you pass an object by value, or <b>initialize</b> a new object variable with
   another. Instead, the <mark>copy constructor</mark> is called:
  </p>
  <pre class="language-cpp"><code>Time(const Time&amp; rhs);</code></pre>
  <p>
   When an object is destroyed, its <mark>destructor</mark>
   is called. If your class allocates dynamic memory in the constructor, for instance,
   you would free it in the destructor. The destructor looks like the default constructor
   preceded by the <b>tilde</b>:
  </p>
  <pre class="language-cpp"><code>~Time();</code></pre>
  <p>
   C++ automatically writes a <i>synthesized</i> assignment operator, a <i
    >synthesized</i
   > copy constructor, and a <i>synthesized</i> destructor which work for simple
   types such as those in this course. In CS 250 you'll learn how to write your own
   assignment operators, copy constructors, and destructors to create more dynamic
   types.
  </p>
  <p>
   You can <mark>prevent</mark> pass by value or assignment by adding the following
   to the definitions.
  </p>
  <pre
   class="language-cpp"><code>Time&amp; operator=(const Time&amp; rhs) = delete;
Time(const Time&amp; rhs) = delete;</code></pre>
 </div>
</Layout>
