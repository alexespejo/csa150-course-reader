---
import Layout from "../../../layouts/Layout.astro";
import Header from "../../../components/Header.astro";
const { useLayout } = Astro.props;
---

<Layout
 title="Week 12"
 dir="w12/"
 displayLayout={useLayout}
 chapterSubSections={[]}
>
 <Header id="B">
  <h1>What are Objects?</h1>
 </Header><div>
  <p class="firstLine">
   Objects are simply variables of programmer-defined types. Objects can
   represent
   <strong>real things</strong>, like employees or automobile parts or apartment
   buildings; objects can also represent more abstract concepts, such as
   relationships, times, numbers, or black holes.
  </p>
  <p>
   Regardless of what kind of objects you use, you'll want to be able to
   recognize an object when you meet one. That's easy to do, because all objects
   have three properties:
  </p>
  <ul>
   <li><mark>Identity</mark>: who the object is</li>
   <li><mark>State</mark>: the characteristics of the object</li>
   <li><mark>Behavior</mark>: what the object can do</li>
  </ul>
  <h2>Object Identity</h2>
  <p>
   In C and C++, we often use the term <strong>object</strong>
   to refer to a "bucket in memory" that contains <strong>data values</strong> of
   a particular type. In this sense, regular variables are objects:
  </p>
  <pre
   class="language-cpp"><code>int little = -4;
int big = 1795321;
int&amp; tiny = little;</code></pre>
  <p>
   The names little and big are different areas of memory storing integer
   values. Changing little, it won't affect the variable big; the variables have <mark
    >different identities</mark
   >. But, tiny is <mark>not</mark> another variable but a
   <strong>different name</strong>; tiny and little have <mark
    >the same identity</mark
   >; they are different names for the same object.
  </p>
 </div>
</Layout>
