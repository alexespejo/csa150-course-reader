---
import Layout from "../../../layouts/Layout.astro";
import Header from "../../../components/Header.astro";
import imageExample from "../images/examples.gif";
const { useLayout } = Astro.props;
---

<Layout
 title="Week 12"
 dir="w12/"
 displayLayout={useLayout}
 chapterSubSections={[]}
>
 <Header id="F">
  <h1>Encapsulation in the "Real" World</h1>
 </Header><div>
  <p class="firstLine">
   You might find encapsulation a strange idea; why make it <strong
    >harder</strong
   > for your programs to access their data? In fact, out in the real world, all
   of us are familiar with the ideas of encapsulation. Let me give you a few examples.
   <img
    src={imageExample}
    class="inlineCenter"
    alt="Examples of encapsulation."
   />
  </p>
  <ul>
   <li>
    <strong>Today's automobiles</strong>
    are more complex than Henry Ford's original car. Despite this, <strong
     >driving</strong
    > the latest Tesla is similar to, if not simpler than, driving a Model-T. Why,
    because, as cars got more complex, that complexity was <strong
     >hidden</strong
    > behind a <strong>simpler</strong>interface: the ignition (key), steering
    wheel, accelerator and brakes. These internal changes don't require drivers
    to take a new "how to drive" course. The
    <strong>implementation details</strong> are <strong>encapsulated</strong>.
   </li>
   <li>
    <strong>Your computer</strong>
    is another marvel of complexity. Unless you are a hardware tech, though, you
    never open up the system unit and try to operate it by shorting the circuits
    with a paper-clip. Instead, you use the <strong>interface</strong>—the
    mouse, and keyboard— to control the complex working parts that it contains.
   </li>
   <li>
    Finally, think about <strong>your TV</strong>. It's probably at least as
    complex as your car or your computer, but you don't need a license or a
    degree to operate one. Thanks to the magic of encapsulation, exemplified by
    the <strong>remote control</strong>, every child in the country can harness
    that power, although if you are a parent or grandparent, you might wish that
    were not true.
   </li>
  </ul>
  <p>
   Just as with automobiles, computers and TVs, when it comes to programming,
   instead of making things more difficult, encapsulation makes objects safer <strong
    >and</strong
   > easier to use.
  </p>
  <p>
   Encapsulation is one of the pillars underlying OOP or Object-Oriented
   Programming. We'll cover the other two, <strong>inheritance</strong> and <strong
    >polymorphism</strong
   >, next week.
  </p>
 </div>
</Layout>
