---
import Layout from "../../../layouts/Layout.astro";
import Header from "../../../components/Header.astro";
import imageBluePrint from "../images/blueprint.jpg";
const { useLayout } = Astro.props;
---

<Layout
 title="Week 12"
 dir="w12/"
 displayLayout={useLayout}
 chapterSubSections={[]}
>
 <Header id="D">
  <h1>What are Classes?</h1>
 </Header><div>
  <p class="firstLine">
   A class represents the definition—the blueprint if you like—used to create
   objects. Objects are simply variables, created (or
   <strong>instantiated</strong>) from this blueprint.
  </p>
  <p>
   Like a structure, a class describes the
   <strong>attributes of an object</strong>: the kinds of data it stores
   internally. To design a Car class, you specify the physical characteristics
   that car shares: its serial number, body type, color, type of interior,
   engine size, etc.
   <img
    src={imageBluePrint}
    class="inlineCenter"
    alt="Decorative image of a blueprint."
   />
  </p>
  <p>
   Such attributes are stored as the object's
   <strong>data-members</strong> (
   <strong>instance variables</strong> in Java).
  </p>
  <p>
   A class also <strong
    >describes and implements the behaviors of its objects</strong
   >: the kinds of operations that each object in the class can perform. When
   you define a class, you need to specify <mark>what the object can do</mark>,
   providing an explicit list of its possible behaviors.
  </p>
  <p>
   These are specified as <mark>embedded functions</mark>, called <mark
    >member functions</mark
   > in C++; in Java these are called <strong>methods</strong>. Member functions
   contain the
   <strong>interface</strong> (as prototypes in the class definition), and the instructions
   (appearing in the <strong>implementation</strong>) that tells each particular
   object how to complete a particular task.
  </p>
  <p>
   To ask an object to perform some action, <strong>invoke</strong>
   or <strong>call</strong> one of its member functions. To emphasize the fact that
   objects represent fairly self-contained, autonomous units, the process of invoking
   a method is often called <mark>sending a message</mark> to the object.
  </p>
 </div>
</Layout>
