---
import Layout from "../../../layouts/Layout.astro";
import Header from "../../../components/Header.astro";
const { useLayout } = Astro.props;
---

<Layout
 title="Week 12"
 dir="w12/"
 displayLayout={useLayout}
 chapterSubSections={[]}
>
 <Header id="F">
  <h1>The sum Member Function</h1>
 </Header><div>
  <p class="firstLine">
   Let's examine the behavior of
   <tt>this</tt> and <tt>const</tt> a little more closely, by considering the <tt
    >sum()</tt
   > member function from <tt>Time</tt>:
  </p>
  <pre
   class="language-cpp"><code>class Time
&lbrace;
public:
    Time sum(const Time&amp; rhs) const;
    . . .
&rbrace;;</code></pre>
  <p>
   When you add two <tt>Time</tt> objects (<tt>a</tt> + <tt>b</tt>) together
   like this:
  </p>
  <pre class="language-cpp"><code>Time after = a.sum(b);</code></pre>
  <p>
   The <mark>caller</mark> (the implicit parameter) is the left-hand-side of the
   expression <tt>a</tt> + <tt>b</tt>. Thus, the effective implicit prototype
   for the function is similar to this:
  </p>
  <pre
   class="language-cpp"><code>Time sum(const Time* lhs, const Time&amp; rhs);</code></pre>
  <p>
   In the implementation, however, instead of the <mark
    >explicit
    <tt>lhs</tt> parameter</mark
   > shown here, you'd use the keyword
   <tt>this</tt> to access the data members.
  </p>
  <pre
   class="language-cpp"><code>Time Time::sum(const Time&amp; rhs) const
&lbrace;
    auto tMinutes = this-&gt;m_hours * 60 + this-&gt;m_minutes;
    auto dMinutes = rhs.m_hours * 60 + rhs.m_minutes;
    . . .
&rbrace;</code></pre>
  <p>
   If you leave off the keyword <tt>this</tt>, it is assumed. Notice that when
   you implement a <tt>const</tt> member function, you <mark>repeat</mark> the word
   <tt>const</tt> in the implementation.
  </p>
 </div>
</Layout>
