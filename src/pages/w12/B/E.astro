---
import Layout from "../../../layouts/Layout.astro";
import Header from "../../../components/Header.astro";
const { useLayout } = Astro.props;
---

<Layout
 title="Week 12"
 dir="w12/"
 displayLayout={useLayout}
 chapterSubSections={[]}
>
 <Header id="E">
  <h1>The Pointer this</h1>
 </Header><div>
  <p class="firstLine">
   Behind the scenes, the implicit parameter is a
   <mark>pointer to the calling object</mark>. Every member function has an
   implicit parameter. Thus the effective signature for the
   <tt>hours()</tt>
   function is as if you had declared it like this:
  </p>
  <pre
   class="language-cpp"><code>int hours(const Time* const this);</code></pre>
  <p>
   The keyword <tt>this</tt> is the <strong
    >name which is automatically supplied</strong
   >
   for the implicit parameter. The <tt>const</tt> following the
   <tt>Time*</tt> means that the value inside the pointer can never be changed; it
   always points to the block of data containing the object's data members. The <tt
    >const</tt
   > following the member function header means that the implicit parameter is a
   pointer to a <tt>const</tt>
   <tt>Time</tt> object.
  </p>
  <p>
   If you wish, you can <mark>explicitly</mark> use the pointer when calling other
   member functions, or accessing data members:
  </p>
  <pre
   class="language-cpp"><code>int Time::hours() const
&lbrace;
    return this-{'>'}m_hours;
&rbrace;;</code></pre>
  <h2>Initializing this</h2>
  <p>When you <mark>call a member function</mark> like this:</p>
  <pre
   class="language-cpp"><code>Time t;     // a Time object
cout &lt;&lt; t.hours() &lt;&lt; endl;            // value of t::m_hours</code></pre>
  <p>
   That call is <strong>implicitly translated</strong> into code that acts as if
   you had written:
  </p>
  <pre
   class="language-cpp"><code>Time t;     // a Time object
cout &lt;&lt; hours(&amp;t) &lt;&lt; endl;            // value of t::m_hours</code></pre>

  <p>
   Because of this call, the <tt>this</tt> pointer is initialized to the <strong
    >address of the calling object</strong
   >.
  </p>
 </div>
</Layout>
