---
import Layout from "../../../layouts/Layout.astro";
import Header from "../../../components/Header.astro";
const { useLayout } = Astro.props;
---

<Layout
 title="Week 12"
 dir="w12/"
 displayLayout={useLayout}
 chapterSubSections={[]}
>
 <Header id="D">
  <h1>Member Initialization</h1>
 </Header><div>
  <p class="firstLine">
   In C++, <strong>all constructors</strong>must initialize <mark
    >all primitive types</mark
   >. A C++ constructor does not need to initialize any object members (like <tt
    >string</tt
   > or <tt>vector</tt>).
  </p>
  <p>
   This is <mark>exactly the opposite from Java</mark>, where you must
   initialize all of the object instance variables, or they are set to <tt
    >null</tt
   > (an invalid object). In Java, all primitive instance variables are automatically
   initialized to <tt>0</tt> like this:
  </p>
  <pre
   class="language-cpp"><code>public class Point
&lbrace;
    private String name;
    int x, y;
    public Point() &lbrace;&rbrace;
&rbrace;

Point p = new Point(); // x,y-{'>'}0, name is null (invalid)</code></pre>
  <p>
   In C++, if you fail to initialize a primitive data member, then it assumes <strong
    >whatever random value</strong
   > was in memory; if you don't initialize an object, such as <tt>string</tt> or
   <tt>vector</tt>, its default constructor will <mark>automatically</mark> run,
   and it is still a valid object.
  </p>
  <pre
   class="language-cpp"><code>class Point
&lbrace;
public:
    Point() &lbrace;&rbrace;
private:
    string name;
    int x, y;
;&rbrace;

Point p; // x,y-&gt;random, name is valid empty string</code></pre>
  <p>
   Of course, if you provide in-definition initializers for your primitive data
   members, they <mark>will</mark> automatically be initialized, even if your construct
   does not explicitly initialize them.
  </p>
 </div>
</Layout>
