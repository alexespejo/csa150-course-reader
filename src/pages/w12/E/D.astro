---
import Layout from "../../../layouts/Layout.astro";
import Header from "../../../components/Header.astro";
import imageUML from "../images/person.uml.png";
const { useLayout } = Astro.props;
---

<Layout
 title="Week 12"
 dir="w12/"
 displayLayout={useLayout}
 chapterSubSections={[]}
>
 <Header id="D">
  <h1>The UML Diagram</h1>
 </Header><div>
  <img
   src={imageUML}
   class="right"
   alt="The UML diagram for the Person class."
  />
  <p class="firstLine">
   The <tt>Person</tt> class represents people, and <tt>Student</tt> is a new (specialized)
   kind of <tt>Person</tt>. On the right is the <strong>UML</strong> (<mark
    >Unified Modeling Language</mark
   >) class diagram for these classes.
  </p>
  <p>
   <tt>Person</tt> is our base class. Each <tt>Person</tt> has:
  </p>
  <ul>
   <li>
    a single <mark>data member</mark>, <tt>name</tt>, stored as a <tt>string</tt
    >. The <strong>minus sign preceding</strong>
    <tt>name</tt> tells us that the data member will be <tt>private</tt>.
   </li>
   <li>
    one <mark>mutator</mark>, <tt>setName()</tt> that allows you to change the name
    of the <tt>Person</tt>.
   </li>
   <li>
    one <mark>accessor</mark>, <tt>getName()</tt>, which allows you to retrieve
    the value of <tt>name</tt>.
   </li>
   <li>
    The <strong>plus sign</strong> before the member functions indicates that they
    are <tt>public</tt>.
   </li>
   <li>
    In each entry, the word appearing after the colon is the data member type,
    or member function <strong>return type</strong>.
   </li>
  </ul>
  <p>
   The <tt>Student</tt> class is <mark>derived from</mark>
   <tt>Person</tt>.
  </p>
  <ul>
   <li>
    In the UML diagram, the hollow-headed arrow pointing from <tt>Student</tt> to
    <tt>Person</tt>
    says <tt>Student</tt> is <mark>derived from</mark>
    the <tt>Person</tt> class.
   </li>
   <li>
    <tt>Student</tt> has one <tt>private</tt> data member,
    <tt>studentID</tt>, stored as a <tt>long</tt>.
   </li>
   <li>
    The class has a <mark
     ><tt>public</tt>
     constructor</mark
    > that takes two arguments.
   </li>
   <li>
    The class has an accessor to retrieve the value in
    <tt>studentID</tt>.
   </li>
  </ul>
  <p>
   There are no mutators to set or change the ID. While a student might change
   their name (because of marriage, for instance) they can never change their
   student ID.
  </p>
 </div>
</Layout>
