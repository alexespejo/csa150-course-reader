---
import Layout from "../../../layouts/Layout.astro";
import Header from "../../../components/Header.astro";
import imageBikeSeat from "../images/bike-seat.png";
const { useLayout } = Astro.props;
---

<Layout
 title="Week 13"
 dir="w13/"
 displayLayout={useLayout}
 chapterSubSections={[]}
>
 <Header id="F">
  <h1>Composition</h1>
 </Header><div>
  <p class="firstLine">
   Instead of using private inheritance, a better solution is to use <strong
    >composition</strong
   >.
   <mark>Composition creates a new class by combining simpler classes</mark>,
   using instances of the simpler class as the data members. In composition, an
   object is <strong>composed of other objects</strong>, which make up its
   "parts." That's why it's called (informally) a
   <mark>has-a</mark>
   relationship; because we can say that:
   <img src={imageBikeSeat} class="right width-25" alt="A bicycle seat." />
  </p>
  <ul>
   <li>A car <strong>has a</strong> motor, or</li>
   <li>A bicycle <strong>has a</strong> seat, or</li>
   <li>A computer <strong>has a</strong> CPU</li>
  </ul>
  <p>
   Here is some code for a version of the <tt>GiPod</tt>
   which uses composition; note that it needs to
   <strong>explicitly write the prototypes</strong> for any member functions that
   it uses.
  </p>
  <pre
   class="language-cpp"><code>class GiPod
&lbrace;
public:
    void playMusic() const 
   &lbrace; 
        caddy.playMusic();  // forward or delegate
   &rbrace; 
private:
    Cadillac caddy;         // data member
&rbrace;;</code></pre>
 </div>
</Layout>
