---
import Layout from "../../../layouts/Layout.astro";
import Header from "../../../components/Header.astro";
const { useLayout } = Astro.props;
---

<Layout
 title="Week 13"
 dir="w13/"
 displayLayout={useLayout}
 chapterSubSections={[]}
>
 <Header id="E">
  <h1>A Triangle Example</h1>
 </Header><div>
  <p class="firstLine">
   Let's look at an example. To create the
   <tt>Triangle</tt> (or <tt>Circle</tt> or <tt>Square</tt>) classes, using the
   abstract Shape class as the base class, all you need do is:
  </p>
  <pre
   class="language-cpp"><code>class Triangle : public Shape
&lbrace;
public:
    // MUST override; pure virtual in Shape class
    void draw() const;
&rbrace;;

void Triangle::draw() const &lbrace; /* your code here */ &rbrace;</code></pre>
  <ol>
   <li>
    Specify the <tt>Shape</tt> class as the <tt>public</tt>
    base class in the class header.
   </li>
   <li>
    Provide an implementation for <mark>every</mark> pure virtual function (abstract
    method) in the <tt>Shape</tt> class.
   </li>
   <p>
    For <tt>Triangle</tt> that means you <mark>must</mark>
    define a <tt>draw()</tt> member function where indicated by the comments. In
    reality, you'll probably do a lot more; <tt>Circle</tt> might have a <tt
     >radius</tt
    > member, the <tt>Square</tt> class could have members for the size of each <tt
     >side</tt
    >, and the
    <tt>Triangle</tt> class could have members for <tt>base</tt> and <tt
     >height</tt
    >.
   </p>
  </ol>
 </div>
</Layout>
