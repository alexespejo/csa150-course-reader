---
import Layout from "../../../layouts/Layout.astro";
import Header from "../../../components/Header.astro";
const { useLayout } = Astro.props;
---

<Layout
 title="Week 13"
 dir="w13/"
 displayLayout={useLayout}
 chapterSubSections={[]}
>
 <Header id="D">
  <h1>Using an Abstract Class</h1>
 </Header><div>
  <p class="firstLine">
   It is <mark>illegal to create an instance of an abstract class</mark>. Your
   compiler enforces this. You may, however, create <strong>ABC</strong> pointers
   or references as long as they point to, or refer to concrete objects which are
   derived from the <strong>ABC</strong>.
   <img
    src="../images/no-shape.png"
    class="inlineCenter"
    alt="Trying to instantiate an abstract class"
   />
  </p>
  <p>
   When you <strong>extend an abstract class</strong>, your derived class <mark
    >must override each and every abstract function in its base class</mark
   >, giving each a concrete implementation. The resulting derived class is a <strong
    >concrete class</strong
   >, and it can be used to create new objects.
  </p>
  <p>
   Abstract classes thus provide a way of
   <strong>guaranteeing</strong> that an object of a given type will understand a
   given message. In that sense,
   <mark
    >they specify a set of responsibilities that a derived class mustfulfill.</mark
   >
  </p>
 </div>
</Layout>
