---
import Layout from "../../../layouts/Layout.astro";
import Header from "../../../components/Header.astro";
import imageLiskov from "../images/liskov.png.jpg";
const { useLayout } = Astro.props;
---

<Layout
 title="Week 13"
 dir="w13/"
 displayLayout={useLayout}
 chapterSubSections={[]}
>
 <Header id="I">
  <h1>Substitution vs. Conversion</h1>
 </Header><div>
  <p class="firstLine">
   C++ allows automatic conversions between the built-in numeric types; with
   numeric conversion, the compiler runs a built-in algorithm and tries to
   calculate the closest value that you desire. That's
   <mark>not what happens</mark> with objects in a class hierarchy.
  </p>
  <p>
   When you pass an <tt>ofstream</tt> object to a function that expects an
   <tt>ostreams&amp;</tt>, <mark>no conversion takes place at all!</mark> Instead,
   the <tt>ofstream</tt> object is automatically treated as if it <mark
    >were</mark
   > an <tt>ostream</tt>
   object, because the
   <tt>ostream</tt> and <tt>ofstream</tt>
   classes are related as in a special way through inheritance. Because the <tt
    >ofstream</tt
   >
   class is derived from the <tt>ostream</tt> class we can
   <mark>substitute it</mark>
   for the expected <tt>ostream</tt> parameter.
  </p>
  <p>
   <img
    src={imageLiskov}
    class="left width-30 shadow round"
    style="margin-top:.5em; margin-right:1em; margin-bottom:3em;"
    alt="Barbara Liskov."
   />

   We can do that because the derived class inherits all of the characteristics
   of its base class, so that anything an <tt>ostream</tt> object can do, an <tt
    >ofstream</tt
   > object can do as well, by definition. This ability to allow a derived or subclass
   object to be used in any context that expects a base-class object is known as
   the
   <mark>Liskov Substitution Principle</mark>, after computer scientist Barbara
   Liskov.
  </p>
 </div>
</Layout>
