---
import Layout from "../../../layouts/Layout.astro";
import Header from "../../../components/Header.astro";
const { useLayout } = Astro.props;
---

<Layout
 title="Week 13"
 dir="w13/"
 displayLayout={useLayout}
 chapterSubSections={[]}
>
 <Header id="F">
  <h1>The override Keyword</h1>
 </Header><div>
  <p class="firstLine">
   While always a <mark>logic error</mark>
   for a derived class to redefine a non-virtual function, it <b>is not</b> a syntax
   error. C++ 11 added new <mark>contextual keywords</mark> that <strong
    >allow the compiler to catch such logic errors</strong
   > that previously were often hidden, and turn them into syntax errors that can
   be caught at compile time.
  </p>
  <p>
   <strong>To tell the compiler</strong>
   that you <mark>intend to override</mark> a base class function, add the contextual
   keyword <tt>override</tt> to the end of the member function declaration like this:
  </p>
  <pre
   class="language-cpp"><code>std::string toString() const override;</code></pre>
  <p>
   Now, if you were to forget the <tt>virtual</tt> in the base class, trying to (incorrectly)
   override a non-virtual inherited member function, or misspell the name of the
   member function, or provide the wrong arguments, the <mark
    >compiler catches those errors</mark
   > and warns you when you compile, like this:
  </p>
  <div class="consoleDisplay">
   error: 'Student::toString()' marked override, but<br />
   &nbsp;&nbsp;&nbsp;&nbsp;does not override std::string Person::toString()
  </div>
 </div>
</Layout>
