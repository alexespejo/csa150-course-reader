---
import Layout from "../../../layouts/Layout.astro";
import Header from "../../../components/Header.astro";
const { useLayout } = Astro.props;
---

<Layout
 title="Week 13"
 dir="w13/"
 displayLayout={useLayout}
 chapterSubSections={[]}
>
 <Header id="G">
  <h1>Polymorphic Functions</h1>
 </Header><div>
  <p class="firstLine">
   What we really want are
   <mark>polymorphic functions</mark> like this:
  </p>
  <pre
   class="language-cpp"><code>// A polymorphic function
void greet(const Person&amp; p)     // any kind of Person
&lbrace;
    cout &lt;&lt; "Hello, I'm " &lt;&lt; p.toString() &lt;&lt; endl;
&rbrace;</code></pre>
  <p>
   This function is polymorphic because the formal parameter is a
   <strong>reference to a base class</strong>. (Note,
   <strong>not</strong> a base class object.) You can
   <strong>pass any kind</strong> of <tt>Person</tt>, such as a <tt>Student</tt>
   or an <tt>Employee</tt> object and it will behave appropriately.
  </p>
  <div class="highlight alert alert-info">
   <p>
    Polymorphic functions should operate on references or pointers to a base
    class. Functions should <b>never use pass-by-value</b> with base class objects.
   </p>
  </div>
 </div>
</Layout>
