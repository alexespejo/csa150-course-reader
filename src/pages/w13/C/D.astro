---
import Layout from "../../../layouts/Layout.astro";
import Header from "../../../components/Header.astro";
import imageSample2 from "../images/sample-2.png";
const { useLayout } = Astro.props;
---

<Layout
 title="Week 13"
 dir="w13/"
 displayLayout={useLayout}
 chapterSubSections={[]}
>
 <Header id="D">
  <h1>A Perplexing Problem</h1>
 </Header><div>
  <p class="firstLine">
   Change the example (<tt>main.cpp</tt>) again, so it looks like this:
  </p>
  <pre
   class="language-cpp"><code>int main()
&lbrace;
    Person sam = Student("Sam", 201795);
    Person pam = Person("Pam B.");
    
    cout &lt;&lt; "sam says-{'>'}" &lt;&lt; sam.toString() &lt;&lt; endl;
    cout &lt;&lt; "pam says-{'>'}" &lt;&lt; pam.toString() &lt;&lt; endl;
&rbrace;</code></pre>
  <p>
   Now you have two <tt>Person</tt> objects: one "regular" <tt>Person</tt>, and
   one specialized
   <tt>Person</tt> who is a <tt>Student</tt>. It the output the same as
   previously?
   <mark>No!!!</mark>
  </p>
  <img
   src={imageSample2}
   class="inlineCenter width-50"
   alt="Running the new program."
  />
  <p>
   For the <tt>Student</tt>
   <tt>sam</tt>, you know longer see the <tt>ID</tt>. And, both the <tt
    >Student</tt
   > and the <tt>Person</tt> are identified with <tt>Person::Name</tt>, even
   though we do have an overridden member function,
   <tt>Student::toString()</tt>.
  </p>
  <mark>Why does this happen?</mark>
 </div>
</Layout>
