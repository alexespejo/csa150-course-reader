---
import Layout from "../../../layouts/Layout.astro";
import Header from "../../../components/Header.astro";
const { useLayout } = Astro.props;
---

<Layout
 title="Week 13"
 dir="w13/"
 displayLayout={useLayout}
 chapterSubSections={[]}
>
 <Header id="I">
  <h1>Pointers to the Rescue</h1>
 </Header><div>
  <p class="firstLine">
   One solution is to create a
   <tt>vector&lt;Person*&gt;</tt>
   <tt>v</tt> or an array
   <tt>Person*</tt>
   <tt>a[2]</tt>. Here's a short example that places two different kinds of
   <tt>Person</tt> pointers in a <tt>vector</tt> and prints them. Each person responds
   appropriately. Go ahead and add this code to
   <tt>main()</tt>. Include the <tt>&lt;vector&gt;</tt> header.
  </p>
  <pre
   class="language-cpp"><code>int main()
&lbrace;
    vector&lt;Person*&gt; people;
    people.push_back(new Student("Sam", 201795));
    people.push_back(new Person("Pam B."));
    
    for (auto p : people) &lbrace;cout &lt;&lt; p-&gt;toString() &lt;&lt; endl;&rbrace;
    for (auto p : people) delete p;
&rbrace;</code></pre>
  <p>
   Since two of these objects are created on the heap, it is up to you to
   reclaim their memory before the <tt>vector</tt>
   goes out of scope and it is lost. The <tt>vector</tt> cannot do it because it
   does not know if the pointers it contains point to objects on the heap or objects
   on the stack. If you add a stack-based pointer to this program, it crashes.
  </p>
 </div>
</Layout>
