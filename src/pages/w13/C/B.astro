---
import Layout from "../../../layouts/Layout.astro";
import Header from "../../../components/Header.astro";
import imageRunningMan from "../images/running-man.png";
const { useLayout } = Astro.props;
---

<Layout
 title="Week 13"
 dir="w13/"
 displayLayout={useLayout}
 chapterSubSections={[]}
>
 <Header id="B">
  <h1>Polymorphic Inheritance</h1>
 </Header><div>
  <p class="firstLine">
   Public inheritance is a form of
   <mark>specialization</mark>. The derived class inherits both the member
   functions and the data members from the base class, while optionally adding
   more of both. The derived class <mark>IS-A specialized form</mark> of the more
   general base class.
  </p>
  <p>
   A derived class <mark>may override</mark> a <tt>virtual</tt>
   member function to add specialized behavior, as we did with
   <tt>Student::toString()</tt>. This is called <mark
    >polymorphic inheritance</mark
   >, it provides
   <mark>specialized behavior</mark> in response to the same messages.
  </p>
  <p>
   <a
    target="_blank"
    href="https://replit.com/@stephengilbert/Polymorphism?v=1"
   >
    <img
     src={imageRunningMan}
     class="left width-32"
     alt="The running man icon."
    /></a
   >
   Let's see if that's true. Let's use our simple <tt>Person&lt;-Student</tt> hierarchy
   from the last few lessons and see what happens with some experiments. Click the
   Running Man on the left to open a copy of the lab for this lesson. Make sure you
   <b>Fork</b> it so that you have your own copy.
  </p>
  <p>
   Change <tt>toString()</tt> in each class so it identifies the class at the beginning
   of the method. Here are the modified
   <tt>toString()</tt> member functions. Notice that this version of the <tt
    >Student::toString()</tt
   > no longer calls its base class version; it <strong
    >entirely replaces it</strong
   >.
  </p>
  <pre
   class="language-cpp"><code>string Person::toString() const
&lbrace;
    return "Person::Name: " + name;
&rbrace;

string Student::toString() const
&lbrace;
    return "Student::Name: " + getName()
        + ", ID: " + to_string(studentID);
&rbrace;</code></pre>
 </div>
</Layout>
