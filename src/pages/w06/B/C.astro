---
import Layout from "../../../layouts/Layout.astro";
import Header from "../../../components/Header.astro";
const { useLayout } = Astro.props;
---

<Layout
 title="Week 6"
 dir="w06/"
 displayLayout={useLayout}
 chapterSubSections={[]}
>
 <Header id="C">
  <h1>Searching &amp; Numbering</h1>
 </Header><div>
  <details>
   <summary>You can check your work here, or peek if you get stuck.</summary>
   <pre
    class="language-cpp"><code>string line;
int line_number = 0;
while (getline(in, line))
&lbrace;
    line_number++;
    if (line.find(word) != string::npos)
   &lbrace; 
        cout &lt;&lt; setw(5) &lt;&lt; line_number &lt;&lt; " : " &lt;&lt; line &lt;&lt; endl;
   &rbrace; 
    // next part here
&rbrace;</code></pre>
  </details>
  <p class="firstLine">
   The searching part of this problem is easy. Place the output <mark
    >inside an <tt class="i">if</tt>
    statement</mark
   >. Use <tt>find()</tt> as part of your condition. If the word is found, then print
   the line. (Remember, if a word is not found, that the <tt>find()</tt> member function
   will return the value <tt>string::npos</tt>.)
  </p>
  <p>Numbering the line is also very easy.</p>
  <ul>
   <li>
    Create a <strong>line counter</strong> right before the loop starts.
   </li>
   <li>
    In the loop, <strong>increment the counter</strong> each time a line is read.
   </li>
   <li>
    Instead of printing the line when the phrase is found, print the line
    number, using <strong>formatted output</strong> before printing the contents.
   </li>
  </ul>
  <p>
   To print the line number in a field <strong>five character wide</strong>
   you'll need to use the <tt>setw()</tt> manipulator (which you met in <tt
    >H01</tt
   >). Follow that with a space, a colon and another space, and finally the line
   itself.
  </p>
 </div>
</Layout>
