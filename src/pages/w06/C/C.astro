---
import Layout from "../../../layouts/Layout.astro";
import Header from "../../../components/Header.astro";
const { useLayout } = Astro.props;
---

<Layout
 title="Week 6"
 dir="w06/"
 displayLayout={useLayout}
 chapterSubSections={[]}
>
 <Header id="C">
  <h1>Input String Streams</h1>
 </Header><div>
  <p class="firstLine">
   The C++11 <tt>string</tt> class introduced several new functions, like <tt
    >stoi()</tt
   > and <tt>stod()</tt>, which convert
   <tt>string</tt> values like <tt>42</tt> to <tt>int</tt> or <tt>double</tt>.
   Prior to C++11, you used the <tt>istringstream</tt> class.
  </p>
  <pre
   class="language-cpp"><code>istringstream in("January 3, 2020");</code></pre>
  <p>
   The <tt>istringstream</tt> (or <mark>input string stream</mark>) variable
   named in allows you to <mark>parse</mark> all of the pieces of the date that has
   been supplied, and, in a much easier manner than using the <tt>string</tt> functions
   like <tt>find()</tt> and <tt>substr()</tt>:
  </p>
  <pre
   class="language-cpp"><code>string month; int day, year;
in &gt;&gt; month &gt;&gt; day; // read month and day
in.get();           // consume comma
in &gt;&gt; year;         // read and convert year</code></pre>
  <p>
   For complex values, like dates, the <tt>istringstream</tt> technique is the most
   efficient.
  </p>
 </div>
</Layout>
