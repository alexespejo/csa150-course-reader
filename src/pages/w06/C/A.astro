---
import Layout from "../../../layouts/Layout.astro";
import Header from "../../../components/Header.astro";
import imageStringStream from "../images/string-streams.png";
const { useLayout } = Astro.props;
---

<Layout
 title="Week 6"
 dir="w06/"
 displayLayout={useLayout}
 chapterSubSections={[]}
>
 <Header id="A">
  <h1>String Streams</h1>
 </Header><div>
  <p class="firstLine">
   The <tt>&lt;sstream&gt;</tt> header contains classes which allow you to associate
   a stream with a <tt>string</tt> in memory, in the same way that the classes in
   <tt>&lt;fstream&gt;</tt> allow you to associate a stream with a file. Looking
   at the class hierarchy below, you can see that <tt>istringstream</tt> is a kind
   of
   <tt>istream</tt>, (just as <tt>ifstream</tt> is), while
   <tt>ostringstream</tt> is a kind of <tt>ostream</tt>, just like
   <tt>ofstream</tt> is.
   <img
    src={imageStringStream}
    class="inlineCenter width-75"
    alt="Stream class heirarchy with string streams highlighted."
   />
  </p>
  <p>To use a string stream for output, follow these three steps:</p>
  <ol>
   <li>Create an <tt>ostringstream</tt> object.</li>
   <li>Write to the stream object.</li>
   <li>
    Collect the results using the stream's <tt>str()</tt> member function.
   </li>
  </ol>
 </div>
 <pre
  class="line-numbers language-cpp"><code>ostringstream out;               // 1. Create the stream
out &lt;&lt; "The answer is " &lt;&lt; 42;   // 2. Write to the stream
string result = out.str();       // 3. Collect the results</code></pre>
 <p>
  As you can see, this is most useful when you want a
  <strong>formatted number</strong> as part of some other output.
 </p>
</Layout>
