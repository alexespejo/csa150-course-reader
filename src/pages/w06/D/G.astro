---
import Layout from "../../../layouts/Layout.astro";
import Header from "../../../components/Header.astro";
import imageStoiErrors from "../images/stoi-error.png";
import imageGirl from "../images/girl.png";
const { useLayout } = Astro.props;
---

<Layout
 title="Week 6"
 dir="w06/"
 displayLayout={useLayout}
 chapterSubSections={[]}
>
 <Header id="G">
  <h1>Comparing the Results</h1>
 </Header><div>
  <p class="firstLine">
   Now, go ahead and you run the test program. Use <tt>make</tt>
   <tt>17</tt> to compile and run under C++ 17, and <tt>make</tt>
   <tt>98</tt> to compile and run under C++ 98. Your code should compile under both
   platforms. When you run it, however, <strong
    >it doesn't produce exactly the same output</strong
   >
   as it does under C++17, which uses the <tt>stoi()</tt>
   from the standard library.
   <img
    src={imageStoiErrors}
    class="inlineCenter width-90"
    alt="Errors with stoi and stod."
   />
  </p>
  <p>
   Look at the lines hightlighted in yellow, where we pass <tt>stod()</tt> or <tt
    >stoi()</tt
   >
   <strong>invalid input</strong>. C++17 and C++98 produce the same output for
   the first four inputs, but the last one fails entirely. Neither the library
   nor your version fails on
   <tt>stoi("3.14159")</tt>. Both convert what they can (the <tt>3</tt>) and
   leaves the rest. But, the library version
   <strong>crashes</strong> with <tt>stoi("UB-40")</tt>; there is <strong
    >no possible conversion</strong
   >.
  </p>

  <blockquote>
   So, that means the version we wrote is better, right?
   <br />
   After all, who wants a function that crashes?
  </blockquote>
  <p align="left">
   Well, not so fast. The question is, <mark>what should</mark>
   <tt>stod()</tt> and <tt>stoi()</tt> do with invalid input? In the next lesson,
   we'll use these techniques to look at more
   <mark>error handling</mark>.
  </p>
 </div>
</Layout>
