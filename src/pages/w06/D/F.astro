---
import Layout from "../../../layouts/Layout.astro";
import Header from "../../../components/Header.astro";
const { useLayout } = Astro.props;
---

<Layout
 title="Week 6"
 dir="w06/"
 displayLayout={useLayout}
 chapterSubSections={[]}
>
 <Header id="F">
  <h1>Predefined Symbols</h1>
 </Header><div>
  <p class="firstLine">
   There are several <mark>predefined symbols</mark> which your toolchain supplies,
   and which you can use in conditional compilation, like this example from StackOverflow,
   which tests for compiling on different platforms:
  </p>
  <pre
   class="language-clike"><code>#ifdef _WIN32
   //define something for Windows (32-bit)
#elif __APPLE__
  // define something for OSX
#elif __linux
    // linux
#endif</code></pre>
  <p>
   These predefined symbols include those that are
   <a
    target="_blank"
    href="https://gcc.gnu.org/onlinedocs/cpp/Standard-Predefined-Macros.html#Standard-Predefined-Macros"
   >
    standard on every version of C++</a
   > and those that are
   <a
    target="_blank"
    href="https://gcc.gnu.org/onlinedocs/cpp/Common-Predefined-Macros.html#Common-Predefined-Macros"
   >
    common to GCC on every platform</a
   >. There are also platform-specific symbols for other toolchains (such as the
   operating system). You can get a list of those by running <tt>cpp -dM</tt> from
   the shell.
  </p>
  <p>
   For this problem, we care about is a <mark>particular version of</mark>
   C++. In the list of predefined standard constants, you'll see that
   <tt>__cplusplus</tt> (double leading underscores) contains version numbers for
   each release of C++. You can use that to bracket your own versions of the <tt
    >stoi()</tt
   >
   and <tt>stod()</tt> functions.
  </p>
  <p>
   Go back to your test program and use this facility to define the functions <mark
    >only</mark
   > if the symbol
   <tt>__cplusplus</tt> is <tt>&lt;=</tt>
   <tt>199711L</tt>. Now you can compile and run with C++98 and with
   C++11/14/17/20 using the same source.
  </p>
  <p>To implement the functions, just use code like this:</p>
  <pre
   class="pcode">function stoi &lt;- input str -&gt; output int
    set result to 0
    construct an input string stream using str
    read from str into result
    return result</pre>
  <p>
   The <tt>stod()</tt> function will be identical, except
   <tt>result</tt> will be <tt>double</tt> instead of
   <tt>int</tt>.
  </p>
 </div>
</Layout>
