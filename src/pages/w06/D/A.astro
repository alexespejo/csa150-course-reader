---
import Layout from "../../../layouts/Layout.astro";
import Header from "../../../components/Header.astro";
const { useLayout } = Astro.props;
---

<Layout
 title="Week 6"
 dir="w06/"
 displayLayout={useLayout}
 chapterSubSections={[]}
>
 <Header id="A">
  <h1>Conversion Functions</h1>
 </Header><div>
  <p class="firstLine">
   The standard library has several functions, in the
   <tt>&lt;string&gt;</tt> header, that will convert a C++ <tt>string</tt> to a number
   (much like the C++11 <tt>to_string()</tt> function will convert a number to a
   <tt>string</tt>.)
  </p>
  <ul>
   <li>the <tt>stoi(string)</tt> function returns an <tt>int</tt></li>
   <li>the <tt>stod(string)</tt> function returns a <tt>double</tt></li>
   <li>
    There are also <tt>stof()</tt>, <tt>stol()</tt>, <tt>stoul()</tt>
    and <tt>stold()</tt> for the types <tt>float</tt>,
    <tt>long</tt>, <tt>unsigned</tt>
    <tt>long</tt> and
    <tt>long</tt>
    <tt>double</tt> respectively.
   </li>
  </ul>
  <p>
   These functions <mark>don't appear</mark> in C++ 98. If your employer is using
   an older version of C++, and doesn't want to change to a later version, for a
   wide (and reasonable) variety of reasons. What can you do? Implement them yourself,
   of course.
  </p>
  <div class="highlight alert alert-info">
   <p>
    This is not a made-up scenario; we are learning about the latest version of
    C++ here in CS 150, but in the real world, you'll need to be prepared for
    older versions.
   </p>
  </div>
 </div>
</Layout>
