---
import Layout from "../../../layouts/Layout.astro";
import Header from "../../../components/Header.astro";
const { useLayout } = Astro.props;
---

<Layout
 title="Week 6"
 dir="w06/"
 displayLayout={useLayout}
 chapterSubSections={[]}
>
 <Header id="C">
  <h1>Easy File I/O</h1>
 </Header><div>
  <p class="firstLine">File processing in C++ is fairly straightforward:</p>
  <ol>
   <li>
    <mark>Declare a stream variable to refer to the file</mark>. Here's an
    example with both an input file stream and an output file stream.
   </li>
   <p>
    <pre
     class="line-numbers language-cpp"><code>ifstream infile;
ofstream outfile;</code></pre>
   </p>
   <li>
    <mark>Open the file.</mark> To <strong>establish an association</strong>
    between that variable and an actual physical file on disk you need to <strong
     >open the file</strong
    >
    calling <tt>open()</tt>.
   </li>
   <p>
    <pre class="language-cpp"><code>infile.open("myfile.txt");</code></pre>
   </p>
   <p>
    Alternatively, you can use perform <strong>both steps at once</strong>
    using the <strong>stream constructors</strong>. Here's an example:
   </p>
   <p>
    <pre class="language-cpp"><code>ifstream infile("myfile.txt");</code></pre>
   </p>
   <p>
    If the <mark>file is missing</mark> the stream will
    <strong>fail to open</strong>; you can check for that by calling the member
    function <tt>fail()</tt>. There will be <mark>no other error messages</mark
    >:
   </p>
   <p>
    <pre
     class="line-numbers language-cpp"><code>ifstream infile("myfile.txt";
if (infile.fail()) { /* handle error */}</code></pre>
   </p>
   <li>
    <mark>Transfer the data.</mark> Read and write data using these techniques:
   </li>
   <ul>
    <li>
     Read or write character by character using <mark>unformatted I/O</mark>.
    </li>
    <li>
     Process the file <strong>line by line</strong>, using
     <mark>line-oriented I/O</mark>.
    </li>
    <li>
     Read and write <strong>formatted data</strong>, mixing numeric data with
     strings and other data types. This is known as
     <mark>token-based file I/O</mark>.
    </li>
   </ul>
  </ol>
 </div>
</Layout>
