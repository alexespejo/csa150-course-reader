---
import Layout from "../../../layouts/Layout.astro";
import Header from "../../../components/Header.astro";
const { useLayout } = Astro.props;
---

<Layout
 title="Week 6"
 dir="w06/"
 displayLayout={useLayout}
 chapterSubSections={[]}
>
 <Header id="D">
  <h1>Processing Lines</h1>
 </Header><div>
  <p class="firstLine">
   Since text files are usually arranged by lines, it is often useful to <mark
    >read an entire line of data at one time</mark
   >. The easiest way to do that is to use the function named <tt>getline()</tt>
   in the <tt>&lt;string&gt;</tt> library. <tt>getline()</tt> is not a member function,
   and it takes two arguments:
  </p>
  <ul>
   <li>
    the <strong>input stream</strong>
    <mark>from which</mark> the line is read. (Open the stream as shown in the previous
    sections.)
   </li>
   <li>
    a <tt>string</tt> variable <mark>into which</mark> the result is written
   </li>
  </ul>
  <p>
   By default, <tt>getline()</tt> stops when it encounters a newline, which is <strong
    >removed</strong
   > from the stream and
   <strong>discarded</strong>. It <mark>is not</mark> stored as part of the string.
   Like <tt>get()</tt>, the <tt>getline()</tt> function
   <mark>returns</mark> the input stream, which allows you to test for end-of-file.
  </p>
  <pre
   class="line-numbers language-cpp"><code>string line;
while (getline(in, line))
    cout &lt;&lt; line &lt;&lt; endl;</code></pre>
  <p>
   This <tt>while</tt> loop reads each line of data from the stream into the
   <tt>string</tt> variable named <tt>line</tt>, until the stream reaches the
   end of the file. For each line, the body of the loop uses
   <tt>&lt;&lt;</tt> to send the line to <tt>cout</tt>, followed by a newline
   character to replace the one which was discarded by <tt>getline()</tt>.
  </p>
 </div>
</Layout>
