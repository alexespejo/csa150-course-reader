---
import Layout from "../../../layouts/Layout.astro";
import Header from "../../../components/Header.astro";
const { useLayout } = Astro.props;
---

<Layout
 title="Week 9"
 dir="w09/"
 displayLayout={useLayout}
 chapterSubSections={[]}
>
 <Header id="G">
  <h1>Array Characteristics</h1>
 </Header><div>
  <p class="firstLine">
   The <strong>array name</strong> is synonymous with the <strong
    >address of its first element</strong
   >.<strong> </strong>This address cannot be changed; <strong
    >it is constant</strong
   >. Look at <a
    target="_blank"
    href="https://cpp.sh/?source=%23include+%3Ciostream%3E%0D%0Ausing+namespace+std%3B%0D%0A%0D%0Aint+main()%0D%0A%7B%0D%0A++++int+list%5B5%5D%3B%0D%0A++++cout+%3C%3C+list+%3C%3C+endl%3B%0D%0A%7D%0D%0A"
   >
    this code fragment</a
   >:
  </p>
  <pre
   class="language-cpp"><code>int list[5];
cout &lt;&lt; list &lt;&lt; endl;</code></pre>
  <p>
   What prints is the <mark>address of the first element</mark>; not the
   contents of the first <tt>int</tt>, and not the contents of the entire array.
   Here's one possible output. Click the link to try it.
  </p>
  <div class="consoleDisplay">0x505260</div>
  <p>
   Since an array name <mark>is not a variable</mark>, you
   <strong>cannot assign</strong> to an array, nor, can you
   <strong>meaningfully compare</strong> two arrays using the built-in comparison
   operators.
  </p>
  <pre
   class="language-cpp"><code>int a1[] = &lbrace;1, 2, 3&rbrace;, a2[3];
a2 = a1;                    // 1. Illegal
a2[0] = a1[0];              // 2. Fine
a2 = &lbrace;1, 2, 3&rbrace;;             // 3. Illegal
if (a1 == a2) . . .         // 4. Legal, but stupid</code></pre>
  <p>
   The arrays <tt>a1</tt> and <tt>a2</tt> are <strong
    >the same type and dimension</strong
   >. Given that:
  </p>
  <ol>
   <li>
    It is <mark>illegal to assign</mark>
    <tt>a1</tt> to <tt>a2</tt>. The name <tt>a1</tt> is the address of the first
    element in the array. <strong>It is not a variable</strong> that can be assigned
    to. This is completely different from structures, where
    <tt>a1</tt> and <tt>a2</tt>
    <strong>would</strong> both be variables (<strong><em>lvalues</em></strong>)
    and thus <mark>could be</mark> assigned to.
   </li>
   <li>
    It <strong>is</strong>
    <strong>legal</strong> to
    <strong>assign to <mark>array elements</mark></strong>;
    <tt>a1</tt>
    <strong>is not</strong> a variable, but <tt>a1[0]</tt>
    <strong>is</strong>.
   </li>
   <li>
    <strong>You can <mark>list initialize</mark></strong> an array, but you <mark
     >cannot list assign</mark
    > to the array.
   </li>
   <li>
    With structures, <strong>comparing two variables</strong> is a syntax error.
    <strong
     >Comparing two array names,
     <mark>while legal, is very stupid</mark></strong
    >.
   </li>
  </ol>
  <p>
   Since the array name is the address of the first element in the array, and
   since the two arrays <mark>cannot live at the same location</mark> in memory,
   the comparison must be
   <tt>false</tt>. It doesn't matter what is inside the array.
  </p>
 </div>
</Layout>
