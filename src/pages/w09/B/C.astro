---
import Layout from "../../../layouts/Layout.astro";
import Header from "../../../components/Header.astro";
const { useLayout } = Astro.props;
---

<Layout
 title="Week 9"
 dir="w09/"
 displayLayout={useLayout}
 chapterSubSections={[]}
>
 <Header id="C">
  <h1>Defining Arrays</h1>
 </Header><div>
  <p class="firstLine">An array must be defined before it is used:</p>
  <pre class="pcode">base-type name[size];</pre>
  <p>
   The definition requires a <b>base type</b>, <b>name</b>, and <mark
    >allocated size</mark
   >; <b>size</b> is a
   <strong>positive integer constant expression</strong>
   indicating the number of elements for the compiler to allocated. For example:
  </p>
  <pre
   class="language-cpp"><code>const size_t kSize = 6;
int a[kSize];</code></pre>
  <table class="array" align="center">
   <thead>
    <th>0</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th>
   </thead>
   <tbody>
    <td>?</td><td>?</td><td>?</td><td>?</td><td>?</td><td>?</td>
   </tbody>
   <tfoot>
    <th>0x505290</th><th>0x505294</th><th>0x505298</th><th>0x50529c</th><th
     >0x5052a0</th
    ><th>0x5052a4</th>
   </tfoot>
  </table>

  <p>
   This creates an array named <tt>a</tt>, of
   <tt>6</tt> elements, each of which is an <mark>uninitialized</mark>
   <tt>int</tt>.
  </p>
  <ul>
   <li>
    A good practice is to <b>specify the size as a symbolic constant</b> instead
    of a literal.
   </li>
   <li>
    The size <strong>must be positive</strong>; zero or negative are illegal.
   </li>
   <li>
    The size must be <strong>constant</strong>; a <mark
     >regular, non-const variable should not work</mark
    >, although some compilers may permit it.
   </li>
   <li>
    If defined inside a function, the <strong>elements are on the stack</strong
    >; if defined outside of a function, the elements are allocated in the
    <strong>static storage area</strong>.
   </li>
  </ul>
  <p>
   Index numbers begin with <tt>0</tt> and run up to the <strong
    >array size minus one</strong
   >.
  </p>
  <div class="highlight alert alert-info">
   <p>
    C++ arrays are different than those in Java where the array variable and the
    allocated actual array are different. In C++ there is no array variable
    equivalent. Instead, the array name (<tt>a</tt> in the example) is an alias for
    the <mark>address of the first element</mark>,
    <tt>0x505290</tt> here.
   </p>
  </div>
 </div>
</Layout>
