---
import Layout from "../../../layouts/Layout.astro";
import Header from "../../../components/Header.astro";
const { useLayout } = Astro.props;
---

<Layout
 title="Week 9"
 dir="w09/"
 displayLayout={useLayout}
 chapterSubSections={[]}
>
 <Header id="C">
  <h1>Dereferencing Arrays</h1>
 </Header><div>
  <p class="firstLine">
   You can also <strong>dereference an array</strong>, just like a regular
   pointer, using the regular <strong>dereferencing operato</strong>r. Here are
   some examples (note the parentheses):
  </p>
  <pre
   class="language-cpp"><code>int array[] = &lbrace;1, 2, 3, 4, 5&rbrace;;
cout &lt;&lt; *array;         // array[0]
cout &lt;&lt; *(array + 2);   // array[2]
cout &lt;&lt; *array + 2;     // array[0] + 2</code></pre>

  <p>
   Similarly, you can <strong
    >combine dereferencing with address arithmetic</strong
   >, by using the <mark>subscript operator</mark>; you can use the subscript
   operator on both pointers and arrays. All of these expressions are true.
  </p>
  <pre
   class="language-cpp"><code>int array[] = &lbrace;1, 2, 3, 4, 5&rbrace;;
int *p = array;
*array == *p;             // true
array[0] == p[0];         // also true
array[3] = *(p + 3);      // true again
4[array] = *(4 + array);  // also true</code></pre>

  <p>
   <mark
    >In fact, in C++, the subscript operator is just shorthand for a combination
    of address arithmetic along with dereferencing the resulting address.
   </mark>
  </p>
  <div class="consoleDisplay" style="text-align:center;">
   address[offset] -&gt; offset[address] -&gt; *(address + offset)
  </div>
 </div>
</Layout>
