---
import Layout from "../../../layouts/Layout.astro";
import Header from "../../../components/Header.astro";
const { useLayout } = Astro.props;
---

<Layout
 title="Week 9"
 dir="w09/"
 displayLayout={useLayout}
 chapterSubSections={[]}
>
 <Header id="C">
  <h1>Iterator Loops</h1>
 </Header><div>
  <p class="firstLine">
   Turning back to our image processing code, you can see that the pointer <tt
    >pete</tt
   > points to the first byte in our image once it is loaded into memory. Of course,
   <tt>pete</tt> is a <tt>const</tt> pointer, so it can't be changed. To process
   the image we need to create <mark>a pair of pointers</mark> like this:
  </p>
  <ul>
   <li>
    <tt class="y">beg</tt> will be a non-const pointer which will move through all
    of the pixel data (using address arithmetic), so we can modify the image.
   </li>
   <li>
    <tt class="y">end</tt> will be a <tt>const</tt> pointer that will contain the
    address just past the end of the data that <tt>stbi_load()</tt> has placed in
    memory. We can calculate this address also by using address arithmetic.
   </li>
  </ul>
  <p>
   Here's the code you should add to <tt>main.cpp</tt>
   to create these two pointers.
  </p>
  <pre
   class="language-cpp"><code>unsigned char *beg = pete;    // beginning of the image
unsigned char * const end = pete + width * height * channels;</code></pre>
  <p>
   Notice that the expression <tt>width</tt>
   <tt>*</tt>
   <tt>height</tt>
   <tt>*</tt>
   <tt>channels</tt> is the total number of bytes in the image. By adding it to the
   pointer <tt>pete</tt>, we get a new address that is pointing at the first
   byte
   <strong>following the image</strong> in memory.
  </p>
  <p>
   With these pointers, we can "visit" every byte in the image by using this <mark
    >iterator loop</mark
   >:
  </p>
  <pre
   class="language-cpp"><code>while (beg != end)
&lbrace;
    // process the byte here
    beg++;    // move to the next byte
&rbrace;</code></pre>
 </div>
</Layout>
