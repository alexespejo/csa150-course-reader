---
import Layout from "../../../layouts/Layout.astro";
import Header from "../../../components/Header.astro";
const { useLayout } = Astro.props;
---

<Layout
 title="Week 9"
 dir="w09/"
 displayLayout={useLayout}
 chapterSubSections={[]}
>
 <Header id="E">
  <h1>Returning a Pointer</h1>
 </Header><div>
  <p class="firstLine">
   The <tt>biggest()</tt> function returns a
   <mark>pointer to the largest item</mark> in the array. We don't want to allow
   the element to change, and we don't want the pointer to be used to modify other
   elements, so the return type is <tt>const</tt>
   <tt>double*</tt>
   <tt>const</tt>.
  </p>
  <p>
   When you <strong>call</strong>
   <tt>biggest()</tt>, you will <strong>dereference</strong> the returned pointer
   to get the value.
  </p>
  <pre
   class="language-cpp"><code>cout &lt;&lt; *(biggest(da, 5)) &lt;&lt; endl;</code></pre>
  <p>
   Let's <strong>apply the steps</strong> in the extreme values algorithm to this
   problem.
  </p>
  <ol>
   <li>
    Save the first value as the largest. You need two variables to do this:
    <pre
     class="language-cpp"><code>const double *p = a;
double largest = *p;</code></pre>
   </li>
   <li>
    Now, loop through each <strong>remaining element</strong>like this:
    <pre
     class="language-cpp"><code>for (size_t i = 1; i &lt; len; ++i)...</code></pre>
   </li>
   <li>
    Each time through the loop, check to see if the current element is larger
    than the saved value, and, if so, update the saved values. Because you want
    to return a pointer, you'll need to update <mark>both</mark>
    <tt>largest</tt> and <tt>p</tt>. Note the use of the address operator.
    <pre
     class="language-cpp"><code>if (a[i] &gt; largest)&lbrace; 
    p = &amp;a[i];
    largest = a[i];
&rbrace;</code></pre>
   </li>
   <li>Finally, simply return the pointer <tt>p</tt>.</li>
   <p>
    This is the same scheme used by the standard library algorithms
    <tt>min_element()</tt> and <tt>max_element()</tt>. When called using arrays,
    they
    <a
     target="_blank"
     href="https://cpp.sh/?source=%23include+%3Ciostream%3E%0D%0A%23include+%3Calgorithm%3E%0D%0Ausing+namespace+std%3B%0D%0A%0D%0Aint+main()%0D%0A%7B%0D%0A++++int+list%5B%5D+%3D+%7B1%2C+2%2C+3%2C+4%2C+5%7D%3B%0D%0A++++cout+%3C%3C+*(min_element(begin(list)%2C+end(list)))+%3C%3C+endl%3B%0D%0A++++cout+%3C%3C+*(max_element(begin(list)%2C+end(list)))+%3C%3C+endl%3B%0D%0A%7D%0D%0A"
    >
     return a pointer</a
    > in exactly this manner.
   </p>
  </ol>
 </div>
</Layout>
