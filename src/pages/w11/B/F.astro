---
import Layout from "../../../layouts/Layout.astro";
import Header from "../../../components/Header.astro";
const { useLayout } = Astro.props;
---

<Layout
 title="Week 11"
 dir="w11/"
 displayLayout={useLayout}
 chapterSubSections={[]}
>
 <Header id="F">
  <h1>Freeing Memory</h1>
 </Header><div>
  <p class="firstLine">
   Computer memory is finite, so the heap may eventually run out of space. When
   this occurs, the <tt>new</tt> operator throws a <tt>bad_alloc</tt>
   exception. There is usually nothing the program can do to recover. With a modern
   O/S and virtual memory, this is very rare.
  </p>
  <p>
   Unlike Java, C++ programmers must <mark>manually free heap variables</mark> when
   they are no longer used. In Java, this is handled by the <strong
    >garbage collector</strong
   >. In C++ you free a heap variable by using the <tt>delete</tt>
   operator like this:
  </p>
  <pre
   class="language-cpp"><code>Fraction *fp = new Fraction;
// Use the fraction object here
delete fp;  // free the memory</code></pre>
  <p>
   When you allocate <mark>an array</mark>, you add square brackets after the <tt
    >delete</tt
   > keyword, like this:
  </p>
  <pre
   class="language-cpp"><code>double *da = new double[3]; 
// Use the array
delete[] da;    // free heap memory</code></pre>

  <p>
   Click on the link here <a target="blank" href="https://goo.gl/PKKdDP"
    >to visualize several uses of pointers</a
   >.
  </p>
 </div>
</Layout>
