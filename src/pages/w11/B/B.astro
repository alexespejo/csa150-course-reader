---
import Layout from "../../../layouts/Layout.astro";
import Header from "../../../components/Header.astro";
import imageStackHeap from "../images/stack-heap.png";
const { useLayout } = Astro.props;
---

<Layout
 title="Week 11"
 dir="w11/"
 displayLayout={useLayout}
 chapterSubSections={[]}
>
 <Header id="B">
  <h1>Stack vs. Heap</h1>
 </Header><div>
  <img src={imageStackHeap} class="right" alt="A memory picture in Java." />
  <p class="firstLine">
   You're already familiar with dynamic memory, since that's what is used to <strong
    >create every object</strong
   >
   in Java. Writing <tt>new</tt>
   <tt>Scanner(System.in)</tt>, allocates memory in the heap to store a new <tt
    >Scanner</tt
   >
   object as shown here.
  </p>
  <p>
   In C++, however, it is not enough to <strong>allocate</strong>
   <strong>memory</strong>; you also have to <strong>free that memory</strong>
   when it is no longer needed. The process of doing this in a disciplined way is
   called <mark>manual memory management</mark>.
  </p>
  <p>
   Allocating memory from the heap is common in programming. All the standard
   library collection classes use the heap to store their elements. In CS 250
   and CS 200, youâ€™ll have many opportunities to build your own versions of
   these collection classes. Before doing so, it is important to learn the
   underlying mechanics of dynamic allocation and how the process works.
  </p>
 </div>
</Layout>
