---
import Layout from "../../../layouts/Layout.astro";
import Header from "../../../components/Header.astro";
import imageNew6 from "../images/new-6.png";
const { useLayout } = Astro.props;
---

<Layout
 title="Week 11"
 dir="w11/"
 displayLayout={useLayout}
 chapterSubSections={[]}
>
 <Header id="E">
  <h1>Dynamic Objects</h1>
 </Header><div>
  <p class="firstLine">
   The <tt>new</tt> operator can also allocate
   <strong>objects or structures</strong>
   on the heap. Let's assume you have a <tt>Fraction</tt> class. If you use only
   the class name, then C++ <mark>allocates space</mark> for a default <tt
    >Fraction</tt
   > object on the heap.
  </p>
  <pre class="language-cpp"><code>Fraction *fp = new Fraction;</code></pre>
  <p>
   If <tt>Fraction</tt> has a default constructor, the
   <tt>new</tt> operator automatically calls it, passing the address of the newly
   allocated memory. Assuming the constructor initializes each data member to the
   values
   <tt>0</tt>/<tt>1</tt>, you'll end up with something like this:
  </p>
  <img
   src={imageNew6}
   class="inlineCenter round shadow"
   alt="Creating a Fraction on the heap."
  />
  <p>
   Supply arguments, and C++ will call the matching overloaded constructor.
  </p>
 </div>
</Layout>
