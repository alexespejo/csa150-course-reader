---
import Layout from "../../../layouts/Layout.astro";
import Header from "../../../components/Header.astro";
const { useLayout } = Astro.props;
---

<Layout
 title="Week 11"
 dir="w11/"
 displayLayout={useLayout}
 chapterSubSections={[]}
>
 <Header id="C">
  <h1>Member Functions</h1>
 </Header><div>
  <p class="firstLine">
   Here is your <tt>Time</tt> structure, including the above interface:
  </p>
  <pre
   class="language-cpp"><code>struct Time
&lbrace;
    int hours;
    int minutes;

    Time sum(const Time&amp; rhs);
    Time difference(const Time&amp; rhs);

    std::istream&amp; read(std::istream&amp; in);
    std::ostream&amp; write(std::ostream&amp; out);
&rbrace;;</code></pre>

  <p>
   The member functions are written <strong>as prototypes</strong>, inside the
   structure definition. This is a user-defined type, so you will normally put
   it inside a header file. Because of that, the <strong>library types</strong>,
   <tt>istream</tt> and <tt>ostream</tt> are
   <strong>fully qualified</strong>.
  </p>
  <ul>
   <li>
    The <tt>read()</tt> and <tt>write()</tt> functions both take a stream as an argument,
    so that you can use either the console or a file. Stream arguments must <strong
     >always</strong
    >
    be passed (and returned) by reference.
   </li>
   <li>
    The <tt>sum()</tt> and <tt>difference()</tt> member functions will return a new
    <tt>Time</tt> object.
   </li>
  </ul>
 </div>
</Layout>
