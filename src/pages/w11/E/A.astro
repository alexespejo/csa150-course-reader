---
import Layout from "../../../layouts/Layout.astro";
import Header from "../../../components/Header.astro";
import imageParnes from "../images/parnas.jpg";
const { useLayout } = Astro.props;
---

<Layout
 title="Week 11"
 dir="w11/"
 displayLayout={useLayout}
 chapterSubSections={[]}
>
 <Header id="A">
  <h1>Information Hiding</h1>
 </Header><div>
  <p class="firstLine">
   The <tt>Time</tt> structure from the last lesson did not enforce its invariants.
   <strong>Structures</strong> use "naked" variables to represent data, so <mark
    >any part of the program</mark
   > can modify those variables without any validation. <tt>Time</tt>
   <mark>expects</mark> certain relationships between its data members, <strong
    >but cannot enforce those relationships</strong
   >.
  </p>
  <p>
   In addition, <tt>Time</tt> is <mark>represented in a particular way</mark>,
   as two <tt>int</tt> data members. Thus code that uses the <tt>Time</tt> type is
   <mark> tightly coupled to that implementation</mark>.
  </p>
  <img
   src={imageParnes}
   class="right shadow round width-25"
   alt="Canadian Computer Scientist David Parnas."
  />
  <p>
   These problems with structured data were noticed in the early 1970s by a
   Canadian Computer Scientist named
   <a target="_blank" href="https://en.wikipedia.org/wiki/David_Parnas"
    >David Parnas</a
   >, who developed a theory of <mark>information hiding</mark>, and who led the
   drive towards <strong>modular programming</strong>
   with his famous 1971 paper,
   <a target="_blank" href="https://prl.ccs.neu.edu/img/p-tr-1971.pdf">
    <i>On the Criteria to be used in Decomposing Systems</i></a
   >, written at Carnegie Mellon University.
  </p>
 </div>
</Layout>
