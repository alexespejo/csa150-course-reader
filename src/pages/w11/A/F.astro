---
import Layout from "../../../layouts/Layout.astro";
import Header from "../../../components/Header.astro";
const { useLayout } = Astro.props;
---

<Layout
 title="Week 11"
 dir="w11/"
 displayLayout={useLayout}
 chapterSubSections={[]}
>
 <Header id="F">
  <h1>Converting Arguments</h1>
 </Header><div>
  <p class="firstLine">
   The command-line consists of C-style strings; to use any C++ <tt>string</tt> functions
   from the standard library, first <strong>assign</strong> the array element (<tt
    >argv[i]</tt
   >) to a local <tt>string</tt> variable. Once you've converted the C-string argument
   to a C++ <tt>string</tt>, you may then treat the argument as a number by
   converting it with the
   <tt>stoi()</tt>, <tt>stol()</tt> and <tt>stod()</tt> function in the <tt
    >&lt;string&gt;</tt
   > header.
  </p>
  <p>
   However, you <mark>may</mark>
   convert directly from C-style strings to numbers, with out first converting to
   <tt>string</tt>, by using the helper functions in <tt>&lt;cstdlib&gt;</tt> which
   include
   <tt>atoi()</tt>, <tt>atol()</tt>, and <tt>atof()</tt>.
  </p>
  <pre
   class="language-cpp"><code>#include &lt;iostream&gt;
#include &lt;cstdlib&gt;
using namespace std;

int main(int argc, char *argv[])
&lbrace;
    for (int i = 1; i &lt; argc; ++i)
        cout &lt;&lt; atoi(argv[i]) &lt;&lt; endl;
&rbrace;</code></pre>
  <p>
   Notice that loop starts at <tt>1</tt> to skip over the program name at <tt
    >argv[0]</tt
   >. If you pass a floating-point number on the command line,
   <tt>atoi()</tt> takes only the digits up to the decimal point. If you pass non-numbers,
   these come back from <tt>atoi()</tt> as zero.
  </p>
 </div>
</Layout>
