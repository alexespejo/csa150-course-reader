---
import Layout from "../../../layouts/Layout.astro";
import Header from "../../../components/Header.astro";
const { useLayout } = Astro.props;
---

<Layout
 title="Week 11"
 dir="w11/"
 displayLayout={useLayout}
 chapterSubSections={[]}
>
 <Header id="D">
  <h1>Double Deletes</h1>
 </Header><div>
  <p class="firstLine">
   When you discover a memory leak, your first inclination is to start adding <tt
    >delete</tt
   >
   statements. That can create more problems.
   <a target="_blank" href="https://onlinegdb.com/Gfkzsn88i"
    >Here is an example:</a
   >
  </p>
  <pre
   class="language-cpp"><code>void checkDate(int yr, int mo, int da)
&lbrace;
    Date *pd = new Date(yr, mo, da);
    if (! pd-{'>'}isValid()) delete pd;     // avoid leak
    else cout &lt;&lt; (*pd) &lt;&lt; " is OK" &lt;&lt; endl;
    delete pd;  // OOPS, a double delete
&rbrace;</code></pre>
  <p>
   Here, the programmer adds a <tt>delete</tt> for
   <mark>both</mark> the <tt>true</tt> and
   <tt>false</tt> branches (unlike the memory leak example, where an invalid <tt
    >Data</tt
   > was never <b>deleted</b>. However, because the programmer <mark
    >forgot</mark
   > to add braces around the two statements in the <tt>else</tt> part, the final
   <tt>delete</tt> is a <mark
    >double <tt>delete</tt>: deleting an already freed pointer</mark
   > whenever the <tt>Date</tt>
   is invalid.
  </p>
  <p>
   This is also a big no-no. <mark
    >This should always result in a runtime error</mark
   >, because this is almost certain to corrupt the heap. Technically, however,
   it results in <mark>undefined behavior.</mark>
  </p>
 </div>
</Layout>
