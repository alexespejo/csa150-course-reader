---
import Layout from "../../../layouts/Layout.astro";
import Header from "../../../components/Header.astro";
const { useLayout } = Astro.props;
---

<Layout
 title="Week 11"
 dir="w11/"
 displayLayout={useLayout}
 chapterSubSections={[]}
>
 <Header id="G">
  <h1>Unique Pointers</h1>
 </Header><div>
  <p class="firstLine">
   A <tt>unique_ptr</tt> “<mark>owns</mark>” the object to which it points. <mark
    >Only one</mark
   >
   <tt>unique_ptr</tt> at a time can point to a given object. The object to which
   a <tt>unique_ptr</tt> points is destroyed when the <tt>unique_ptr</tt> is destroyed.
  </p>
  <p>
   Define a <tt>unique_ptr</tt> by constructing it with an address returned from
   <tt>new</tt>, like this:
  </p>
  <pre
   class="language-cpp"><code>unique_ptr&lt;int&gt; p(new int{45});</code></pre>
  <p>
   The <tt>unique_ptr</tt> does <mark>not</mark> support assignment. The following
   code is illegal:
  </p>
  <pre
   class="language-cpp"><code>unique_ptr&lt;Cat&gt; p1(new Cat("Felix"));
unique_ptr&lt;Cat&gt; p2 = p1;      //ERROR. Only one can point to Felix</code></pre>
  <h2>Transferring Ownership</h2>
  <p>
   While you cannot <mark>copy</mark> unique pointers, you can <mark
    >transfer ownership</mark
   > of a heap object from one <tt>unique_ptr</tt> to another by calling <tt
    >release()</tt
   > and/or <tt>reset()</tt>:
  </p>
  <ul>
   <li>
    <tt>release()</tt> returns the "raw" pointer stored inside the <tt
     >unique_ptr</tt
    > and makes that <tt>unique_ptr</tt> null.
   </li>
   <li>
    <tt>reset()</tt> takes an optional raw pointer and repositions the <tt
     >unique_ptr</tt
    > to point to the given pointer. If the <tt>unique_ptr</tt> is not null, then
    the object to which the <tt>unique_ptr</tt>
    <strong>had pointed</strong> is deleted.
   </li>
  </ul>
  <pre
   class="language-cpp"><code>unique_ptr&lt;Cat&gt; p1(new Cat("Felix"));
unique_ptr&lt;Cat&gt; p2(p1.release());     //OK, p2 now owns Felix
p2.reset(new Cat("Kitty"));           //OK. Felix deleted</code></pre>
  <p>
   The pointer returned by <tt>release()</tt> is often used to
   <mark>initialize another smart pointer</mark>; in this way, responsibility
   for memory is <strong>transferred</strong> from one smart pointer to another.
  </p>
 </div>
</Layout>
