---
import Layout from "../../../layouts/Layout.astro";
import Header from "../../../components/Header.astro";
const { useLayout } = Astro.props;
---

<Layout
 title="Week 11"
 dir="w11/"
 displayLayout={useLayout}
 chapterSubSections={[]}
>
 <Header id="I">
  <h1>Unique Pointers and Containers</h1>
 </Header><div>
  <p class="firstLine">
   Library containers (such as
   <tt>vector</tt>) are designed to hold <mark>copies of items</mark>, using the
   regular assignment operators. Suppose, for instance, that you are writing a
   video game, and you have a <tt>Sprite</tt>
   class.
  </p>
  <pre
   class="language-cpp"><code>vector&lt;unique_ptr&lt;Sprite&gt;&gt; v;
unique_ptr&lt;Sprite&gt; sp(new Sprite);
v.push_back(sp);</code></pre>
  <p>
   If you write this code you will get an altogether baffling error message that
   appears to say that there are bugs in the standard library.
  </p>
  <p>
   What the error message
   <mark>means</mark> is that you cannot use <tt>push_back()</tt>
   on a <tt>unique_ptr</tt> because there <mark>cannot be two copies</mark> of the
   same <tt>unique_ptr</tt>. Instead, use the standard function <tt>move()</tt> to
   <mark>explicitly transfer ownership</mark>, like this:
  </p>
  <pre
   class="language-cpp"><code>unique_ptr&lt;Sprite&gt; sp(new Sprite);
v.push_back(move(sp));</code></pre>
 </div>
</Layout>
