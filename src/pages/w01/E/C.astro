---
import Layout from "../../../layouts/Layout.astro";
import Header from "../../../components/Header.astro";
const { useLayout } = Astro.props;
---

<Layout
 title="Week 2"
 dir="w02/"
 displayLayout={useLayout}
 chapterSubSections={[]}
>
 <Header id="C">Integer Literals</Header>

 <div>
  <p class="firstLine">
   Explicit values like <tt>235</tt> or
   <tt>-75</tt> are called
   <mark>literals</mark>. An integer literal is a sequence of decimal digits,
   with no spaces or commas allowed, preceded by an optional (<tt>+/-</tt>)
   sign. It is stored as a <mark>signed</mark>
   <tt>int</tt>.
  </p>
  <ul>
   <li>
    Change the representation from <tt>signed</tt>
    to <tt>unsigned</tt> by add a <tt>U</tt> to the end.
   </li>
   <li>
    Change the storage from <tt>int</tt> to <tt>long</tt>, or to <tt>long</tt>
    <tt>long</tt> by adding an <tt>L</tt> or an
    <tt>LL</tt>.
   </li>
  </ul>
  <p>Here are some examples:</p>
  <pre
   class="language-cpp"><code>auto a = 15;      // a is stored as a signed decimal int
auto b = 15L;     // b is stored as a signed decimal long
auto c = 15LL;    // c is stored as a signed decimal long long
auto d = 15UL;    // d is an unsigned decimal long</code></pre>
  <div class="highlight alert alert-info">
   <p>
    Using <tt>auto</tt> instead of an explicit type to create the variables <tt
     >a</tt
    >, <tt>b</tt>, <tt>c</tt>, and
    <tt>d</tt>, allows the compiler to <b>infer</b> or <b>deduce</b>
    their types from their initializers. This <mark>type inference</mark> is a new
    feature of C++11.
   </p>
  </div>
  <p>
   You can also write literals in base 8 (<strong>octal</strong>), base 16 (<strong
    >hexadecimal</strong
   >) and base 2 (<strong>binary</strong>).
  </p>
  <pre
   class="language-cpp"><code>auto oct32 = 040;         	// 4 8s and no 0s
auto hex32 = 0x20;	     	// 2 16s and no 0s
auto bin32 = 0b10'0000;   	// 1 32 and no 16s, 8s, 4s, 2s or 1s </code></pre>
  <p>
   Starting in C++14 you can use the apostrophe as a visual separator, as I've
   done here to separate the digits in
   <tt>bin32</tt> into groups of 4.
  </p>
 </div>
 <div id="</Layout"></div>
</Layout>
