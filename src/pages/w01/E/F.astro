---
import Layout from "../../../layouts/Layout.astro";
import Header from "../../../components/Header.astro";
import imageQuadraticEquation from "../images/quadratic-equation.png";
import imageQE2 from "../images/quadratic-formula2.png";
const { useLayout } = Astro.props;
---

<Layout
 title="Week 2"
 dir="w02/"
 displayLayout={useLayout}
 chapterSubSections={[]}
>
 <Header id="F">Expressions</Header>
 <div>
  <img
   src={imageQuadraticEquation}
   class="right width-30"
   alt="The quadratic equation ax<sup>2</sup> + bx + c = 0."
  />

  <p class="firstLine">
   To perform calculations, you
   <mark>write expressions</mark> to calculate the answer in a form similar to that
   used in mathematics. Consider the quadratic equation:
  </p>
  <img src={imageQE2} class="right width-30" alt="The quadratic formula." />
  <p>This equation has two solutions given by the quadratic formula:</p>
  <p>
   To solve this in C++, you write an <mark>expression</mark> which uses <tt
    >+</tt
   > in place of the <tt>Â±</tt> symbol, to calculate one of the roots, like this:
  </p>
  <pre
   class="language-cpp"><code>(-b + sqrt(b * b - 4 * a * c)) / (2 * a)</code></pre>

  <h2>An Expression Vocabulary</h2>
  <p>
   An <mark>expression</mark> is any combination of
   <mark>operators</mark> and <mark>operands</mark> which, when evaluated, yields
   a value.
  </p>
  <ol>
   <li>
    An <mark>operand</mark> indicates a <strong>value</strong>. Operands
    include:
   </li>
   <ul>
    <li><strong>Literals:</strong>which represent a value</li>
    <li><strong>Variables:</strong>a storage location containing a value</li>
    <li><strong>Function calls:</strong>which can produce a value</li>
    <li><strong>Sub-expressions:</strong>which yeild a value</li>
   </ul>
   <li>
    An <mark>operator</mark> is a symbol which performs an operation on one or more
    operands and, subsequently, produces a value. Operators have three characteristics:
   </li>
   <ul>
    <li>
     <mark>Arity</mark>: the number of operands required.
     <strong>Unary</strong> operators require a single operand, while <strong
      >binary</strong
     > operators require two.
    </li>
    <li>
     <mark>Precedence</mark>: determines which operands "bind to" the operator.
     Those with <mark>higher precedence</mark> "stick to" their adjacent operands
     more closely.
    </li>
    <li>
     <mark>Associativity</mark>: determines whether operations,
     <strong>at the same level of precedence</strong>, should proceed from
     right-to-left, (called <mark>right-associative</mark>), or from
     left-to-right, (called <mark>left-associative</mark>).
    </li>
   </ul>
  </ol>
 </div>
 <p>
  This
  <a
   target="_blank"
   href="http://en.cppreference.com/w/cpp/language/operator_precedence"
   title="Precedence and associativity for all C++ operators."
  >
   linked table
  </a>
  shows the precedence and associativity for all of the C++ operators.
 </p>
</Layout>
