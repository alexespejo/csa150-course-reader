---
import Layout from "../../../layouts/Layout.astro";
import Header from "../../../components/Header.astro";
const { useLayout } = Astro.props;
---

<Layout
 title="Week 2"
 dir="w02/"
 displayLayout={useLayout}
 chapterSubSections={[]}
>
 <Header id="C">Identifiers &amp; Constants</Header>
 <div>
  <p class="firstLine">
   Names used for variables, functions, types, constants, classes, and so on are
   called <mark>identifiers</mark>. Here are the language <b>syntax rules</b> for
   identifiers:
  </p>
  <ul>
   <li>A name must consist of letters, digits or the underscore.</li>
   <li>
    A name must <strong>start with</strong> a letter or a
    <strong>single</strong> underscore, not a number.
   </li>
   <li>
    Names are <strong>case-sensitive</strong>. The name
    <tt>ABC</tt> is not the same as the name <tt>abc</tt>.
   </li>
   <li>
    A name <strong>cannot</strong>be one of the <a
     target="_blank"
     href="http://en.cppreference.com/w/cpp/keyword"
     title="Reserved C++ keywords.">reserved keywords</a
    >. While you <strong>can</strong> use names of library types (such as <tt
     >string</tt
    > or <tt>vector</tt> or <tt>cout</tt>) as identifiers, doing so <mark
     >is just asking for trouble</mark
    >; you should treat them the same as the built-in keywords.
   </li>
   <li>
    Only identifiers in the <strong>standard library</strong> may start with <strong
     >two</strong
    > underscores or an underscore followed by a capital (__bob and _Bob are <strong
     >illegal</strong
    >
    in user code). (The compiler can't enforce this rule, since it can't know if
    you are implementing part of the standard library.)
   </li>
  </ul>
  <p>Here are the <strong>naming conventions</strong> we'll use in CS 150.</p>
  <ul>
   <li>
    Begin variables and functions with a lowercase letter:
    <tt>limit</tt> or <tt>run()</tt>.
   </li>
   <li>If a name consists of several words, you may use either of these:</li>
   <ol>
    <li>
     Capitalize the first letter of each word. This is known as <mark
      >camelCase</mark
     > and is widely used in Java.
    </li>
    <li>
     Use lowercase and underscore separators (<tt>get_line</tt>). This is known
     as <mark>snake_case</mark> is is common in C and Python.
    </li>
   </ol>
   <li>
    Classes and other user-defined data types should begin with an uppercase
    letter, as in <tt>Alien</tt> or <tt>Point3D</tt>.
   </li>
  </ul>
  <h2>Constants</h2>
  <p>
   Values which appear literally in a calculation are called
   <strong>magic numbers</strong>. Your code will be much more reliable and much
   easier to maintain, if you <strong>replace</strong> all magic numbers with <strong
    >named constants</strong
   >, similar to this:
  </p>
  <pre
   class="language-cpp"><code>const double kLocalTaxRate = .00175;</code></pre>
  <p>
   While you may write named constants entirely in uppercase, (<tt>PI</tt> or <tt
    >HALF_DOLLAR</tt
   >), in C++ all-caps usually indicates the presence of a preprocessor MACRO, <a
    target="blank"
    href="https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#es9-avoid-all_caps-names"
   >
    which is discouraged</a
   >. Instead, you may want to follow the
   <a
    target="_blank"
    href="https://google.github.io/styleguide/cppguide.html#Constant_Names"
   >
    Google style guide</a
   > and start with a <tt>k</tt>
   (such as <tt>kPi</tt>).
  </p>
 </div>
</Layout>
