---
import Layout from "../../../layouts/Layout.astro";
import Header from "../../../components/Header.astro";
import imageBinary from "../images/binary.png";
import imagePiano from "../images/piano.png";
const { useLayout } = Astro.props;
---

<Layout
 title="Week 2"
 dir="w02/"
 displayLayout={useLayout}
 chapterSubSections={[]}
>
 <Header id="B">Machine Language</Header>
 <div>
  <p>
   <img
    src={imageBinary}
    class="right shadow round width-25"
    alt="Transistors treated as switches."
    title="Transistors treated as switches."
   />

   Here's an example. The <strong>Intel</strong> CPU instruction which <strong
    >copies a value from memory</strong
   >
   into the <tt>CX</tt> register is <tt>8B4E06</tt>. We humans see this as a
   <strong>hexadecimal (base 16) number</strong>. The computer, on the other
   hand, is a <strong>digital electronic device</strong>, which <strong
    >doesn't know about numbers at all</strong
   >; it is built using integrated circuits (or <strong
    >transistorized switches</strong
   >), each of which is either on or off. We humans <mark>interpret</mark> the "on"
   state as a <tt>1</tt> and the off state as a <tt>0</tt>.
  </p>
  <p>
   So, how does the computer "know" what to do with the instruction <tt
    >8B4E06</tt
   >? It doesn't! In
   <strong>binary</strong> this instruction is
   <tt>100010110100111000000110</tt>, but inside the hardware, it is simply a
   block of switches. <strong>Electricity flows</strong>
   through each <tt>1</tt> to another part of the device. The flow of electricity
   is blocked by a <tt>0</tt>.
  </p>
  <p>
   As a physical analogy, imagine the
   <a target="_blank" href="https://en.wikipedia.org/wiki/Piano_roll"
    >player-piano roll</a
   >, where a hole in the paper causes a note to be played, allowing a hammer to
   strike a particular string.
   <img
    src={imagePiano}
    class="inlineCenter"
    alt="The mechanical piano-player from the opening scenes of WestWorld."
    title="The mechanical piano-player from the opening scenes of WestWorld."
   />
  </p>
  <p>
   Machine code is also called <strong>native code</strong>, since the computer
   can use it without any translation. Machine language programs are difficult
   to understand and, inherently <strong>non-portable</strong>, since they are
   designed for a single type of CPU.
  </p>
  <p>
   Yet, high-performance programs are still written in machine language (or its
   symbolic form,
   <a target="_blank" href="https://en.wikipedia.org/wiki/Assembly_language">
    assembly language
   </a>). You can examine the native code for the APPLE II Disk Operating
   System, written by Steve Wozniak, at the
   <a
    target="_blank"
    href="https://www.computerhistory.org/atchm/apple-ii-dos-source-code/"
   >
    Computer History Museum</a
   >.
  </p>
 </div>
</Layout>
