---
import Layout from "../../../layouts/Layout.astro";
import Header from "../../../components/Header.astro";
const { useLayout } = Astro.props;
---

<Layout
 title="Week 2"
 dir="w02/"
 displayLayout={useLayout}
 chapterSubSections={[]}
>
 <Header id="E">The convert Function</Header>
 <div>
  <p class="firstLine">
   Below you'll find the code for the <tt class="i">f2c</tt>
   program. Use the arrow on the left to show and hide the code as we discuss its
   various features.
  </p>
  <details>
   <summary>The <tt class="i">f2c</tt> Source Code</summary>
   <pre
    class="line-numbers language-cpp"><code>/**
 * @file f2c.cpp
 * @author Stephen Gilbert
 * @version CS 150 Reader
 * Converts Fahrenheit to Celsius.
 */
#include &lt;iostream&gt;
#include &lt;iomanip&gt;
using namespace std;

double convert(double temp);

int main()
&#123;
    cout &lt;&lt; "Enter a temperature in Fahrenheit: ";
    double fahr;
    cin &gt;&gt; fahr;
    double celsius = convert(fahr);
    cout &lt;&lt; "Converted: " &lt;&lt; fahr &lt;&lt; "F -&gt; "
        &lt;&lt; celsius &lt;&lt; "C" &lt;&lt; endl;
    return 0;
&#125;

/**
 * Converts a temperature from Fahrenheit to Celsius.
 * @param temp the Fahrenheit temperature to convert.
 * @return the Celsius temperature.
 */
double convert(double temp)
&#123;
    return (temp - 32) * 5.0 / 9.0;
&#125;</code></pre>
  </details>

  <p>
   In addition to <tt class="i">main</tt>, the <tt class="i">f2c</tt>
   program <strong>uses</strong> the function <tt class="i">convert</tt>
   which the <tt class="i">main</tt> function <mark>calls</mark> (on line 18) to
   carry out its work. Before <tt class="i">main</tt>
   can <strong>call</strong>
   <tt class="i">convert</tt>, though, the compiler must know what kind of
   arguments the function requires, and what kind of value it will return. This
   information is called the function's <mark>interface</mark>, and it is
   supplied by adding a <mark>function declaration</mark> or <mark
    >prototype</mark
   >, appearing <strong>before</strong> the
   <tt class="i">main</tt> function, (on line 11).
  </p>
  <pre
   class="language-cpp"><code>double convert(double temperature);</code></pre>
  <p>
   The prototype provides the information needed to <strong>call</strong> the function:
   <strong>its name along with the types of its inputs and outputs</strong>. C++ <mark
    >requires</mark
   > prototype declarations so the compiler can check whether calls to functions
   are compatible with the definitions of those functions.
  </p>
  <p>
   The <tt class="i">convert</tt> function <mark>definition</mark>, starting on
   line 29, repeats the interface information from the prototype, but<strong
    >does not</strong
   > end in a semicolon. Instead, the definition <strong>header</strong> is followed
   by a
   <strong>body</strong> (just like <tt class="i">main</tt>) consisting of a
   list of statements surrounded (or
   <strong>delimited</strong>) by braces <tt>&#123;&#125;</tt>.
  </p>
  <pre
   class="language-cpp"><code>double convert(double temperature)
&#123;
    return (temp - 32) * 5.0 / 9.0;
&#125;</code></pre>
  <p>
   The body of <tt mark="i">convert</tt> is a single
   <tt>return</tt> statement which uses a formula or
   <mark>expression</mark> to convert the <strong>input</strong>
   Fahrenheit temperature into the <strong>output</strong> Celsius temperature, and
   return it to the caller.
  </p>
 </div>
</Layout>
