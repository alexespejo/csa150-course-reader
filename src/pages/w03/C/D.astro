---
import Layout from "../../../layouts/Layout.astro";
import Header from "../../../components/Header.astro";
const { useLayout } = Astro.props;
---

<Layout
 title="Week 2"
 dir="w03/"
 displayLayout={useLayout}
 chapterSubSections={[]}
>
 <Header id="D">Some Bad Habits</Header><div>
  <p class="firstLine">You may see the idiomatic loop written like this:</p>
  <pre
   class="language-cpp"><code>for (size_t i = 0; i &lt; str.size(); ++i)
    // do something with str[i] or str.at(i)</code></pre>
  <p>
   This is a <mark>bad habit</mark> which <strong>assumes</strong> that calling size()
   is "free"â€”that is, it executes in constant time and there is no overhead for calling
   the function. This is close to true for
   <tt>string::size()</tt>, but <strong>it is not true</strong> for all functions.
   For instance, when working with C-style strings, using the equivalent <tt
    >strlen()</tt
   > function is very expensive.
   <mark>Don't</mark>
   <strong>train your fingers</strong> to do that.
  </p>
  <p>
   <mark>Even</mark> worse is combining this bad habit with
   <tt>int</tt> indexes, like this:
  </p>
  <pre
   class="language-cpp"><code>for (int i = 0; i &lt; str.size(); ++i)...</code></pre>
  <p>
   The comparison <tt>i</tt>
   <tt>&lt;</tt>
   <tt>str.size()</tt>
   automatically converts the type of <tt>i</tt> to an <tt>unsigned</tt>
   <tt>size_t</tt>. If <tt>i</tt> ever becomes negative, it is compared
   <mark>as if it were a very large positive number</mark>. Your compiler may
   warn you if you mix signed and unsigned numbers like this, but it's easier to
   remember: <mark>Just don't do it!</mark>
  </p>
  <p>
   Since <tt>size()</tt> never changes in the loop,
   <mark>store the length in a variable</mark>, and
   <strong>use the variable</strong> in your test. Here is an example:
  </p>
  <pre
   class="language-cpp"><code>for (size_t i = 0, len = str.size(); i &lt; len; ++i)...</code></pre>
  <div class="highlight alert alert-info">
   <p>
    Should you use <tt>i++</tt> or <tt>++i</tt> in your loop update expression? With
    <tt>int</tt> or <tt>size_t</tt> indexes, it makes to difference. The effect is
    the same either way. However, I prefer the prefix version (<tt>++i</tt>)
    because I want to "train my fingers" for more the more advanced
    <b>iterator</b> loops you'll work with in CS 250. With iterators, often the <tt
     >i++</tt
    > version is much slower, or even non-existent.
   </p>
  </div>
 </div>
</Layout>
