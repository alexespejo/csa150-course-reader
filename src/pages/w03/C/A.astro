---
import Layout from "../../../layouts/Layout.astro";
import Header from "../../../components/Header.astro";
import imageForLoop from "../images/for-loop.png";
const { useLayout } = Astro.props;
---

<Layout
 title="Week 2"
 dir="w03/"
 displayLayout={useLayout}
 chapterSubSections={[]}
>
 <Header id="A">
  <h1>Definite Loops with <i>for</i></h1>
 </Header><div>
  <img
   src={imageForLoop}
   class="right round shadow width-25"
   alt="The for loop illustrated."
  />
  <p class="firstLine">
   C++ has a loop designed for repeating an operation a fixed number of times:
   the for loop. You already met the <mark>range-based</mark>
   <tt class="i">for</tt> loop in the last section. In this section we'll cover the
   traditional <mark>classic counter-controlled</mark>
   version.
  </p>
  <p>
   The pattern used when you simply want to <mark
    >repeat an action
    <tt>n</tt> times</mark
   > is this:
  </p>
  <pre
   class="language-cpp"><code>times &lt;- times to repeat
i &lt;- 0
While i is less than times
  Do action
  i &lt;- i + 1</code></pre>
  <p>
   Here is this pattern translated into C++ using the <tt class="i">for</tt> loop.
  </p>
  <pre
   class="language-cpp"><code>int times = 5;    // repeat 5 times;
for (int i = 0; i &lt; times; ++i)
&lbrace;
    cout &lt;&lt; "Hello" &lt;&lt; endl;
&rbrace;</code></pre>
  <p>
   The traditional <tt class="i">for</tt> loop has
   <strong>three sections</strong> inside its parentheses:
  </p>
  <ul>
   <li>
    The <mark>initialization expression</mark> is evaluated once before the loop
    is entered. It creates and initializes the
    <strong>loop control variable</strong>, often named <tt>i</tt>. You may
    create other variables of the same type in this section. These variables
    have <strong>statement scope</strong>; they are not available after the loop
    body. The initialization section ends with a semicolon.
   </li>
   <li>
    The <mark>test condition</mark> is first evaluated after the initialization.
    If <tt>true</tt>, the body is entered; if <tt>false</tt>, it is skipped. The
    condition also ends in a semicolon.
   </li>
   <li>
    The <mark>update expression</mark> is evaluated
    <strong>after</strong> the loop body is completed. It does not end in a semicolon.
    The update expression must change one of the variables in the condition, which
    is evaluated again, immediately following the update.
   </li>
  </ul>
  <p>
   Often, the <strong>index</strong> or <strong>loop control variable</strong>
   is not used inside the body of the loop; it simply controls the number of repetitions.
   Single letter names such as <tt>i</tt> and <tt>j</tt> are conventional. If you
   want others to understand your code, you'll conform to this convention.
  </p>
  <p>
   The loop shown here goes from <tt>0</tt> to <mark>less-than</mark>
   <tt>times</tt>, so we say that this loop uses <mark>asymmetric bounds</mark>.
   This means the <b>lower</b> bounds is <mark>included</mark> while the <b
    >upper</b
   > bound is <mark>excluded</mark>.
  </p>
 </div>
</Layout>
