---
import Layout from "../../../layouts/Layout.astro";
import Header from "../../../components/Header.astro";
const { useLayout } = Astro.props;
---

<Layout
 title="Week 2"
 dir="w03/"
 displayLayout={useLayout}
 chapterSubSections={[]}
>
 <Header id="C">
  <h1>Processing Strings</h1>
 </Header><div>
  <p class="firstLine">
   One use of the <tt class="i">for</tt> loop is to <strong
    >process strings</strong
   >. The <tt class="i">for</tt> loop, and the <mark
    >asymmetric bounds pattern</mark
   >
   are ideal, because the subscripts use by strings and arrays all begin at <tt
    >0</tt
   >, and the last element is always found at <tt>size()</tt>
   <tt>â€“</tt>
   <tt>1</tt>.
  </p>
  <p>
   The <strong>canonical classic</strong>
   <em>for</em> loop to process every character in a string, should look something
   like this:
  </p>
  <pre
   class="language-cpp"><code>for (size_t i = 0, len = str.size(); i &lt; len; ++i)
&lbrace;
    char c = str.at(i);   // now, process c in some way
&rbrace;</code></pre>
  <p>
   Note that the <tt>string::size()</tt> member function returns an
   <mark>unsigned</mark> type. If you are not careful, that can lead to unexpected
   results like this:
  </p>
  <div class="px-2 alert alert-error">
   <svg
    xmlns="http://www.w3.org/2000/svg"
    class="stroke-current shrink-0 h-6 w-6"
    fill="none"
    viewBox="0 0 24 24"
    ><path
     stroke-linecap="round"
     stroke-linejoin="round"
     stroke-width="2"
     d="M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z"
    ></path></svg
   >
   <code class="language-cpp"
    >for (size_t len = str.size() - 1; i &gt;= 0; --i) ...</code
   >
  </div>
 </div>
 <p>
  This loop intended to <mark>count down</mark> from the last character to the first
  at index <tt>0</tt>. However, if <tt>str</tt> is an <mark>empty</mark>
  string, then <tt>i</tt> starts at the largest possible unsigned number, instead
  of <tt>-1</tt>, since unsigned numbers "wrap around". Even worse, because <tt
   >i</tt
  > is an <mark>unsigned</mark> type, the condition <tt>i</tt>
  <tt>&gt;=</tt>
  <tt>0</tt> can <mark>never</mark>
  be false, so you can <mark>never exit the loop</mark>.
 </p>
 <p>Here is a loop that is written correctly:</p>
 <pre
  class="language-cpp"><code>for (size_t i = str.size(); i &gt; 0; --i)
&lbrace;
    char c = str.at(i - 1);
&rbrace;</code></pre>
 <p>
  Alternatively, <mark
   >you can store <tt>str.size()</tt> in an
   <tt>int</tt> variable</mark
  >, as long as you:
 </p>
 <ul>
  <li>
   cast the returned value from <tt>str.size()</tt> to an <tt>int</tt>
   like this:
   <code class="language-cpp"
    >for (int i = static_cast&lt;int&gt;(str.size()); i &gt;= 0; --i) ...</code
   >
  </li>
  <li>
   make sure that the <tt>string</tt> you are processing is no longer than the positive
   range of an <tt>int</tt>. If you do this, your loop will <b>not work</b> if you
   have a large string.
  </li>
 </ul>
</Layout>
