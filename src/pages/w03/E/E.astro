---
import Layout from "../../../layouts/Layout.astro";
import Header from "../../../components/Header.astro";
const { useLayout } = Astro.props;
---

<Layout
 title="Week 2"
 dir="w03/"
 displayLayout={useLayout}
 chapterSubSections={[]}
>
 <Header id="E">Validating Data</Header>
 <div>
  <h1>Validating Data</h1>
  <p class="firstLine">
   When you read a value from <tt>cin</tt>, it is possible that the input may <mark
    >fail</mark
   > because the user entered invalid data. For instance:
   <p>
    <pre
     class="language-cpp"><code>cout &lt;&lt; "Enter a number: ";
int n;
cin &gt;&gt; n;
cout &lt;&lt; n &lt;&lt; endl;</code></pre>
    <p>
     Suppose that the user types in <tt>one</tt> when asked to enter a number. Here's
     what happens:
    </p>
    <ol>
     <li>
      The <tt>cin</tt> object enters a <mark>failed</mark> state and will stop accepting
      any more input.
     </li>
     <li>The variable <tt>n</tt> will be set to <tt>0</tt>.</li>
     <p>
      You can check for success by calling the member function <tt>fail()</tt>
      or by simply using a regular <tt class="i">if</tt> statement. Here's a fragment
      that shows how to use <tt class="i">if</tt>:
     </p>
     <pre
      class="language-cpp"><code>int n;
if (cin &gt;&gt; n) &lbrace; cout &lt;&lt; n &lt;&lt; endl &rbrace;;
else &lbrace; cout &lt;&lt; "Invalid input" &lt;&lt; endl;  &rbrace;</code></pre>
     <p>
      And, here's a fragment which explicitly calles the <tt>fail()</tt>
      member function:
     </p>
     <pre
      class="language-cpp"><code>int n;
cin &gt;&gt; n;
if (cin.fail()) &lbrace; cout &lt;&lt; "Invalid input" &lt;&lt; endl &rbrace;;
else  &lbrace; cout &lt;&lt; n &lt;&lt; endl;&rbrace;
</code></pre>
     <h2>Recovering</h2>
     <p>
      Inside a sentinel loop, you'd like to <mark>recover</mark> if the user inadvertently
      entered bad data.
     </p>
     <ol>
      <li>
       Call <tt>cin.clear()</tt> to allow <tt>cin</tt> to start accepting data once
       again.
      </li>
      <li>
       <mark>Consume</mark> the bad data by creating a <tt>string</tt>
       variable and reading it.
      </li>
     </ol>
     <pre
      class="language-cpp"><code>while (true)                    // Endless loop
 &lbrace;
    cout &lt;&lt; "&gt; ";               // Prompt and read item
    if (cin {'>>'} value) &lbrace; 
        if (value == 0)   &lbrace;break; &lbrace;  // Sentinel? Leave loop
        total += value;             // No sentinel? Process
&lbrace;
    else &lbrace; 
        cin.clear();                // Clear the fail flag
        string bad_data;            // store the bad data
        in {'>>'} bad_data;             // read it and ignore it
&lbrace;
&lbrace;</code></pre>
    </ol>
   </p>
  </p>
 </div>
</Layout>
