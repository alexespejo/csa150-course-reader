---
import Layout from "../../../layouts/Layout.astro";
import Header from "../../../components/Header.astro";
import imageGoal from "../images/goal.png";
const { useLayout } = Astro.props;
---

<Layout
 title="Week 2"
 dir="w03/"
 displayLayout={useLayout}
 chapterSubSections={[]}
>
 <Header id="F">
  <h1>The Loop Goal</h1>
 </Header><div>
  <img src={imageGoal} class="right width-25" alt="Illustrating a loop goal." />
  <p class="firstLine">
   The whole purpose of a loop is to get some
   <strong>real work done</strong>, to accomplish the
   <mark>goal</mark>. Up until now, we've ignored the goal portion entirely,
   because we want to make sure the loop
   <strong>works</strong>, before we put it <mark>to work</mark>.
  </p>
  <p>
   The code to carry out the goal of the loop is written in a
   <strong>different</strong> order than that for the loop mechanics:
  </p>
  <ul>
   <li>start in the <strong>precondition</strong> area</li>
   <li>move to the <strong>operations</strong> in the loop body</li>
   <li>then deal with the <strong>postcondition</strong></li>
  </ul>
  <h2>The Goal Precondition</h2>
  <p>
   The purpose of every loop is to <mark>produce information</mark>. Many loops <strong
    >count</strong
   > things and <strong>add</strong> things, for which you create <strong
    >counters
   </strong>and<strong>accumulators</strong>. For this step, <mark
    >create and initialize the variables</mark
   >
   necessary to <strong>carry out the goal</strong> of the loop.
  </p>
  <p>
   Ask yourself: "<mark>What information does this loop produce?</mark>" Then, <strong
    >create and initialize variables</strong
   > to store that information. In our case, we now need a <tt>counter</tt> to store
   that information.
  </p>
  <pre
   class="pcode"><em>// Step 4: The goal preconditions</em>
str &lt;- string supplied to the problem
<i>counter &lt;- 0</i>
pos &lt;- 0
letter &lt;- str.at(pos)
while letter is not a period
&lbrace;
    pos &lt;- pos + 1
    letter &lt;-&gt; str.at(pos)
&rbrace;</pre>
 </div>
</Layout>
