---
import Layout from "../../../layouts/Layout.astro";
import Header from "../../../components/Header.astro";
const { useLayout } = Astro.props;
---

<Layout
 title="Week 2"
 dir="w03/"
 displayLayout={useLayout}
 chapterSubSections={[]}
>
 <Header id="D">
  <h1>The Bounds Precondition</h1>
 </Header><div>
  <p class="firstLine">
   The bounds make sure that you <strong>exit</strong> the loop at the correct time.
   Next you have to that make it possible to <mark>enter</mark> the loop. Step asks
   <strong>"How do I get out?"</strong>, while Step 2 asks: "<mark
    >How do I get into the loop?</mark
   >" Look at the bounds condition:
  </p>
  <pre class="pcode">while letter is not a period</pre>
  <ol>
   <li><strong>What</strong> is letter?</li>
   <li><strong>Where</strong> did it come from?</li>
   <li><strong>How</strong> did it get a value that I can check?</li>
  </ol>
  <p>
   If you were to write the bounds in C++, using your editor, your code would
   not compile because it refers to variables which don't yet exist. <mark
    >Bounds precondition</mark
   > statements
   <strong>create the variables</strong> used in the test, and
   <strong>initialize</strong> each to some meaningful state.
  </p>
  <pre
   class="pcode"><em>// Step 2: The bounds precondition</em>
<i>str &lt;- string supplied to the problem
pos &lt;- 0
letter &lt;- str.at(pos)</i>
while letter is not a period
&lbrace;
    // Inside the loop
&rbrace;</pre>
  <p>
   In our example, <tt>str</tt> is the string we've been given. We need two variables,
   <tt>pos</tt> which is the position (or index) of the character we want to examine,
   and <tt>letter</tt>, initialized with the first character in <tt>str</tt>.
  </p>
  <p>
   If <tt>letter</tt> does not contain the first character in
   <tt>str</tt>, then you have no assurance that you will
   <mark>ever enter the loopâ€”</mark>
   the value of <tt>letter</tt> will be unknown. (In C++ it will be some random value.)
  </p>
 </div>
</Layout>
