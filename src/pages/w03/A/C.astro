---
import Layout from "../../../layouts/Layout.astro";
import Header from "../../../components/Header.astro";
import imagePassedByValue from "../images/pass-by-value.png";
import imagePassedByReference from "../images/pass-by-reference.png";
const { useLayout } = Astro.props;
---

<Layout
 title="Week 2"
 dir="w03/"
 displayLayout={useLayout}
 chapterSubSections={[]}
>
 <Header id="C">Reference Parameters</Header>
 <div>
  <h1>Reference Parameters</h1>
  <p class="firstLine">
   When you pass a variable to a function, the function receives <mark
    >a copy</mark
   > of the calling value or <strong>argument</strong>. Assigning to a parameter
   variable changes the parameter but has no effect on the argument.
   <a
    target="_blank"
    href="https://pythontutor.com/render.html#code=%23include%20%3Ciostream%3E%0Ausing%20namespace%20std%3B%0A%0Avoid%20toZero%28int%20n%29%0A%7B%0A%20%20n%20%3D%200%3B%0A%7D%0A%0Aint%20main%28%29%20%7B%0A%20%20int%20x%20%3D%2042%3B%0A%20%20toZero%28x%29%3B%0A%20%20cout%20%3C%3C%20x%20%3C%3C%20endl%3B%0A%7D&cumulative=false&curInstr=5&heapPrimitives=nevernest&mode=display&origin=opt-frontend.js&py=cpp_g%2B%2B9.3.0&rawInputLstJSON=%5B%5D&textReferences=false"
    >Consider this program</a
   >, along with a function which attempts set a variable to zero:
  </p>
  <pre
   class="language-cpp"><code>void toZero(int n) &lbrace; n = 0; &rbrace;

int main()
&lbrace;
    int x = 42;
    toZero(x);
    cout &lt;&lt; x &lt;&lt; endl;
&rbrace;;</code></pre>
  <img
   src={imagePassedByValue}
   class="right"
   alt="Visualization of pass-by-value."
  />
  <p>
   If you call the procedure the parameter variable named <tt>n</tt>
   is initialized <mark>with a copy</mark> of the value is stored in
   <tt>x</tt> (<tt>42</tt> in this case). Making a copy of arguments when calling
   a function, is known as
   <mark>pass by value</mark> or <mark>call by value</mark>, and the parameter <tt
    >n</tt
   > is known as a <strong>value parameter</strong>.
  </p>
  <p>
   The assignment statement <tt>n</tt>
   <tt>=</tt>
   <tt>0;</tt> inside the function sets <strong>the parameter variable</strong>
   <tt>n</tt>
   to <tt>0</tt> but leaves the variable <tt>x</tt> unchanged in the <tt
    >main</tt
   > function.
  </p>
  <h2>Pass by Reference</h2>
  <p>
   If you want to
   <a
    target="_blank"
    href="https://pythontutor.com/render.html#code=%23include%20%3Ciostream%3E%0Ausing%20namespace%20std%3B%0A%0Avoid%20toZero%28int%26%20n%29%0A%7B%0A%20%20n%20%3D%200%3B%0A%7D%0A%0Aint%20main%28%29%20%7B%0A%20%20int%20x%20%3D%2042%3B%0A%20%20toZero%28x%29%3B%0A%20%20cout%20%3C%3C%20x%20%3C%3C%20endl%3B%0A%7D&cumulative=false&curInstr=5&heapPrimitives=nevernest&mode=display&origin=opt-frontend.js&py=cpp_g%2B%2B9.3.0&rawInputLstJSON=%5B%5D&textReferences=false"
    >change the value of the calling argument</a
   >, you can change the parameter from a value parameter into a
   <mark>reference parameter</mark> by adding an ampersand between the type and the
   name in the function header, like this:
  </p>
  <pre
   class="language-cpp"><code>void toZero(int&amp; n) &lbrace; n = 0; &rbrace;</code></pre>
  <img
   src={imagePassedByReference}
   class="right"
   alt="Visualization of pass-by-reference."
  />
  <p>
   Unlike value parameters, <strong
    >reference parameters <mark>are not copied</mark>.</strong
   > Instead, the function treats <tt>n</tt> as
   <mark>a reference to the original variable</mark>, which means that the
   memory used for that variable is shared between the function and its caller.
  </p>
  <p>
   If you trace through the program by clicking the link, you'll see that this
   time, the variable <tt>x</tt> in <tt>main</tt>
   is set to <tt>0</tt>, just as you intended.
  </p>
 </div>
</Layout>
