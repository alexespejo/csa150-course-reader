---
import Layout from "../../../layouts/Layout.astro";
import Header from "../../../components/Header.astro";
const { useLayout } = Astro.props;
---

<Layout
 title="Week 2"
 dir="w03/"
 displayLayout={useLayout}
 chapterSubSections={[]}
>
 <Header id="C">Guarded &amp; Unguarded Loops</Header><div>
  <p class="firstLine">
   Classifying loops according to <b>where</b> their condition is tested is not really
   very useful when it comes to deciding which loop to use. It is much more useful
   to classify loops by the <mark>kind of bounds</mark> that they employ.
  </p>
  <p>
   <mark
    >A loop's bounds are the conditions under which it will repeat its actions.</mark
   > In a simple, loop, the this might be expressed as "the counter has a value less
   than ten". In more complex loops, the bounds may be a combination of conditions.
   There are <b>three major kinds of loops</b> that can be built using the basic
   loop syntax available in C++.
  </p>
  <ul>
   <li>
    A <mark>definite</mark> or (<b>counter-controlled</b>) loop repeats its
    actions a fixed number of times&mdash;a "gimme fifty pushups" kind of loop.
    Ideally you can read the code and tell how many times the loop will run. <p>
     Sometimes you won't know the <b>exact</b> number of repetitions until runtime;
     it may be based upon the number of characters in a <tt>string</tt>, for
     instance, or some other number which is not computed until then.
    </p>
   </li>

   <li>
    With an <mark>indefinite loop</mark> you can <b>never</b>
    tell how many times the loop will repeat by examining the code. An indefinite
    loop is a loop that tests for the occurrence of a particular event, not a count
    of the number of repetitions.
    <p>
     "<b>Read characters until you encounter a period</b>" is an indefinite
     loop. The bounds may be reached after reading three characters, or, after
     reading three-thousand. It's also possible that the period might be the
     first character or might not occur at all.
    </p>
    <li>
     <mark>Range-based</mark> loops were added to the language in C++11. Range loops
     iterate over a collection of elements, such as a <tt>string</tt>, array or <tt
      >vector</tt
     >. The informal name for a range loop is a <b>foreach</b> loop. The range-based
     <tt>for</tt> loop looks like this:<p>
      <pre
       class="language-cpp"><code>for (declaration : collection)
    statement</code></pre>
      <p>
       where <i>collection</i> is an object of a type that represents a sequence
       (such as a <tt>string</tt>), and <b>declaration</b> defines the variable that
       is used to access the underlying elements in the sequence. On each cycle of
       the loop, the variable in <b>declaration</b>
       is initialized from the value of the next element in <b>collection</b>.
      </p>
     </p>
     <p>Now, let's look at different kinds of <b>indefinite</b> loops.</p>
    </li>
   </li>
  </ul>
 </div>
</Layout>
